[{"content":"目录\n开发流程 - Gameplay层 关键步骤和解决思路 - Gameplay层 代码总体回顾及源码 复盘和总结 这一篇将详细展示Gameplay的实现思路，并在结尾处附上项目的完整源码。如需回顾整个项目的概况和整体框架的实现，请阅读本站文章《植物明星大乱斗之框架设计》。\n开发流程 - Gameplay层 主菜单界面和玩家选择界面的实现 问题1：此项目封装了摄像机类，那么负责游戏渲染的主摄像机应该放在哪里呢？ 解决思路：将摄像机以参数的形式传递给渲染的函数 问题2：如何让文本看起来有立体效果？ 解决思路：渲染两遍文本（比如一遍在原始位置渲染白色，另一遍在斜下方偏移一点的地方渲染灰色） 问题3：如何让选择界面的背景上有滚动剪影的效果 解决思路：同一张图片绘制两次 游戏局内场景搭建和物理模拟实现 问题1：如何模拟“重力”效果？ 解决思路：”重力“的体现为下坠+停止，封装平台类 问题2：如何对物理碰撞数据进行可视化检查？ 解决思路：实现一个简单的”调试模式“ 问题3：玩家在某些下落情况下会出现突然向上瞬移的情况 解决思路：确保上一帧玩家的脚底位置，决定是否要在这一帧修正玩家的脚底位置 问题4：玩家出现连环跳 解决思路：确保玩家在竖直方向速度为0时，才能继续执行跳跃逻辑 子弹基类的实现 游戏玩法的本质是通过抛射物似的子弹给对手造成伤害 思路：创建子弹基类，不同的具体子弹继承自这个基类 问题：子弹在碰撞后消失的逻辑该怎么写？ 解决思路：与玩家死亡播放动画的情况类似，使用回调函数解决 子弹删除逻辑的优化 豌豆子弹类的实现 日光炸弹类、超级日光炸弹类的实现 注意：爆炸动画时素材位置的偏移调整 攻击技能的实现 使用定时器来记录冷却时间 无敌帧的实现 思路：在播放动画时，间隔显示不同的图片：正常图片 和 纯白的剪影图片 玩家状态栏的实现（生命值、能量值） 粒子系统的实现 胜负检定和结算动效 关键步骤和解决思路 - Gameplay层 主菜单界面和角色选择界面的搭建 摄像机的处理 主摄像机怎么放比较好呢？\n因为我们在此项目中封装了摄像机类，那么就需要确保每一个场景在执行渲染时，都可以获取到游戏的摄像机对象，从而根据它的位置实时渲染游戏画面。有三个思路实现：\n思路 1： 将摄像机定义在场景内部，让它作为场景类的成员变量存在。但这样的设计就很难在不同场景间共享摄像机的数据了。\n思路 2： 把摄像机对象定义为全局变量，和此项目中图片等资源一样，我们可以通过 extern 关键字获取它。不过，全局变量终究是一种杂乱的设计，与我们想要尽量封装数据、减少全局变量的目标相悖。\n思路 3： 参考帧更新中将时间的流逝 delta 以参数的方式传递给函数的思路 void on_update(int delta) ，我们选择把摄像机对象也作为参数在渲染时传递进来 void on_draw(const Camera\u0026amp; camera)。\n主菜单界面的实现 确定了摄像机的处理方法后，主菜单的完整代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 extern IMAGE img_menu_background; extern SceneManager scene_manager; class MenuScene : public Scene { public: MenuScene() = default; ~MenuScene() = default; // 重写Scene基类中必要的虚函数 void on_enter() { mciSendString(_T(\u0026#34;play bgm_menu repeat from 0\u0026#34;), NULL, 0, NULL); } void on_update(int delta) { } void on_draw(const Camera\u0026amp; camera) { putimage(0, 0, \u0026amp;img_menu_background); } void on_input(const ExMessage\u0026amp; msg) { if (msg.message == WM_KEYUP) { mciSendString(_T(\u0026#34;play ui_confirm from 0\u0026#34;), NULL, 0, NULL); scene_manager.switch_to(SceneManager::SceneType::Selector); } } void on_exit() { } private: }; 角色选择界面的实现 角色种类的设计技巧 我们首先用枚举定义了玩家可选择的角色种类。此处为什么要加上一个名为“无效”的玩家呢？它可以作为确保我们在实现选择玩家的时候，我们的选择不会越界。\n1 2 3 4 5 6 enum class PlayerType { Peashooter = 0, Sunflower, Invalid }; 以玩家1的向左切换为例，我们首先将玩家角色类型的枚举变量转为 int 类型并减小1，然后加上同样转为 int 类型的 Invalid 枚举，来确保这个值始终大于等于0。随后将这个得到的值对 Invalid 枚举对应的 int 类型进行取模，确保最终的结果不会大于或等于 Invalid 的值。最后，将这一波操作得到的 int 值再转为 PlayerType 枚举类后赋值给玩家1的角色类型变量。这样我们就可以确保在按下向左切换键后，玩家类型发生了变化，同时这个值还在枚举类的第一个值和最后一个值之间，即 [Peashooter, Invalid)的前闭后开区间。\n1 2 3 4 5 6 7 8 9 10 case WM_KEYUP: switch (msg.vkcode) { case 0x41: // \u0026#39;A\u0026#39; is_btn_1P_left_down = false; player_type_1 = (PlayerType)(((int)PlayerType::Invalid + (int)player_type_1 - 1) % (int)PlayerType::Invalid); mciSendString(_T(\u0026#34;play ui_switch from 0\u0026#34;), NULL, 0, NULL); break; // ...... } 将摄像机封装进Animation类 因为所有的动画渲染时都需要先获取摄像机的位置，并且这部分逻辑在所有渲染动画时都要使用。那么根据 面向对象的封装特性，我们干脆把获取摄像机位置、并与自身坐标作差的这部分逻辑，直接放到Animation类中，于是动画类的 on_draw方法需要改成 void on_draw(const Camera\u0026amp; camera, int x, int y) const 。\n背景剪影滚动效果的实现 一种比较简单的实现思路是将这张图片渲染两次。我们想象一条用来定位的竖直线条，这根线条从矩形的左侧滚向矩形的右侧。当达到矩形右侧时，线条又会闪现回到矩形左侧。我们在线的左侧绘制一次图片，然后在线的右侧又绘制一次图片，这样就实现了图片的连续滚动效果。\n数据更新部分具体的代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 void on_update(int delta) { animation_peashooter.on_update(delta); animation_sunflower.on_update(delta); // 背景滚动效果 selector_background_scroll_offset_x += 5; if (selector_background_scroll_offset_x \u0026gt;= img_peashooter_selector_background_left.getwidth()) { selector_background_scroll_offset_x = 0; } } 在绘制部分，我们首先需要重载一个 putimage_alpha 函数来对图片进行裁剪绘制：\n1 2 3 4 5 6 7 8 inline void putimage_alpha(int dst_x, int dst_y, int width, int height, IMAGE* img, int src_x, int src_y) { int w = width \u0026gt; 0 ? width : img-\u0026gt;getwidth(); int h = height \u0026gt; 0 ? height : img-\u0026gt;getheight(); AlphaBlend(GetImageHDC(GetWorkingImage()), dst_x, dst_y, w, h, GetImageHDC(img), src_x, src_y, w, h, { AC_SRC_OVER, 0 , 255, AC_SRC_ALPHA }); } 然后在玩家1的背景图上滚动玩家2的剪影，在玩家2的背景图上滚动玩家1的剪影。所以最终的绘制部分代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 void on_draw(const Camera\u0026amp; camera) { IMAGE* img_P1_selector_background = nullptr; IMAGE* img_P2_selector_background = nullptr; // 互相为对方的滚动背景图赋值 switch (player_type_2) { case PlayerType::Peashooter: img_P1_selector_background = \u0026amp;img_peashooter_selector_background_right; break; case PlayerType::Sunflower: img_P1_selector_background = \u0026amp;img_sunflower_selector_background_right; break; default: img_P1_selector_background = \u0026amp;img_peashooter_selector_background_right; break; } switch (player_type_1) { case PlayerType::Peashooter: img_P2_selector_background = \u0026amp;img_peashooter_selector_background_left; break; case PlayerType::Sunflower: img_P2_selector_background = \u0026amp;img_sunflower_selector_background_left; break; default: img_P2_selector_background = \u0026amp;img_peashooter_selector_background_left; break; } putimage(0, 0, \u0026amp;img_selector_background); // 绘制动态背景图 putimage_alpha(getwidth() - selector_background_scroll_offset_x, 0, img_P2_selector_background); putimage_alpha(getwidth() - img_P2_selector_background-\u0026gt;getwidth(), 0, img_P2_selector_background-\u0026gt;getwidth() - selector_background_scroll_offset_x, 0, img_P2_selector_background, selector_background_scroll_offset_x, 0); putimage_alpha(selector_background_scroll_offset_x - img_P1_selector_background-\u0026gt;getwidth(), 0, img_P1_selector_background); putimage_alpha(selector_background_scroll_offset_x, 0, img_P1_selector_background-\u0026gt;getwidth() - selector_background_scroll_offset_x, 0, img_P1_selector_background, 0, 0); putimage_alpha(pos_img_VS.x, pos_img_VS.y, \u0026amp;img_VS); // ...... } 物理引擎的实现 平台类的设计 从功能入手考虑”平台“碰撞器的设计。在大多数2D平台类游戏的设计中，平台大多数被设计成 单向碰撞，也就是说，玩家从上方坠落时可以正常落到平台上；而当玩家从平台下方向上跳跃时，就可以穿过平台站立在平台上。所以我们只需要考虑玩家可以”站在哪里“即可，于是将平台碰撞器抽象为 一条线。\n此处需要注意的是，虽然我们在碰撞器的结构体中已经记录了平台的位置，但是还是需要单独去记录平台的渲染位置。这是因为平台的图片素材是有厚度的，并且这些图片的最顶部不一定就是碰撞线所处的位置。一般来说，碰撞的检测线位于平台图片内部稍偏上一点 的地方，这样在画面上才更符合玩家的直觉。同时，这种平台类的设计也和我们总体的设计思路 数据逻辑和渲染分离 相一致。当我们在碰撞检测时，我们只需要关注CollisionShape 的数据部分；当我们进行绘图时，我们也只需要关注图片和绘制位置的信息即可。这就进一步实践了 解耦合。\n为物理碰撞添加一个简单的调式模式，只需要在该模式下绘制出碰撞器的形状即可。最终，平台类的完整代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 extern bool is_debug; class Platform { public: struct CollisionShape // 描述碰撞器形状 { float y; float x_left; float x_right; }; public: CollisionShape shape; // 数据逻辑和渲染分离，实现解耦合 IMAGE* img = nullptr; POINT render_position = { 0 }; public: Platform() = default; ~Platform() = default; void on_draw(const Camera\u0026amp; camera) const { putimage_alpha(camera, render_position.x, render_position.y, img); // 根据是否在debug模式来决定是否要绘制碰撞线 if (is_debug) { setlinecolor(RGB(255, 0, 0)); line(camera, (int)shape.x_left, (int)shape.y, (int)shape.x_right, (int)shape.y); } } private: }; 玩家基类的设计 把所有玩家都具备的数据和逻辑封装在玩家基类中。而豌豆射手、向日葵等具体的角色，则分别继承自Player基类，实现自己的逻辑。\n如何实例化玩家对象？\n因为有两个类别的玩家角色，游戏中具体实例化哪个玩家类，取决于玩家在游戏的选角阶段选择了哪一个角色，所以我们需要在玩家角色选择界面执行这部分的逻辑。同时，我们还需要在游戏局内的场景中使用它们。所以最简单的思路就是把它和之前那些生命周期同样跨越多个场景的对象一样，定义在全局环境中。所以在角色选择界面的相关代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // SelectorScene.h class SelectorScene : public Scene { public: // ...... void on_exit() { // 根据玩家选择的角色，实例化对应的玩家对象，用于Game Scene中 switch (player_type_1) { case PlayerType::Peashooter: player_1 = new PeashooterPlayer(); break; case PlayerType::Sunflower: player_1 = new SunflowerPlayer(); break; } switch (player_type_2) { case PlayerType::Peashooter: player_2 = new PeashooterPlayer(); break; case PlayerType::Sunflower: player_2 = new SunflowerPlayer(); break; } } // ...... } 另外，我们还需要记录玩家在世界坐标中的位置 Vector2 position; 另外需要添加玩家角色的动画相关的定义，这些动画具体使用哪个图集渲染，放到具体的子类中实现。读取玩家的按键操作并将按键消息映射到对应的逻辑这部分代码也应该放到玩家基类中。那么与玩家键位控制相关的玩家序号该怎么写呢？在设计上，我们把 玩家序号 作为玩家对象的一个成员，只需要在按键操作时根据序号执行不同逻辑即可。\n平台单向碰撞检测和重力模拟 重力模拟 在自由落体的过程中，有两个关键的值：重力加速度和物体当前的速度。在整个重力模拟的过程中，场景中的物体始终都在受到重力加速度的牵引，并且有着向着竖直方向加速的趋势。所以在玩家类中还需要定义重力常量 const float gravity = 1.6e-3f;\t注意，这个数值看似很大，但其实是在游戏开发中很常见的情况。受限于我们游戏世界的尺寸、画面比例乃至于玩家手感的优化，重力极有可能被调整为一个“四不像”的数值，作为开发者，我们只需要让玩家等物体在这个值的影响下展现出正确的效果即可。和物理相关的所有代码，我们都会写在 void move_and_collide(int delta) 这个函数中。于是，重力的模拟只需要用两行代码即可实现：\n1 2 3 4 5 6 7 8 9 // Player.h // ...... protected: void move_and_collide(int delta) { velocity.y += gravity * delta; position += velocity * (float)delta; } // ...... 平台单向碰撞检测 玩家和平台的碰撞只需要判断直线和矩形是否在水平方向发生重合即可。具体方法：取二者最右边界的值和二者最左边界的值作差，如果结果小于二者宽度之和，那么这两个图形在水平方向上有重合部分，也就是说，玩家角色和该平台在水平方向上发生了碰撞：\n竖直方向上的碰撞更为简单：只需要确保平台碰撞检测线的 y 坐标，是否处于玩家矩形的上下边界之间即可。而当玩家和平台在水平和竖直方向上都有重合时，我们才能判断二者发生了碰撞。\n接下来，我们需要考虑如何对玩家的坐标进行修正了。既然玩家已经碰到了平台，那么玩家无论已经落下多少距离，都应该停在平台之上。如果我们只是简单粗暴地将玩家的脚底位置设置到平台上，那么在某些情况下可能会发生“穿模”的bug：玩家向上跳起，但是只有身体的一部分穿过了平台，然后开始下落，这时玩家的速度向下，同时和平台发生了碰撞，满足了目前代码的碰撞条件，如果此时直接将玩家设置到平台之上的话，那么会出现刚刚开始下落的玩家一瞬间被移到了平台之上。\n所以，我们需要确保只有玩家的整个身体都穿过了平台，随后开始下落时，才能判断玩家和平台发生了碰撞。也就是说，我们需要先获取上一帧玩家脚底的位置，只有它位于平台上方了，并且这一帧满足我们先前讨论的所有条件，才会执行修正玩家脚底坐标的逻辑。于是，完善后的代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 void move_and_collide(int delta) { velocity.y += gravity * delta; position += velocity * (float)delta; // 碰撞检测 if (velocity.y \u0026gt; 0) { for (const Platform\u0026amp; platform : platform_list) { const Platform::CollisionShape\u0026amp; shape = platform.shape; bool is_collide_x = (max(position.x + size.x, shape.x_right) - min(position.x, shape.x_left) \u0026lt;= size.x + (shape.x_right - shape.x_left)); bool is_collide_y = (shape.y \u0026gt;= position.y \u0026amp;\u0026amp; shape.y \u0026lt;= position.y + size.y); if (is_collide_x \u0026amp;\u0026amp; is_collide_y) { // 需要根据前一帧的脚底位置是否高于平台位置，来判断要不要将玩家的最终位置放在平台上 float delta_pos_y = velocity.y * delta; float last_tick_foot_pos_y = position.y + size.y - delta_pos_y; if (last_tick_foot_pos_y \u0026lt;= shape.y) // 玩家在上一帧跳跃高度高于平台 { position.y = shape.y - size.y; velocity.y = 0; break; } } } } } 角色技能设计 玩家技能的程序功能需求 此项目中有两种玩家角色：豌豆射手和向日葵。这两种角色都有普通攻击和特殊攻击两种攻击方式。\n豌豆射手：可以向自己的面朝的方向发射豌豆子弹，子弹命中对方可以积攒能量。能量值蓄满后可以释放特殊攻击技能，快速喷射出一连串的豌豆子弹。\n向日葵：普通攻击向着自己面朝的斜上方抛射日光炸弹。日光炸弹会受重力影响呈不太容易瞄准的曲线运动，但它在击中敌人后造成的伤害和奖励的能量更高。向日葵同样可以在能量集满后释放特殊攻击技能——在对手的头顶出召唤出巨大的日光炸弹，这个大日光炸弹有着更大的伤害范围和更高额的能量回馈。\n从游戏设计的角度，无论何种类型的玩家角色，其核心都是使用抛射物给对手造成伤害的玩法。于是，我们就可以对场景中所有的抛射物进行大一统，它们的差异无非是在动画贴图和伤害范围等数值上等等。我们可以创建Bullet基类，豌豆子弹和日光炸弹、超大型日光炸弹则分别继承这个子弹基类，然后实现各自具体的更新和渲染逻辑。\n子弹碰到敌人后消失的逻辑实现 类似于在动画类设计时玩家死亡消失的思路，子弹在碰到敌人后就应该被立即设置为无效的状态，从而防止其在后续的帧更新时与敌人发生多次碰撞。但是由于我们需要播放豌豆子弹的破裂动画和日光炸弹的爆炸动画，所以不能立即将子弹对象从场景中删除。也就是说，场景中的每一个子弹对象都有三个阶段：正常状态、无效状态、可以被删除的状态。\n正常状态 中，我们播放子弹的动画，并在每一帧中检测它与玩家的碰撞。当它与目标玩家发生碰撞后，进入到 无效状态，此时，我们不再对子弹进行碰撞检测，同时播放子弹销毁的动画。在动画播放结束后，子弹进入到可以被删除的状态，从而在场景更新时被移除掉。所以子弹的成员变量可以这样设计：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Bullet.h protected: Vector2 size;\t// 子弹碰撞器尺寸 Vector2 position;\t// 子弹位置 Vector2 velocity;\t// 子弹速度 int damage = 10;\t// 子弹杀伤力 // 子弹的三个状态：有效、无效、可以被删除 bool valid = true;\t// 子弹是否有效 bool can_remove = false;\t// 子弹是否可以被移除 function\u0026lt;void()\u0026gt; callback;\t// 子弹碰撞的回调函数 PlayerID target_id = PlayerID::P1;\t// 子弹碰撞的目标玩家的ID 子弹消失逻辑的优化 如果子弹只有在碰撞到玩家后才被销毁，那么没有发生碰撞的子弹就永远不会被删除掉，造成内存泄漏。所以我们还需要对已经飞到屏幕外不可见的子弹对象进行销毁。这部分的逻辑同样是所有继承自Bullet 基类的子类通用的内容，所以我们还需要定义 check_if_exceeds_screen 这一方法，在内部检测子弹的矩形边界是否已经位于屏幕矩形之外。\n完整的子弹基类的代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 extern bool is_debug; // Bullet基类 class Bullet { public: Bullet() = default; ~Bullet() = default; virtual void on_collide() { if (callback) callback(); } virtual bool check_collision(const Vector2\u0026amp; position, const Vector2\u0026amp; size) // 子弹中心坐标是否进入玩家碰撞体内部 { return this-\u0026gt;position.x + this-\u0026gt;size.x / 2 \u0026gt;= position.x \u0026amp;\u0026amp; this-\u0026gt;position.x + this-\u0026gt;size.x / 2 \u0026lt;= position.x + size.x \u0026amp;\u0026amp; this-\u0026gt;position.y + this-\u0026gt;size.y / 2 \u0026gt;= position.y \u0026amp;\u0026amp; this-\u0026gt;position.y + this-\u0026gt;size.y / 2 \u0026lt;= position.y + size.y; } virtual void on_update(int delta) { } virtual void on_draw(const Camera\u0026amp; camera) const { if (is_debug) { setfillcolor(RGB(255, 255, 255)); setlinecolor(RGB(255, 255, 255)); rectangle((int)position.x, (int)position.y, (int)(position.x + size.x), (int)(position.y + size.y)); solidcircle((int)(position.x + size.x / 2), (int)(position.y + size.y / 2), 5); } } void set_damage(int val) { damage = val; } int get_damage() { return damage; } void set_position(float x, float y) { position.x = x; position.y = y; } const Vector2\u0026amp; get_position() const { return position; } const Vector2\u0026amp; get_size() const { return size; } void set_velocity(float x, float y) { velocity.x = x; velocity.y = y; } void set_collide_target(PlayerID target) { target_id = target; } PlayerID get_collide_target() const { return target_id; } void set_callback(function\u0026lt;void()\u0026gt; callback) { this-\u0026gt;callback = callback; } // 设置子弹是否可以继续碰撞 void set_valid(bool flag) { valid = flag; } bool get_valid() const { return valid; } bool check_can_remove() const { return can_remove; } protected: bool check_if_exceeds_screen() { return (position.x + size.x \u0026lt;= 0 || position.x \u0026gt;= getwidth() || position.y + size.y \u0026lt;= 0 || position.y \u0026gt;= getheight()); } protected: Vector2 size;\t// 子弹碰撞器尺寸 Vector2 position; Vector2 velocity; int damage = 10;\t// 子弹杀伤力 // 子弹的三个状态：有效、无效、可以被删除 bool valid = true;\t// 子弹是否有效 bool can_remove = false;\t// 子弹是否可以被移除 function\u0026lt;void()\u0026gt; callback;\t// 子弹碰撞的回调函数 PlayerID target_id = PlayerID::P1;\t// 子弹碰撞的目标玩家的ID }; 注意：刚开始时，我们通常无法一次性地、 自顶而下 地这样设计一个游戏对象类。类的设计往往是 边写边改，然后通过后续使用时的查漏补缺来完善基类的内容。自顶而下地设计，在很多程度上是对编程经验的考验，随着不断地练习和经验的累积，会对这种思路越来越熟悉。\n豌豆子弹类的设计 豌豆射手只会发射一种类型的子弹，普通攻击和特殊攻击无非是子弹发射频率的不同。我们用三种不同的音效资源在豌豆子弹发生碰撞时进行随机播放，这种设计在游戏开发中很常见。比如游戏中角色的脚步声或者是射击时的枪声，都可以使用不同的音效进行播放，这种随机的效果音会让游戏显得更加自然和灵动。所以，我们需要在豌豆子弹子类中重写 on_colide 方法来为豌豆子弹添加不同的破碎声音。需要注意的是，我们在 重写父类方法且还是需要执行父类逻辑时，需要显式地调用父类的方法。于是，完整的豌豆子弹子类是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // PeaBullet.h extern IMAGE img_pea; extern Atlas atlas_pea_break; class PeaBullet : public Bullet { public: PeaBullet() { size.x = 64, size.y = 64; damage = 10; animation_break.set_atlas(\u0026amp;atlas_pea_break); animation_break.set_interval(100); animation_break.set_loop(false); animation_break.set_callback([\u0026amp;]() { can_remove = true; }); } ~PeaBullet() = default; void on_update(int delta) { position += velocity * (float)delta; if (!valid) animation_break.on_update(delta); if (check_if_exceeds_screen()) can_remove = true; } void on_draw(const Camera\u0026amp; camera) const { if (valid) putimage_alpha(camera, (int)position.x, (int)position.y, \u0026amp;img_pea); else animation_break.on_draw(camera, (int)position.x, (int)position.y); Bullet::on_draw(camera); } void on_collide() { Bullet::on_collide(); switch (rand() % 3) { case 0: mciSendString(_T(\u0026#34;play pea_break_1 from 0\u0026#34;), NULL, 0, NULL); break; case 1: mciSendString(_T(\u0026#34;play pea_break_2 from 0\u0026#34;), NULL, 0, NULL); break; case 3: mciSendString(_T(\u0026#34;play pea_break_3 from 0\u0026#34;), NULL, 0, NULL); break; } } private: Animation animation_break;\t// 豌豆子弹破碎动画 }; 在 Bullet 基类的基础上， PeaBullet 子类只是简单扩展了一部分自己独有的逻辑，就可以相对简明地实现完整的子弹功能了。这正是面向对象中 继承 的魅力所在。\n日光炸弹类的实现 需要注意的是，爆炸动画的序列帧素材尺寸时略大于日光炸弹默认动画序列帧尺寸的，所以为了确保日光炸弹在爆炸时渲染的效果正确，我们就要保证这两个动画所在的矩形的中心对齐。而在EasyX中，我们渲染的坐标原点是矩形左上角的坐标，所以我们在爆炸动画渲染时加上一个小小的位置偏移，确保画面效果正确。\n另外，在豌豆子弹的 on_update 方法中，我们根据其速度不断更新它的位置，也就是说，无论豌豆子弹是否发生了碰撞，都会一直向前飞翔。配合豌豆子弹破碎后的动画，我们就顺手实现了子弹碰撞后的飞溅效果。日光炸弹爆炸后的动画有所不同，它应该留在原地而不会继续受重力的影响而运动。\n完整的日光炸弹类的代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 // SunBullet.h extern Atlas atlas_sun; extern Atlas atlas_sun_explode; extern Camera main_camera; class SunBullet : public Bullet { public: SunBullet() { size.x = 96, size.y = 96; damage = 20; animation_idle.set_atlas(\u0026amp;atlas_sun); animation_idle.set_interval(50); animation_explode.set_atlas(\u0026amp;atlas_sun_explode); animation_explode.set_interval(50); animation_explode.set_loop(false); animation_explode.set_callback([\u0026amp;]() { can_remove = true; }); // 处理爆炸和idle时图片的偏移问题 IMAGE* frame_idle = animation_idle.get_frame(); IMAGE* frame_explode = animation_explode.get_frame(); explode_render_offset.x = (frame_idle-\u0026gt;getwidth() - frame_explode-\u0026gt;getwidth()) / 2.0f; explode_render_offset.y = (frame_idle-\u0026gt;getheight() - frame_explode-\u0026gt;getheight()) / 2.0f; } ~SunBullet() = default; void on_update(int delta) { if (valid) { velocity.y += gravity * delta; position += velocity * (float)delta; } // 更新动画状态 if (!valid) animation_explode.on_update(delta); else animation_idle.on_update(delta); if (check_if_exceeds_screen()) can_remove = true; } void on_draw(const Camera\u0026amp; camera) const { if (valid) animation_idle.on_draw(camera, (int)position.x, (int)position.y); else { animation_explode.on_draw(camera, (int)(position.x + explode_render_offset.x), (int)(position.y + explode_render_offset.y)); } Bullet::on_draw(camera); } void on_collide() { Bullet::on_collide(); main_camera.shake(5, 250);\t// 摄像机在爆炸时的抖动效果 mciSendString(_T(\u0026#34;play sun_explode from 0\u0026#34;), NULL, 0, NULL); } private: const float gravity = 1e-3f;\t// 日光炸弹的重力 private: Animation animation_idle;\t// 日光炸弹的默认动画 Animation animation_explode;\t// 日光炸弹的爆炸动画 Vector2 explode_render_offset;\t// 爆炸时动画的渲染偏移（爆炸的图片略大于idle图片 // 使其图片中心点重合，更符合玩家的直觉 }; 超级日光炸弹类的实现 在我们的游戏中，向日葵的特殊技能是可以从屏幕外召唤超级大的日光炸弹。比起普通攻击召唤的小型炸弹，这个炸弹更大更强。它不会受到重力影响，而是缓慢下落，更多的是起到封走位的作用，方便抛射的小型日光炸弹更容易命中对手。\n我们希望超级日光炸弹的碰撞检测范围更大一些，那么就不再将子弹的中心位置坐标作为碰撞检测点了，而是使用矩形边界作为碰撞检测的范围。于是我们就需要重写 check_collision 的方法了。\n超级日光炸弹类是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 extern Atlas atlas_sun_ex; extern Atlas atlas_sun_ex_explode; extern Camera main_camera; class SunBulletEx : public Bullet { public: SunBulletEx() { size.x = 288, size.y = 288; damage = 20; animation_idle.set_atlas(\u0026amp;atlas_sun_ex); animation_idle.set_interval(50); animation_explode.set_atlas(\u0026amp;atlas_sun_ex_explode); animation_explode.set_interval(50); animation_explode.set_loop(false); animation_explode.set_callback([\u0026amp;]() { can_remove = true; }); // 处理爆炸和idle时图片的偏移问题 IMAGE* frame_idle = animation_idle.get_frame(); IMAGE* frame_explode = animation_explode.get_frame(); explode_render_offset.x = (frame_idle-\u0026gt;getwidth() - frame_explode-\u0026gt;getwidth()) / 2.0f; explode_render_offset.y = (frame_idle-\u0026gt;getheight() - frame_explode-\u0026gt;getheight()) / 2.0f; } ~SunBulletEx() = default; void on_update(int delta) { if (valid) { position += velocity * (float)delta; } if (!valid) animation_explode.on_update(delta); else animation_idle.on_update(delta); if (check_if_exceeds_screen()) can_remove = true; } void on_draw(const Camera\u0026amp; camera) const { if (valid) animation_idle.on_draw(camera, (int)position.x, (int)position.y); else { animation_explode.on_draw(camera, (int)(position.x + explode_render_offset.x), (int)(position.y + explode_render_offset.y)); } Bullet::on_draw(camera); } void on_collide() { Bullet::on_collide(); main_camera.shake(20, 350);\tmciSendString(_T(\u0026#34;play sun_explode_ex from 0\u0026#34;), NULL, 0, NULL); } bool check_collision(const Vector2\u0026amp; position, const Vector2\u0026amp; size)\t// 将碰撞范围扩展为一个矩形，而不是子弹的中心点 { bool is_collide_x = (max(this-\u0026gt;position.x + this-\u0026gt;size.x, position.x + size.x) - min(this-\u0026gt;position.x, position.x) \u0026lt;= this-\u0026gt;size.x + size.x); bool is_collide_y = (max(this-\u0026gt;position.y + this-\u0026gt;size.y, position.y + size.y) - min(this-\u0026gt;position.y, position.y) \u0026lt;= this-\u0026gt;size.y + size.y); return is_collide_x \u0026amp;\u0026amp; is_collide_y; } private: Animation animation_idle; Animation animation_explode; Vector2 explode_render_offset; }; 从设计角度讲，超级日光炸弹完全可以通过继承普通日光炸弹来简化代码。但此项目还是采用这种相对扁平的类继承关系，确保整体的代码结构易于理解。\n技能系统 在 Player 基类中添加 virtual void on_attack 和 virtual void on_attack_ex 两个虚函数，然后在具体的玩家子类中重写这两个虚函数的逻辑，就可以完成角色的普通攻击和特殊攻击了。\n冷却时间的实现思路 角色的普通攻击一般是存在冷却时间的，在冷却时间内，无论如何按键都无法触发攻击效果，所以我们定义一个布尔变量 can_attack 用来标识角色当前是否可以释放普通攻击，使用一个定时器来记录角色普通攻击的冷却时间，用一个 int 变量来标识玩家普通攻击的冷却时间毫秒数。这样，我们就只需要在按键消息触发时，检查当前是否可以执行普通攻击，如果可以执行，则翻转这个布尔变量并重置定时器的时间，当定时器时间到达后，再恢复玩家可攻击的状态。这样，我们就实现了普通攻击的冷却效果。\n无敌状态的实现 我们用两个布尔变量来标识角色当前是否处于“无敌状态” bool is_invulnaerable = false; 和当前帧是否需要显示玩家剪影 bool is_showing_sketch_frame = false; 我们希望当玩家处于无敌帧时，出现闪烁的动画效果，那么就需要不断切换显示当前动画序列帧和剪影动画序列帧：\n我们通过添加两个定时器来控制玩家退出无敌状态以及闪烁时两种不同序列帧的切换功能：Timer timer_ivulnerable; Timer timer_invulnerable_blink; 于是在定时器的部分在 Player 类的构造函数里进行初始化：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Player.h Player() { current_animation = is_facing_right; // 初始化普通攻击冷却相关成员变量 timer_attack_cd.set_wait_time(attack_cd); timer_attack_cd.set_one_shot(true); timer_attack_cd.set_callback([\u0026amp;]() { can_attack = true; }); // 初始化无敌时间定时器 timer_invulnerable.set_wait_time(750); timer_invulnerable.set_one_shot(true); timer_invulnerable.set_callback([\u0026amp;]() { is_invulnerable = false; is_showing_sketch_frame = false; // 无敌结束时确保不再显示剪影 }); // 初始化无敌动画闪烁定时器 timer_invulnerable_blink.set_wait_time(75); timer_invulnerable_blink.set_callback([\u0026amp;]() { is_showing_sketch_frame = !is_showing_sketch_frame; }); // ...... } 在 on_update 中对定时器进行更新。在 Util.h 添加一个工具函数，实现将图片处理为纯白色的剪影效果。我们读取图片对象的像素色彩缓存区，将所有像素设置为白色即可，详细的解释请见本站文章《提瓦特幸存者》的“番外篇”部分。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Util.h inline void sketch_image(IMAGE* src, IMAGE* dst) { int w = src-\u0026gt;getwidth(); int h = src-\u0026gt;getheight(); Resize(dst, w, h); DWORD* src_buffer = GetImageBuffer(src); DWORD* dst_buffer = GetImageBuffer(dst); for (int y = 0; y \u0026lt; h; y++) { for (int x = 0; x \u0026lt; w; x++) { int idx = y * w + x; dst_buffer[idx] = BGR(RGB(255, 255, 255)) | (src_buffer[idx] \u0026amp; 0xFF000000); } } } 那么，在 on_update 中就可以添加是否需要显示剪影图片的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 // Player.h virtual void on_update(int delta) { // ...... // 是否需要显示剪影图片 // 仅在无敌且需要显示剪影的帧，生成剪影图片 if (is_showing_sketch_frame) sketch_image(current_animation-\u0026gt;get_frame(), \u0026amp;img_sketch); // ...... } 并在 on_draw 中进行相应绘制：\n1 2 3 4 5 6 7 8 9 10 11 // Player.h virtual void on_draw(const Camera\u0026amp; camera) { // ...... if (hp \u0026gt; 0 \u0026amp;\u0026amp; is_invulnerable \u0026amp;\u0026amp; is_showing_sketch_frame) putimage_alpha(camera, (int)position.x, (int)position.y, \u0026amp;img_sketch); else current_animation-\u0026gt;on_draw(camera, (int)position.x, (int)position.y); // ...... } 最后，在 Player 类中添加触发无敌状态的逻辑入口：\n添加一个让玩家进入无敌状态的方法：\n1 2 3 4 5 6 7 8 9 // Player.h void make_invulnerable() { is_invulnerable = true; timer_invulnerable.restart(); is_showing_sketch_frame = true; // 立即进入“显示剪影”的半帧 timer_invulnerable_blink.restart(); // 开始闪烁 } 然后在 move_and collide 方法的子弹碰撞部分，在子弹发生碰撞后添加让玩家进入无敌状态的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // Player.h void move_and_collide(int delta) { // ...... // 玩家被子弹射中受到伤害 if(!is_invulnerable) { for (Bullet* bullet : bullet_list) { if (!bullet-\u0026gt;get_valid() || bullet-\u0026gt;get_collide_target() != id) continue; if (bullet-\u0026gt;check_collision(position, size)) { make_invulnerable();\t// 开启角色无敌状态 bullet-\u0026gt;on_collide(); bullet-\u0026gt;set_valid(false); hp -= bullet-\u0026gt;get_damage(); // ...... } } // ...... }\t粒子系统的实现 粒子系统 是一种使用大量微小粒子的图元作为基本元素来描述不规则对象的技术。在很多游戏中，烟雾、火焰、雨雪等效果的实现都是依托在粒子系统上完成的。在分析和解剖粒子系统时，我们可以从两个角度入手：粒子对象 本身和 粒子发射器。\n粒子对象：通常由动画、物理和生命周期等众多属性来描述。\n粒子发射器：决定粒子对象的生成方式。如粒子的发生频率、发射方向和初始速度等。\n我们将尝试封装一个简单可用的粒子系统。粒子对象可以看作是一个特殊的动画对象，它与角色、子弹等动画的区别在于，粒子在发射后，世界坐标的位置就固定下来了，不会随着游戏的更新而移动。在播放完自身的动画后，粒子的寿命便终止了，就可以从场景中被移除掉了。\n完整的粒子类代码是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class Particle { public: Particle() = default; Particle(const Vector2\u0026amp; position, Atlas* atlas, int lifespan) : position(position), atlas(atlas), lifespan(lifespan) { } ~Particle() = default; void on_update(int delta) { timer += delta; if (timer \u0026gt;= lifespan) { timer = 0; idx_frame++; if (idx_frame \u0026gt;= atlas-\u0026gt;get_size()) { idx_frame = atlas-\u0026gt;get_size() - 1; valid = false; } } } void on_draw(const Camera\u0026amp; camera) const { putimage_alpha(camera, (int)position.x, (int)position.y, atlas-\u0026gt;get_image(idx_frame)); } void set_atlas(Atlas* new_atlas) { atlas = new_atlas; } void set_position(const Vector2\u0026amp; new_position) { position = new_position; } void set_lifespan(int ms) { lifespan = ms; } bool check_valid() const { return valid; } private: int timer = 0;\t// 粒子动画播放定时器 int lifespan = 0;\t// 单帧粒子动画持续时间 int idx_frame = 0;\t// 当前正在播放的动画帧 Vector2 position;\t// 粒子的世界坐标 bool valid = true;\t// 粒子对象是否有效 Atlas* atlas = nullptr;\t// 粒子动画所使用的图集 }; 代码总体回顾及源码 Scene 基类 在这个项目中首次引入了场景设计的概念。游戏的不同阶段和不同界面对应到不同的场景中。在场景基类 Scene.h 中，on_enter 和 on_exit 方法分别对应着场景的初始化逻辑和退出逻辑。on_input、on_update和 on_draw 分别对应主循环的输入、更新和绘图三个阶段并传入了各自所需的参数。具体的场景子类只需要继承后重写自己的逻辑即可。而场景管理器的设计则用来控制游戏当前正在运行的场景。我们在跳转场景时使用了枚举来屏蔽具体的场景指针，而场景管理器同样有 on_input、on_update和 on_draw 三个方法来调用当前场景实例的对应逻辑 。\nmain 函数 在 main.cpp 中，主要实现了两部分功能：资源加载 和 游戏入口函数。首先加载游戏所需的像素字体，随后加载游戏中动画的图片资源并对需要进行左右朝向翻转的素材进行了处理，最后再载入游戏的背景音乐和音效。在进程的入口函数中，我们调用资源加载函数并实例化此场景，最后在游戏的主循环中调用场景管理器的各个阶段逻辑入口方法。\nAtlas 图集类 在游戏的动画实现上，首先封装了Atlas 图集类。图集更像是容器的概念，用来批量加载和存储一套动画所需的图片素材。而 Animation 动画类则更像是一个只记录动画当前播放进度的轻量管理器。在渲染时具体绘制哪张图片则需要实时地去对应的图集类中获取。除此之外，Animation类 还记录着帧间隔、循环播放和播放结束逻辑等动画数据。\nCamera 摄像机类 在动画渲染时，使用自行封装的 Camera 摄像机对象。摄像机在此项目的设计中只是充当了绘图时的相对定位锚点，当这个定位点的位置在一定范围内随机跳跃时，我们绘图的内容也在快速地抖动，这就实现了摄像机震动的效果。为了更简洁地编写使用摄像机进行绘图的代码，在 Util.h 中实现了使用摄像机进行透明贴图绘制的函数重载，以及翻转图片和生成纯白剪影效果的图像处理代码逻辑。\nTimer 定时器类 和 Vector2 二维向量类 除此之外，游戏框架基础架构还有两个很关键的封装：定时器类和二维向量类。在 Timer.h 中封装了定时器的逻辑：定时器是一个在游戏中记录时间流逝的对象，当时间到达预设的时间的那一帧便会调用指定的回调函数逻辑。二维向量类则封装着和2D向量有关的数学运算：除去四则运算的重载外，还有获取向量长度以及标准化向量的方法。\n场景子类：MenuScene、SelectorScene和GameScene 游戏启动后首先来到菜单场景。菜单场景十分简单，只需要播放音乐并处理跳转逻辑即可。而在随后的角色选择场景，我们使用了大量代码来实现硬编码的界面元素布局、在绘图时需要根据玩家选择的不同角色枚举值绘制不同的角色对象和动态的背景图、在输入时也是根据玩家1和玩家2的不同键位的键码值将角色的枚举值循环切换。而在角色选择界面退出时，我们根据当前两位玩家的枚举值来实例化不同的角色并设置头像和玩家ID。玩家ID也是使用枚举进行记录的，我们在 PlayerID.h 中进行了定义。\n在游戏的局内场景中，我们需要处理的逻辑可以分为三部分：\n与游戏世界相关的内容，如背景图和平台\n与玩家角色相关的内容，如角色本身和飞行在场景中的子弹\n与游戏胜负相关的内容，如实时监测角色的位置和生命值，并在游戏结束时渲染结算条幅\n调试模式的开启与关闭也是在游戏场景中进行控制的。\nPlayer 玩家基类 在玩家角色的设计中，我们定义了Player基类来描述共有的逻辑。在画面表现上，玩家角色拥有闲置、奔跑、攻击、死亡等不同的动画效果，以及起跳、落地和奔跑时的粒子特效等内容。在数据逻辑上，玩家的普通攻击和特殊攻击分别由冷却时间定时器和能量值进行控制。奔跑、起跳和落地等逻辑也封装成对应的方法，方便触发时在其中修改角色速度和更新特效动画。除此之外，玩家角色在受伤后会有一小段无敌时间并产生闪烁的画面效果，我们同样使用定时器来进行控制。\n与物理模拟相关的逻辑封装到了 move_and_collide 方法中：我们根据重力和当前的速度值更新了玩家的位置 ，并进行了平台和子弹的碰撞检测。\nPeashooter 子类 和 Sunflower 子类 有了Player基类的基础，豌豆射手的子类实现就简单很多了，只需要配置其动画属性并设置攻击时角色在场景中生成子弹的逻辑。我们还用了随机音效来优化游戏效果。\n向日葵子类的实现也是同理：在配置完成动画属性后，重写其普通攻击和特殊攻击的逻辑。只不过向日葵在特殊攻击时头顶会有额外的“日”字动画，所以我们重写了它的渲染方法。\nBullet 子弹基类 对于玩家角色所发射的子弹同样定义了Bullet基类进行抽象。子弹与玩家一样，需要在游戏场景中连贯运动，还需要模拟受重力影响的抛射，所以我们还是优先描述其速度，并在更新时记录其位置。 除此之外，子弹还要有伤害值、碰撞目标和碰撞回调等字段。\nPeaBullet 子类 和 SunBullet 子类、SunBulletEx 子类 在豌豆子弹的实现中，我们重写了破碎的方法，播放了随机的音效，并在渲染时根据当前是否已经破碎选择了不同的渲染逻辑。小型热光炸弹也是相似的思路，只不过我们需要在它未碰到爆炸时模拟受重力影响的坠落运动，并在爆炸时调整爆炸动画的中心位置对齐。大型热光炸弹与小型热光炸弹除去尺寸、动画等数值字段不同外，更新时的区别是需要让它匀速竖直下落而不是在重力影响下加速运动。\nParticle 粒子类 粒子对象在目前的设计中可以看作是一种特殊的动画对象，它在自身的动画播放结束后生命周期便结束了。所以在更新时的逻辑与动画对象十分相似。\nPlatform 平台类 平台对象Platform在数据层面本质是一条存在于世界中的水平直线，在渲染时我们使用平台图片素材进行绘制并根据当前是否启用了调试选择绘制额外的信息。\nStatusBar 玩家状态类 玩家的状态栏组件有三部分构成：玩家头像、生命值状态条和能量值状态条。在游戏场景运行的过程中，我们实时地从对应的玩家对象中读取这些字段的数据并显示到界面组件上。\n至此，这一项目的笔记全部完结。\n完整源码 on GitHub\n复盘和总结 这是我第一次学习一个完整的游戏项目是如何自顶而下设计的。一开始的框架部分感觉很难想到，也因为缺少像游戏层这样可以频繁而又直观快捷地进行测试而感到没有把握。但是一旦基础的框架搭建完成，后面的游戏层实现就变成了水到渠成的事情，有一种顺风顺水的畅快感。即使有了前面 提瓦特幸存者 项目的基础，这个项目还是充斥着大量的实现细节，稍不留神就会出现意想不到的bug，有一些实现思路如果让我自己来想的话也很难想到或者很容易踩坑，好在老师讲解清晰、代码简明易懂，让人很好理解。这个项目再次让我深深意识到自己目前在编程的认知阶段：懂了一点后发现，自己不懂的和不足的还有很多很多。所以需要持续保持锤炼和学习。\n","date":"2025-10-12T09:17:30+02:00","image":"https://nullshowjl.github.io/en/p/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84c-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E6%A4%8D%E7%89%A9%E6%98%8E%E6%98%9F%E5%A4%A7%E4%B9%B1%E6%96%97%E4%B9%8Bgameplay%E5%B1%82%E5%AE%9E%E7%8E%B0/cover_hu_99b3491f26bc8327.webp","permalink":"https://nullshowjl.github.io/en/p/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84c-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E6%A4%8D%E7%89%A9%E6%98%8E%E6%98%9F%E5%A4%A7%E4%B9%B1%E6%96%97%E4%B9%8Bgameplay%E5%B1%82%E5%AE%9E%E7%8E%B0/","title":"【从零开始的C++游戏开发】植物明星大乱斗之Gameplay层实现"},{"content":"目录\nOverview [Core Gameplay](#Core Gameplay) [Design Approach](#Design Approach) [Development Workflow – Framework](#Development Workflow – Framework) [Key Steps and Solutions – Framework](#Key Steps and Solutions – Framework) This project spans over 2,000 lines of code and covers a wide range of concepts, so I’ve split the write-up into two parts. This first post provides an overview of the entire project, with a focus on the design and implementation of the framework-related components.\nOverview Tech Stack: C++ + EasyX\nProject Goal: The project is organized using multiple header files, with a modular structure that introduces the concept of “scenes” to separate different stages of gameplay and decouple core functionalities. It explores basic physics simulation techniques and implements one-way collision platforms. Popular game development features like the camera, timer, and particle system are encapsulated to enhance the project’s level of polish and professionalism. Additionally, smoother animations and richer sound effects are integrated to improve the overall completeness of the game.\nCourse Source：B站-Voidmatrix\nCore Gameplay Two players can choose different characters for local multiplayer battles. They jump and move between platforms, using a variety of normal and special attacks to damage their opponent and earn energy rewards. Once enough energy is accumulated, players can unleash unique skills. A player is defeated either by falling off the platform or when their health reaches zero.\nDesign Approach Using Multiple Header Files As the project grows in size, keeping all the code in main.cpp quickly becomes unwieldy. It leads to messy namespaces and tangled dependencies, making debugging and maintenance difficult. To manage complexity, this project organizes code by encapsulating different game stages into separate classes, each placed in its own header file.\nCommon Pitfall – Duplicate Includes：\nWhen we use #include to bring in a header file, the compiler performs a literal copy-paste of that file’s contents at the include location. For example, if A.h includes B.h, and main.cpp includes both A.h and B.h, then B.h ends up being included twice. If B.h contains class definitions or other declarations, this can lead to duplicate definitions and compilation errors.\nHow to Avoid This：\nUse the preprocessor directive #pragma once: This tells the compiler to include the contents of a header file only once, no matter how many times it\u0026rsquo;s referenced.\nAlternatively, use include guards with #ifndef: This checks whether a macro (usually based on the filename) has already been defined. If not, it defines the macro and includes the file; otherwise, it skips it.\nExample syntax:\n1 2 3 4 #ifndef _SCENE_H_ #define _SCENE_H_ #endlif // !_SCENE_H_ Both methods are widely used and generally interchangeable in most cases.\nDifferences Between the Two Approaches：\nFeature #ifndef / #define #pragma once Compatibility Supported by all standard C/C++ compilers Supported by most modern compilers, but not standardized Mechanism Uses macro definitions to check for duplicates Compiler internally tracks whether the file has been processed Filename Dependency Independent of file name; relies on macro name Depends on file path; may be affected by hard or symbolic links Conflict Risk Macro names must be unique; naming conflicts may cause issues No naming required; avoids conflicts Compilation Speed Slightly slower (macro parsing required) Faster (direct skip on repeat includes) Designing the Game Framework Creating the window, setting up the main game loop, and stabilizing the frame rate—this structure is essentially a standard pattern in game development frameworks:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 int main() { //========= Initialize data ========== initgraph(1280, 720); bool is_running = true; const int FPS = 60; ExMessage msg; BeginBatchDraw(); while (is_running)\t// Main game loop { DWORD start_time = GetTickCount(); //========= Handle input ========= while (peekmessage(\u0026amp;msg)) { }\t//======== Handle update ========= cleardevice(); //======== Handle rendering ========= FlushBatchDraw(); //========= Stabilize frame rate ========= DWORD end_time = GetTickCount(); DWORD delta_time = end_time - start_time; if (delta_time \u0026lt; 1000 / FPS) { Sleep(1000 / FPS - delta_time); } } EndBatchDraw(); return 0; } Object/Class Design This project introduces architectural concepts by analyzing core functionalities and designing a well-structured program layout. The goal is to improve scalability and make debugging during development more manageable.\nBase Scene Class Menu Scene Class Selector Scene Class Game Scene Class Scene Manager Class Atlas Class Animation Class Vector2 Class Camera Class Timer Class Platform Class Base Player Class Peashooter Class Sunflower Class Player ID Enumeration Class Base Bullet Class Pea Bullet Class Sun Bullet Class Sun Bullet Ex Class Status Bar Class Particle Class Development Workflow – Framework Game Framework Design Scene System Architecture Solution: Use inheritance, with each game stage implemented as a subclass of the base Scene class, allowing for more flexible scene management. Challenge: How to switch between scenes? Solution: Introduce a Scene Manager to handle transitions. Resource Loading Challenge 1： How to manage animations efficiently and enable resource reuse? Solution: Implement Atlas and Animation classes. Challenge 2: How to trigger death animations when an enemy is defeated? Solution: Use callback functions to handle animation logic. Improving Visual Flexibility Solution: Implement a Camera class to control the viewport. Challenge 1: How to track camera position more precisely? Solution: Avoid using EasyX’s built-in POINT class (which uses integers); instead, create a custom Vector2 class with floating-point coordinates. Challenge 2: How to express impact effects visually? Solution: Add camera shake effects for hit feedback. Timer Usage Across Gameplay Challenge: Beyond animations and camera shake, many features (e.g. special skills, attack cooldowns) require timing control. Solution: Encapsulate a reusable Timer class to provide unified management for time-sensitive features. Key Steps and Solutions – Framework Scene System Design If we think of a scene as a stage in a play, then each scene has its own “script” logic and a unique cast of characters. These characters are what game developers commonly refer to as GameObjects—players, enemies, bullets, items, and so on. Conceptually, they all fall under the GameObject category, each performing different logic under the direction of the scene’s script.\nFrom a programming perspective, a game can be divided into several stages: the main menu, the character selection screen, and the in-game scene. Based on this, we define a base Scene class. The main menu, character selection, and gameplay scenes can each inherit from this base class to implement their own event handling and rendering logic.\nBase Scene Class All member functions are defined as virtual, allowing each specific scene class to override them with its own logic. The Scene base class serves as a template for all concrete scene subclasses.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Scene { public: Scene() = default; ~Scene() = default; virtual void on_enter() {}; // Enter the scene virtual void on_update(int delta) {};\t// Handle updates virtual void on_draw() {};\t// Handle rendering virtual void on_input(const ExMessage\u0026amp; msg) {};\t// Handle player input virtual void on_exit() {}; // Exit the scene private: }; MenuScene Class (Main Menu Scene) You can override the necessary member functions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class MenuScene : public Scene { public: MenuScene() = default; ~MenuScene() = default; // Override required virtual functions from the base Scene class void on_enter() { cout \u0026lt;\u0026lt; \u0026#34;Entered Main Menu\u0026#34; \u0026lt;\u0026lt; endl; } void on_update(int delta) { cout \u0026lt;\u0026lt; \u0026#34;Main Menu is running......\u0026#34; \u0026lt;\u0026lt; endl; } void on_draw() { outtxtxy(10, 10, _T(\u0026#34;Drawing Main Menu content\u0026#34;))； } void on_input(const ExMessage\u0026amp; msg) { // Handle input if needed } void on_exit() { cout \u0026lt;\u0026lt; \u0026#34;Exiting Main Menu\u0026#34; \u0026lt;\u0026lt; endl; } private: }; Instantiating in main.cpp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 int main() { initgraph(1280, 720, EW_SHOWCONSOLE);\t// Keep the console window visible BeginBatchDraw(); Scene* scene = new MenuScene();\t// Instantiate before entering the main loop while (running) { DWORD frame_start_time = GetTickCount(); while (peekmessage(\u0026amp;msg)) { scene-\u0026gt;on_input(msg); // Handle input } // Update game logic scene-\u0026gt;on_update(); cleardevice(); // Render game screen scene-\u0026gt;on_draw(); FlushBatchDraw(); DWORD frame_end_time = GetTickCount(); DWORD frame_delta_time = frame_end_time - frame_start_time; if (frame_delta_time \u0026lt; 1000 / FPS) { Sleep(1000 / FPS - frame_delta_time); } } EndBatchDraw(); return 0; } All scene subclasses follow the same design pattern.\nImplementing the Scene Manager A game program is essentially a massive loop—and also a massive state machine. Each game scene represents a distinct state, and the system that manages these states is commonly referred to in game development as the Scene Manager.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class SceneManager { public: enum class SceneType\t// Marks the current scene state { Menu, Game, Selector }; public: SceneManager() = default; ~SceneManager() = default; // Set the current scene void set_current_scene(Scene* scene) { current_scene = scene; current_scene-\u0026gt;on_enter();\t// Ensure the scene lifecycle is properly triggered } // Switch scenes (exit the current scene, then select and enter the new one) void switch_to(SceneType type) { current_scene-\u0026gt;on_exit();\t// Exit the current scene switch (type) { case SceneType::Menu: current_scene = menu_scene; break; case SceneType::Game: current_scene = game_scene; break; case SceneType::Selector: current_scene = selector_scene; break; default: break; } current_scene-\u0026gt;on_enter();\t// Enter the newly selected scene } void on_update(int delta) { current_scene-\u0026gt;on_update(delta); } void on_draw() { current_scene-\u0026gt;on_draw(); } void on_input(const ExMessage\u0026amp; msg) { current_scene-\u0026gt;on_input(msg); } private: Scene* current_scene = nullptr; }; The on_enter and on_exit methods serve similar purposes to constructors and destructors—they’re used to initialize and release resources. So why not just use constructors and destructors directly?\nThe reason is that constructors and destructors control the memory lifecycle of scene objects. If we rely on them to handle all enter/exit logic, we’d need to constantly create and destroy scene objects during transitions, which is not performance-friendly. As game logic grows more complex, some resources may be shared across scenes. In other words, objects within a scene may need to outlive the scene itself, which introduces additional memory management challenges.\nThis design offers a cleaner and more flexible approach: scene objects live as long as the game itself. All scenes are created during game initialization and destroyed when the game exits. During runtime, we avoid calling constructors and destructors for scene transitions, and instead use clearly defined on_enter and on_exit methods. These methods should avoid creating or destroying internal members—instead, they reset internal state.\nExample: Suppose the game scene contains a player object. When the player’s health reaches zero, the game transitions to the main menu. If we use constructors/destructors, we’d need to delete the game scene and new the menu scene. Then, when returning to the game scene, we’d have to recreate everything just to reset the player’s health.\nWith on_enter and on_exit, we avoid this overhead. Instead, we simply reset the player’s health variable when re-entering the game scene—achieving the same “fresh start” effect without costly object reconstruction.\nWhy use a pointer for setting the current scene, but an enum for switching scenes?\nThis design choice reflects usage context:\nset_current_scene is typically called during game initialization, when scenes are being instantiated—so passing a pointer is straightforward. switch_to is usually called during runtime from within scene logic. If scenes hold references to each other, passing pointers directly can lead to memory issues. Using an enum abstracts away internal pointer management and keeps transitions safe and clean. With this setup, the scene-related logic in main can be fully delegated to the Scene Manager:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 menu_scene = new MenuScene(); game_scene = new GameScene(); selector_scene = new SelectorScene(); scene_manager.set_current_scene(menu_scene); BeginBatchDraw(); while (running) { DWORD frame_start_time = GetTickCount(); while (peekmessage(\u0026amp;msg)) { scene_manager.on_input(msg); } scene_manager.on_update(); cleardevice(); scene_manager.on_draw(main_camera); FlushBatchDraw(); Scene transitions are handled within each scene’s on_input method.\n1 2 3 4 5 6 7 8 // MenuScene.h void on_input(const ExMessage\u0026amp; msg) { if (msg.message == WM_KEYUP) { scene_manager.switch_to(SceneManager::SceneType::Selector); } } Resource Loading Design Implementing the Atlas Class The Atlas class serves as a container for a series of related image resources:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Atlas { public: Atlas() = default; ~Atlas() = default; void load_from_file(LPCTSTR path_template, int num) { // Important: Clear the image list before loading // and resize it to the expected number of frames. // This prevents mismatches when load_from_file is called multiple times. img_list.clear();\timg_list.resize(num); TCHAR path_file[256]; for (int i = 0; i \u0026lt; num; i++) { _stprintf_s(path_file, path_template, i + 1); loadimage(\u0026amp;img_list[i], path_file); } } void clear()\t// Clear all loaded images in the atlas { img_list.clear(); } size_t get_size()\t// Get the number of images in the atlas { return img_list.size(); } IMAGE* get_image(int idx)\t// Retrieve a specific animation frame { if (idx \u0026lt; 0 || idx \u0026gt;= img_list.size()) return nullptr; return \u0026amp;img_list[idx];\t// Return the address of the image at the given index } // Add an existing image to the atlas // This may seem redundant with file loading, // but it\u0026#39;s useful for generating horizontally flipped atlases void add_image(const IMAGE\u0026amp; img)\t{ img_list.push_back(img); } private: vector\u0026lt;IMAGE\u0026gt; img_list; }; Resource Loading Strategy Before implementing the Animation class, we need a way to horizontally flip animation frames. This avoids the need for duplicate assets. Since pixel-level flipping is computationally expensive, it should be done during game initialization, not during frame updates.\nThis flipping function is a utility and should be placed in util.h for easy access across the project. A detailed explanation is available in another post: Teyvat Survivor.\nIn main.cpp, we define flip_atlas as a global function so it can be called before the main loop:\n1 2 3 4 5 6 7 8 9 10 11 12 // main.cpp void flip_atlas(Atlas\u0026amp; src, Atlas\u0026amp; dst) { dst.clear(); // Prevent issues from reusing the same container for (int i = 0; i \u0026lt; src.get_size(); i++) { IMAGE img_flipped; flip_image(src.get_image(i), \u0026amp;img_flipped); dst.add_image(img_flipped); } } For now, all resources are loaded via a global function in main.cpp. It’s important to use meaningful and consistent naming for assets. A recommended format is type_character_direction, such as Atlas atlas_peashooter_idle_left;. While verbose, this naming convention improves editor searchability and debugging efficiency.\nThe resource loading logic includes three parts:\nLoading game fonts Loading and processing image assets Loading sound effects Sound effects are handled using mciSendString, so don’t forget to include the appropriate library.\nImplementing the Animation Class The Animation class acts as a lightweight controller for rendering atlases. It builds on top of the Atlas class and is designed around two components:\nMember variables: define the data structure Member functions: provide external interfaces for querying and modifying state Since frame progression is automatic during playback, there’s no need for external set methods. Instead, only get_idx_frame and get_frame are exposed for frame access.\nThe two most important methods—on_update and on_draw—are explained in detail in the Teyvat Survivor article.\nHow should we handle disappearing animations for objects like enemies or bullets when their lifecycle ends?\nWe shouldn’t delete the Enemy object immediately upon death. Instead, we delay deletion until the death animation finishes. This requires the animation system to signal when playback is complete.\nA common solution: use callback functions.\n回调函数 回调函数就是一个使用参数传递的函数对象，我们可以把它保存起来，然后再合适的时候调用它。这样就可以让函数内部的逻辑在这个“合适的时候”才被执行。比如，处理敌人死亡的情景为例，我们可以把删除敌人的逻辑定义为函数，以回调函数的形式保存在动画对象内部。当死亡动画播放结束后，这个函数被调用，删除敌人的逻辑被执行，这样就达成了我们的目的。记得先在开始处包含头文件 #include \u0026lt;functional\u0026gt;，具体的实现可以这样写：\nCallback Functions A callback is a function object passed as a parameter and stored for later execution. This allows logic to be triggered at the “right moment.”\nFor example, when an enemy dies, we define the deletion logic as a function and store it in the animation object. Once the death animation finishes, the callback is invoked to remove the enemy.\nBe sure to write #include \u0026lt;functional\u0026gt; at the top. Here’s a sample implementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Animation { public: ...... void on_update(int delta) { timer += delta; if (timer \u0026gt; interval) { timer = 0; idx_frame++; if (idx_frame \u0026gt;= atlas-\u0026gt;get_size()) { idx_frame = is_loop ? 0 : atlas-\u0026gt;get_size() - 1; if (!is_loop \u0026amp;\u0026amp; callback) // If animation is non-looping and callback exists, invoke it { callback(); } } } } void set_callback(function\u0026lt;void()\u0026gt; callback) { this-\u0026gt;callback = callback; } private: ...... function\u0026lt;void()\u0026gt; callback; // Callback to trigger object removal after animation finishes }; Here’s the full implementation of the Animation class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class Animation { public: Animation() = default; ~Animation() = default; void reset() { timer = 0; idx_frame = 0; } void set_atlas(Atlas* new_atlas) { reset(); atlas = new_atlas; } void set_loop(bool flag) { is_loop = flag; } void set_interval(int ms) { interval = ms; } int get_idx_frame() { return idx_frame; } IMAGE* get_frame() { return atlas-\u0026gt;get_image(idx_frame); } bool check_finished() { if (is_loop) return false; return (idx_frame == atlas-\u0026gt;get_size() - 1); } void on_update(int delta) { timer += delta; if (timer \u0026gt; interval) { timer = 0; idx_frame++; if (idx_frame \u0026gt;= atlas-\u0026gt;get_size()) { idx_frame = is_loop ? 0 : atlas-\u0026gt;get_size() - 1; if (!is_loop \u0026amp;\u0026amp; callback) // If animation is non-looping and callback exists, invoke it { callback(); } } } } void on_draw(const Camera\u0026amp; camera, int x, int y) const { putimage_alpha(camera, x, y, atlas-\u0026gt;get_image(idx_frame)); } void set_callback(function\u0026lt;void()\u0026gt; callback) { this-\u0026gt;callback = callback; } private: Atlas* atlas = nullptr; bool is_loop = true; // Whether the animation loops int timer = 0;\t// Frame timer int interval = 0;\t// Frame interval in milliseconds int idx_frame = 0;\t// Current frame index function\u0026lt;void()\u0026gt; callback; // Callback to trigger object removal after animation finishes }; Camera System Design Window Coordinates vs. World Coordinates In EasyX, the origin of the window coordinate system is at the top-left corner of the screen:\nEasyX Window Coordinates In contrast, the world coordinate system represents a much larger virtual space. Think of it as the entire game world where all objects—players, enemies, bullets, items—are placed and interact. Player movement, collisions, triggers, and all game logic operate within this world space. Only when rendering the game do we need to convert world coordinates into window coordinates.\nThe camera acts as a bridge between these two systems. This aligns with the game development principle of separating data from rendering.\n那么，在不考虑画面缩放的情况下，也就是摄像机的宽高和窗口的宽高一致时，我们就可以将摄像机看作是整个世界中的一个点，当我们需要实现摄像机跟随玩家移动的横板卷轴游戏时，只需要让摄像机跟随玩家移动，也就是这个点的坐标和玩家坐标保持一致。在渲染游戏内其他内容时，我们只需要把场景中其他物体的世界坐标与这个摄像机位点的世界坐标作差，得出的坐标就是我们传递给绘图函数的窗口坐标。注意，这是一个非常重要的概念：窗口坐标 = 世界坐标 - 摄像机坐标。\nWhen we ignore zooming (i.e., the camera’s width and height match the window’s), we can treat the camera as a single point in the world. In a side-scrolling game, for example, the camera simply follows the player’s position. To render other objects, we subtract the camera’s world position from each object’s world position to get their window coordinates.\nKey concept:\nWindow Coordinate = World Coordinate - Camera Coordinate\nImplementing the Vector2 Class To allow precise control of the camera’s position using floating-point values, we define a commonly used 2D vector class. Operator overloading makes it easier to perform arithmetic operations similar to built-in types:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Vector2 { public: Vector2() = default; ~Vector2() = default; Vector2(float x, float y) // Constructor for direct initialization : x(x),y(y){ } //======== Operator Overloads ======== // Enables intuitive vector arithmetic Vector2 operator+(const Vector2\u0026amp; vec) const { return Vector2(x + vec.x, y + vec.y); } void operator+=(const Vector2\u0026amp; vec) { x += vec.x, y += vec.y; } Vector2 operator-(const Vector2\u0026amp; vec) const { return Vector2(x - vec.x, y - vec.y); } void operator-=(const Vector2\u0026amp; vec) { x -= vec.x, y -= vec.y; } Vector2 operator*(const Vector2\u0026amp; vec) const { return Vector2(x * vec.x, y * vec.y); } Vector2 operator*(float val) const { return Vector2(x * val, y * val); } void operator*=(float val) { x *= val, y *= val; } float length() { return sqrt(x * x + y * y); } Vector2 normalize() { float len = length(); if (len == 0) { return Vector2(0, 0); } return Vector2(x / len, y / len); } public: float x = 0.0f; float y = 0.0f; }; Implementing the Camera Class Camera Shake Effect This is a common visual effect in games. When firing a weapon or triggering an explosion, the screen shakes briefly to convey impact. It’s simple to implement but highly effective.\nImplementation Strategy Since the shake only lasts for a short time, we need a way to start and stop it. Like animations, this is best handled with a timer.\nImplementing a General-Purpose Timer There are two main design approaches:\nInheritance-based Callback-based Inheritance Approach\nDefine a base Timer class with an on_update method. Subclasses override the callback method to define custom behavior:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Timer { public: Timer() = default; ~Timer() = default; void on_update(int delta) { // ...... callback(); } protected: virtual void callback() { // Timer logic } }； To use it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class MyTimer : public Timer { public: MyTimer() = default; ~MyTimer() = default; protected: void callback() override { // Custom timer logic } }； Timer* my_timer = new MyTimer(); Callback Approach\nSimilar to the Animation class, we store a function and invoke it when the timer completes:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Timer { public: Timer() = default; ~Timer() = default; void on_update(int delta) { // ...... callback(); } void set_callback(function\u0026lt;void()\u0026gt; callback) { this-\u0026gt;callback = callback; } protected: function\u0026lt;void()\u0026gt; callback; } Usage:\n1 2 3 4 5 Timer my_timer; mu_timer.set_back([]() { // Custom timer logic })； Comparison\nThe callback-based approach is more concise and flexible. If you need multiple timers with different behaviors, inheritance requires creating multiple subclasses. With callbacks, you just write a lambda function.\nFor general-purpose timers that only differ in behavior—not data—it’s better to use callbacks. This reduces boilerplate and improves clarity.\nFull Timer Class Implementation\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // General-purpose timer class // Uses callbacks to define behavior on timeout class Timer { public: Timer() = default; ~Timer() = default; void restart() // Reset the timer { pass_time = 0; shotted = false; } void set_wait_time(int val) { wait_time = val; } void set_one_shot(bool flag) { one_shot = flag; } void set_callback(function\u0026lt;void()\u0026gt; callback) { this-\u0026gt;callback = callback; } void pause() { paused = true; } void resume() { paused = false; } void on_update(int delta) { if (paused) return; pass_time += delta; if (pass_time \u0026gt;= wait_time) { if (!one_shot || (one_shot \u0026amp;\u0026amp; !shotted) \u0026amp;\u0026amp; callback) callback(); shotted = true; pass_time = 0; } } private: int pass_time = 0;\t// Elapsed time int wait_time = 0;\t// Wait duration bool paused = false;\t// Pause flag bool shotted = false;\t// Triggered flag bool one_shot = false;\t// One-time trigger function\u0026lt;void()\u0026gt; callback;\t// Callback function }; Camera Class with Integrated Timer Design Approach for Camera Shake Effect\nTo make the entire screen appear to shake, we simply need to shake the camera’s position. In other words, the shake effect is achieved by rapidly changing the coordinates of the Camera object.\nA straightforward approach is to randomly reposition the camera within a circle whose radius equals the shake intensity. Since frame updates happen frequently, this randomness creates a convincing shake effect at runtime.\nFor smoother and more natural motion—especially with stronger shake effects—noise algorithms like Perlin noise can be used instead of pure randomness. However, for the subtle shake used in this project, the visual improvement is minimal, so we stick with the simpler random-based implementation.\nFull Camera Class Implementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 class Camera { public: Camera() { timer_shake.set_one_shot(true); timer_shake.set_callback([\u0026amp;]() { is_shaking = false; reset(); } ); } ~Camera() = default; const Vector2\u0026amp; get_position() const // First const: returns a read-only reference; second const: ensures this method doesn\u0026#39;t modify the object { return position; } void reset() // Reset camera position to origin { position.x = 0; position.y = 0; } void on_update(int delta) { timer_shake.on_update(delta); if (is_shaking) { position.x = (-50 + rand() % 101) / 50.0f * shaking_strength; position.y = (-50 + rand() % 101) / 50.0f * shaking_strength; } } // Start camera shake effect // Parameters: strength = shake intensity, duration = shake duration in milliseconds void shake(float strength, int duration) void shake(float strength, int duration) { is_shaking = true; shaking_strength = strength; timer_shake.set_wait_time(duration); timer_shake.restart(); } private: Vector2 position;\t// Camera position // Shake effect implementation Timer timer_shake;\t// Timer controlling shake duration bool is_shaking = false; float shaking_strength = 0; // Shake intensity }; In the on_update method, the camera’s position is randomly set within a circle defined by the shake intensity. The random coefficient before shaking_strength represents a value in the range of -1.0 to 1.0, simulating a unit circle.\nWith this, the core game framework is complete. For the second half of this project, covering gameplay implementation, continue reading the companion article:《Plant Star Brawl - Gameplay Layer》。\n","date":"2025-10-11T09:47:30+02:00","image":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchplant-star-brawl-framework-design/cover_hu_c58cc6e8b663b67c.webp","permalink":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchplant-star-brawl-framework-design/","title":"【C++ Game Dev from Scratch】Plant Star Brawl - Framework Design"},{"content":"Table of Contents\nOverview Core Gameplay Main Development Process Extras: Animation Effects \u0026amp; Pixel Buffers Full Source Code Reflection and Summary Overview Tech Stack：C++ + EasyX\nProject Goal：Design an animation framework for the game, integrate keyboard input, and create more interactive gameplay. On the data and logic level, implement basic 2D collision detection, random enemy spawning, and enemy tracking behavior. Add music and sound effects to enhance the overall polish. Include a main menu interface. Use the Flyweight pattern to optimize program performance.\nCourse Source：Bilibili-Voidmatrix\nCore Gameplay The player clicks the Start button to enter the game and uses the Arrow Keys (Up, Down, Left, Right) to control character movement. A ring of bullets surrounds the player, while wild boar enemies continuously rush in from off-screen. When a bullet hits an enemy, the enemy is defeated and the player\u0026rsquo;s score increases. If an enemy touches the player, the game ends.\nMain Development Process Design Approach Designing the Core Game Framework Setting up the game window, creating the main loop, and stabilizing the frame rate follow a standard structure commonly used in game development. Since these steps are explained in detail in Episode 0: Fundamentals of the tutorial series, they won’t be repeated here.Setting up the game window, creating the main loop, and stabilizing the frame rate follow a standard structure commonly used in game development. Since these steps are explained in detail in Episode 0: Fundamentals of the tutorial series, they won’t be repeated here.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 int main() { //========= Initialize data ========== initgraph(1280, 720); bool is_running = true; const int FPS = 60; ExMessage msg; BeginBatchDraw(); while (is_running)\t// Main game loop { DWORD start_time = GetTickCount(); //========= Handle input ========= while (peekmessage(\u0026amp;msg)) { }\t//======== Handle update ========= cleardevice(); //======== Handle rendering ========= FlushBatchDraw(); //========= Stabilize frame rate ========= DWORD end_time = GetTickCount(); DWORD delta_time = end_time - start_time; if (delta_time \u0026lt; 1000 / FPS) { Sleep(1000 / FPS - delta_time); } } EndBatchDraw(); return 0; } Object and Class Design This project does not use polymorphism to abstract higher-level objects. Instead, each game element is implemented as a separate class, following a one-object-per-class approach. To make the structure intuitive for beginners, all code is written in main.cpp, using many global variables.\nPlayer class Bullet class (bullets orbiting the player Enemy class Animation and Atlas classes (for animation effects and optimization) Button base class StartGameButton ExitGameButton Development Workflow Game Framework Setup Image Loading and Rendering Solution: Use EasyX functions loadimage and putimage Issue: PNG images show black edges Solution: Override putimage with a version that supports transparency Note: Include the library #pragma comment(lib, \u0026quot;MSIMG32.LIB\u0026quot;) Animation Implementation Challenge1: How to animate images? Solution: Use a counter → optimize with a timer Challenge2: Repetitive animation code Solution: Encapsulate logic in an Animation class Player Movement Issue 1: Movement feels choppy Solution: Use boolean flags to track key press/release and control movement indirectly Issue 2: Diagonal movement is faster than horizontal/vertical Solution: Normalize movement vectors to ensure consistent speed Animation Data Mixing Issue Issue: Enemy and player data get mixed in the Animation class Solution: Use object-oriented design to separate logic and data into distinct classes Implementing Player, Bullet, and Enemy Classes Enemy Behavior Challenge 1: Enemy spawn logic Solution: Randomly spawn enemies along one edge of the screen Note: When passing other class objects into functions, use references. If the object won’t be modified, add const. Challenge 2: Enemy auto-tracking logic Solution: Calculate the unit vector from enemy to player and move in that direction 2D Collision Detection Challenge 1: Bullet vs. Enemy Solution: Treat enemies as rectangles and bullets as points Challenge 2: Player vs. Enemy Solution: Use the enemy’s center point for collision detection against the player’s rectangle Bullet Updates and Visual Effects Challenge: Make bullet movement more dynamic Solution: Add tangential and radial velocity components Removing Defeated Enemies Solution: Use swap to move the enemy to the end of the vector, then pop_back and delete to free memory. This is efficient when element order doesn’t matter. Displaying Player Score Adding Sound Effects Solution: Use Windows API function mciSendString Note: Include the library #pragma comment(lib, \u0026quot;Winmm.lib\u0026quot;) Performance Optimization Solution: Use the Flyweight Pattern to optimize resource loading Note: Do not release the shared Atlas inside the Animation class—control it from a higher level Main Menu UI and Button Class Design Key Steps and Implementation Ideas Image Loading and Rendering Loading Images According to the documentation, EasyX provides a function called loadimage to load images. It has several overloads, but here we’ll use the simplest version: loading an image directly from a file.\n1 2 3 4 5 6 7 8 // Load image from file (supports bmp/gif/jpg/png/tif/emf/wmf/ico) int loadimage( IMAGE* pDstImg,\t// Pointer to the IMAGE object that stores the image LPCTSTR pImgFile,\t// File path of the image int nWidth = 0,\t// Optional: stretch width度 int nHeight = 0,\t// Optional: stretch height bool bResize = false\t// Optional: resize IMAGE to fit image size ); A few things to note:\nThe first parameter must be a non-null pointer to an IMAGE object. We load the image into memory first, not directly onto the screen. The second parameter is the file path as a string. The last three parameters are optional and control image scaling. We won’t use them in this project. To load an image named test.jpg from the project directory:\n1 2 IMAGE img; loadimage(\u0026amp;img, _T(\u0026#34;test.jpg\u0026#34;)); Rendering Images To draw the image on screen, EasyX provides the putimage function:\n1 2 3 4 5 6 7 // 绘制图像 void putimage( int dstX,\t// X coordinate on screen int dstY,\t// Y coordinate on screen IMAGE *pSrcImg,\t// Pointer to the IMAGE object to draw DWORD dwRop = SRCCOPY\t// Raster operation code (usually ignored) ); The first two parameters specify the position on screen.\nThe last parameter is a raster operation code, which we’ll ignore for this project.\nTo render the image we just loaded:\n1 2 3 4 5 6 // Load image IMAGE img; loadimage(\u0026amp;img, _T(\u0026#34;test.jpg\u0026#34;)); // Draw image putimage(100, 200, \u0026amp;img); If the image is 300 * 300 pixels, it will appear at position (100, 200) on the game screen like this:\nHandling PNG Transparency PNG images may show black edges when rendered. To fix this, we need to create a custom putimage_alpha function that supports transparency using AlphaBlend.\n1 2 3 4 5 6 7 8 9 #pragma comment(lib, \u0026#34;MSIMG32.LIB\u0026#34;) void putimage_alpha(int x, int y, IMAGE* img) { int w = img-\u0026gt;getwidth(); int h = img-\u0026gt;getheight(); AlphaBlend(GetImageHDC(NULL), x, y, w, h, GetImageHDC(img), 0, 0, w, h, { AC_SRC_OVER,0,255,AC_SRC_ALPHA }); } Make sure to include the required library at the top of your file: #pragma comment(lib, \u0026quot;MSIMG32.LIB\u0026quot;) .\nImplementing Animation and Rendering How to Make the Scene Move? In game development, character animation is typically implemented in two main ways: frame-by-frame animation and keyframe animation.\nFrame-by-frame animation uses a sequence of images. By displaying these images one after another over time, we create the illusion of motion through visual persistence. Keyframe animation, such as skeletal animation, involves more advanced graphics techniques and won’t be covered here. It’s important to note that we should not use the Sleep() function to control animation timing. Calling Sleep() causes the program to pause, which is a blocking operation. In our game framework, rendering and updates should happen continuously within the game loop, with each loop cycle completing within 1/60 of a second (i.e., 60 FPS). Animation frame switching should be spread across multiple frames—not completed in a single loop. This reflects a core principle in game programming: Avoid blocking operations or heavy tasks inside the main loop.\nTo switch animation frames at fixed intervals, we use a timer-based counter:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int idx_current_anim = 0;\t// 1. Index of the current animation frame const int PLAYER_ANIM_NUM = 6;\t// Total number of animation frames int main() { ..... while (is_running) { while (peekmessage(\u0026amp;msg)) { } static int counter = 0;\t// 2. Counts how many game frames have passed // \u0026#39;static\u0026#39; ensures it\u0026#39;s initialized only once // Switch animation frame every 5 game frames if (++counter % 5 == 0) idx_current_anim++; if（idx_current_anim % PLAYER_ANIM_NUM == 0) idx_current_anim = 0; } ...... } Rendering Animation Frames To render animation, we simply draw images from an array in sequence. First, load the frames:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const int PLAYER_ANIM_NUM = 6;\t// Total number of animation frames IMAGE img_player_left[PLAYER_ANIM_NUM]; IMAGE img_player_right[PLAYER_ANIM_NUM]; void load_animation() { for (size_t i = 0; i \u0026lt; PLAYER_ANIM_NUM; i++) { std::wstring path = L\u0026#34;img/player_left_\u0026#34; + std::to_wstring(i) + L\u0026#34;.png\u0026#34;; loadimage(\u0026amp;img_player_left[i], path.c_str()); } for (size_t i = 0; i \u0026lt; PLAYER_ANIM_NUM; i++) { std::wstring path = L\u0026#34;img/player_right_\u0026#34; + std::to_wstring(i) + L\u0026#34;.png\u0026#34;; loadimage(\u0026amp;img_player_right[i], path.c_str()); } } Then, inside the main loop, draw the current frame:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int main() { ...... while (is_running)\t// Main game loop { DWORD start_time = GetTickCount(); //========= Handle Input ========= while (peekmessage(\u0026amp;msg)) { }\t//======== Update ========= cleardevice(); //======== Render ========= putimage_alpha(500, 500, \u0026amp;img_player_left[idx_current_anim]); FlushBatchDraw(); ...... } } This setup ensures smooth animation playback by cycling through frames at a consistent rate.\nEncapsulating Animation into a Class From a data structure perspective, we use a vector\u0026lt;IMAGE*\u0026gt; to store pointers to the images needed for the animation. In the constructor, we load the image resources and allocate memory for each frame. Correspondingly, the destructor is responsible for releasing that memory to avoid leaks.\nWhen playing the animation, we pass not only the position where the animation should be rendered, but also an int delta parameter that represents the time elapsed since the last call to Play(). This replaces the earlier “frame counter” approach with a timer-based system.\nWhy this change? Because animation speed—defined by the frame interval—should depend on actual time, not the game’s frame rate. We want the animation to play at a consistent speed regardless of how fast the game loop runs. Using a time-based timer ensures smoother and more predictable playback than simply incrementing a counter every frame.\nHere’s the implementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Animation { public: Animation(LPCTSTR path, int num, int interval)\t// Load animation frames { interval_ms = interval; TCHAR path_file[256]; for (size_t i = 0; i \u0026lt; num; i++) { _sprintf_s(path_file, path, i); IMAGE* frame = new IMAGE(); loadimage(frame, path_file); frame_list.push_bacl(frame); } } void Play(int x, int y, int delta)\t// Play animation { timer += delta; if (timer \u0026gt;= interval_ms) { idx_frame = (idx_frame + 1) % frame_list.size(); timer =0; } // Render current frame pitimage_alpha(x, y, frame_list[idx_frame]); } ~Animation()\t// Release resources { for (size_t i = 0; i \u0026lt; frame_list.size(); i++) { delete frame_list[i]; } } private: vector\u0026lt;IMAGE*\u0026gt; frame_list;\t// List of animation frames int interval_ms = 0;\t// Time between frames (in milliseconds) int timer = 0; // Time accumulator int idx_frame = 0; // Current frame index } Implementing Player Movement If we control player movement by directly adding displacement to the position when a key is pressed, it can result in a choppy or inconsistent feel. This happens because WM_KEYDOWN messages are generated asynchronously from the main game loop, and their frequency depends on the operating system and hardware. As a result, some frames may process multiple WM_KEYDOWN messages, while others may receive few or none—causing the player to move unevenly across frames and creating a stuttering effect.\nAdditionally, when a directional key is pressed, the first WM_KEYDOWN message enters the event queue immediately. However, continuous WM_KEYDOWN messages only begin after a short delay if the key remains held down. This behavior contributes further to inconsistent movement.\nTo ensure smooth and consistent movement across all frames, we treat movement as a state:\nWhen a key is pressed (WM_KEYDOWN), the player starts moving. When the key is released (WM_KEYUP), the player stops moving. We use four boolean flags to represent movement directions. These flags are updated based on key press and release events, and the player\u0026rsquo;s position is updated accordingly in each frame:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 void ProcessEvent(const ExMessage\u0026amp; msg) { if (msg.message == WM_KEYDOWN) { switch (msg.vkcode) { case VK_UP: is_moving_up = true; break; case VK_DOWN: is_moving_down = true; break; case VK_LEFT: is_moving_left = true; break; case VK_RIGHT: is_moving_right = true; break; } } if (msg.message == WM_KEYUP) { switch (msg.vkcode) { case VK_UP: is_moving_up = false; break; case VK_DOWN: is_moving_down = false; break; case VK_LEFT: is_moving_left = false; break; case VK_RIGHT: is_moving_right = false; break; } }\t} void Move() { if (is_moving_up) position.y -= SPEED; if (is_moving_down) position.y += SPEED; if (is_moving_left) position.x -= SPEED; if (is_moving_right) position.x += SPEED; } To prevent the player from moving faster diagonally than horizontally or vertically, we normalize the movement vector. This ensures consistent speed in all directions:\n1 2 3 4 5 6 7 8 9 10 int dir_x = is_move_right - is_move_left; int dir_y = is_move_down - is_move_up; double len_dir = sqrt(dir_x * dir_x + dir_y + dir_y); if(len_dir != 0) { double normalized_x = dir_x / len_dir; double normalized_y = dir_y / len_dir; player_pos.x += (int)(PLAYER_SPEED * normalized_x); player_pos.y += (int)(PLAYER_SPEED * normalized_y); } Class Encapsulation To prevent data and logic from being scattered across the project, each object’s behavior and data are encapsulated into dedicated classes. For example, the Player class is structured roughly as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Player { public: Player() { // Initialize resources: animation frames, image assets, etc. } ~Player() { // Release resources } void ProcessEvent(const ExMessage\u0026amp; msg) { // Handle player input } void Move() { // Handle player movement } void Draw(int delta) { // Render the player } private: // Internal data members ...... } Enemy Class Implementation Details Random Enemy Spawning 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Define spawn edges enum class SpawnEdge { Up = 0, Down, Left, Right }; // Randomly select one edge SpawnEdge edge = (SpawnEdge)(rand() % 4); // Assign spawn coordinates based on selected edge switch (edge) { case SpawnEdge::Up: position.x = rand() % WINDOW_WIDTH; position.y = -FRAME_HEIGHT; break; case SpawnEdge::Down: position.x = rand() % WINDOW_WIDTH; position.y = WINDOW_HEIGHT; break; case SpawnEdge::Left: position.x = -FRAME_WIDTH; position.y = rand() % WINDOW_HEIGHT; break; case SpawnEdge::Right: position.x = WINDOW_WIDTH; position.y = rand () % WINDOW_HEIGHT; break; default: break; } Enemy Pathfinding Logic Each enemy automatically moves toward the player by calculating the direction vector between their positions and normalizing it. This ensures consistent movement speed regardless of distance:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void Move(const Player\u0026amp; player) { const POINT\u0026amp; player_position = player.GetPosition(); int dir_x = player_position.x - position.x; int dir_y = player_position.y - position.y; double dir_len = sqrt(dir_x * dir_x + dir_y * dir_y); if (dir_len != 0) { double normalized_x = dir_x / dir_len; double normalized_y = dir_y / dir_len; position.x += (int)(normalized_x * SPEED); position.y += (int)(normalized_y * SPEED); } // Update facing direction based on horizontal movement if (dir_x \u0026gt; 0) facing_left = false; else if (dir_x \u0026lt; 0) facing_left = true; } Implementing 2D Collision Detection All collision logic is implemented within the Enemy class. To avoid unnecessary copying, the Player and Bullet objects are passed by reference.\nEnemy vs. Bullet 1 2 3 4 5 6 7 8 bool CheckBulletCollision(const Bullet\u0026amp; bullet) // \u0026#39;const\u0026#39; ensures the bullet won\u0026#39;t be modified { // Treat the bullet as a point and check if it\u0026#39;s inside the enemy\u0026#39;s rectangle bool is_overlap_x = bullet.position.x \u0026gt;= position.x \u0026amp;\u0026amp; bullet.position.x \u0026lt;= position.x + FRAME_WIDTH; bool is_overlap_y = bullet.position.y \u0026gt;= position.y \u0026amp;\u0026amp; bullet.position.y \u0026lt;= position.y + FRAME_HEIGHT; return is_overlap_x \u0026amp;\u0026amp; is_overlap_y; } Enemy vs. Player In most games, collision detection isn\u0026rsquo;t overly strict. If both the enemy and player are treated as rectangles, it’s possible for only a corner to overlap visually without feeling like a real collision—leading to confusion. To improve the experience, hitboxes are often smaller than the actual image size.\nHere, we treat the enemy’s center point as the collision point and check if it overlaps with the player’s rectangle:\n1 2 3 4 5 6 7 8 9 bool CheckPlayerCollision(const Player\u0026amp; player) { // Use the enemy\u0026#39;s center point as the collision point POINT check_position = { position.x + FRAME_WIDTH / 2, position.y + FRAME_HEIGHT / 2 }; bool is_overlap_x = check_position.x \u0026gt;= player.GetPosition().x \u0026amp;\u0026amp; check_position.x \u0026lt;= player.GetPosition().x + player.FRAME_WIDTH; bool is_overlap_y = check_position.y \u0026gt;= player.GetPosition().y \u0026amp;\u0026amp; check_position.y \u0026lt;= player.GetPosition().y + player.FRAME_HEIGHT; return is_overlap_x \u0026amp;\u0026amp; is_overlap_y; } Bullet Updates and Visual Effects The bullets orbiting the player are handled as a group of three and updated using a global function.\nTo create a dynamic visual effect, we animate the bullets by adjusting their angle (α) over time. All angles are calculated in radians for simplicity:\nHere’s the corresponding code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Update bullet positions void UpdateBullets(vector\u0026lt;Bullet\u0026gt;\u0026amp; bullet_list, const Player\u0026amp; player) { // Create a pulsating effect for visual flair const double RADIAL_SPEED = 0.0045; // Speed of radial oscillation const double TANGENT_SPEED = 0.0055; // Speed of tangential rotation double radian_interval = 2 * PI / bullet_list.size(); // Angular spacing between bullets // Update each bullet\u0026#39;s position based on the player\u0026#39;s location POINT player_position = player.GetPosition(); double radius = BULLET_BASE_RADIUS + BULLET_RADIUS_CHANGE_RANGE * sin(GetTickCount() * RADIAL_SPEED); for (size_t i = 0; i \u0026lt; bullet_list.size(); i++) { double radian = GetTickCount() * TANGENT_SPEED + radian_interval * i; bullet_list[i].position.x = player_position.x + player.FRAME_WIDTH / 2 + (int)(radius * sin(radian)); bullet_list[i].position.y = player_position.y + player.FRAME_HEIGHT / 2 + (int)(radius * cos(radian)); } } Removing Defeated Enemies 1 2 3 4 5 6 7 8 9 10 11 12 13 // Iterate through the enemy list and remove defeated enemies for (size_t i = 0; i \u0026lt; enemy_list.size(); i++) // Avoid using iterators since the // container is modified during iteration { Enemy* enemy = enemy_list[i]; if (!enemy-\u0026gt;CheckAlive()) { // Swap with the last element and remove it // * This is an efficient deletion method when element order doesn\u0026#39;t matter swap(enemy_list[i], enemy_list.back()); enemy_list.pop_back(); delete enemy; } } Playing Sound Effects This project uses Windows API functions to play sound. Here’s how to do it:\n1 2 3 4 5 // Open the bgm.mp3 file located in the mus folder and assign it the alias \u0026#34;bgm\u0026#34; mciSendString(_T(\u0026#34;open mus/bgm.mp3 alias bgm\u0026#34;), NULL, 0, NULL);\t// Load sound // Play the sound with alias \u0026#34;bgm\u0026#34; in a loop starting from the beginning mciSendString(_T(\u0026#34;play bgm repeat from 0\u0026#34;), NULL, 0, NULL);\t// Remove \u0026#39;repeat\u0026#39; if looping is not needed\tPerformance Optimization: Using the Flyweight Pattern Game assets like models and textures often consume significant disk space and increase loading time. The Flyweight pattern is commonly used in game development to optimize resource usage.\nHere’s a comparison between a typical implementation and a Flyweight-based one:\n1 2 3 4 5 6 7 //========= Typical Implementation ========= struct Tree { Model model;\t// Tree model Texture texture;// Tree texture int x, y, z;\t// Tree position } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //======= Flyweight Implementation ======= // Shared asset structure // All trees use the same TreeAsset instance for model and texture struct TreeAsset { Model model;\t// Tree model Texture texture;// Tree texture } // Tree instance structure struct Tree { TreeAsset* asset;\t// Pointer to shared asset int x, y, z;\t// Tree position } In this project, we refactor the Animation class to separate shared and instance-specific data. The shared data—std::vector\u0026lt;IMAGE*\u0026gt; frame_list—is stored in an Atlas class, while each enemy instance maintains its own animation state.\nShared image data is managed by the Atlas class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Optimized resource loading class Atlas { public: Atlas(LPCTSTR path, int num) { // Load image frames TCHAR path_file[256]; for (int i = 0; i \u0026lt; num; i++) { _stprintf_s(path_file, path, i); IMAGE* frame = new IMAGE(); loadimage(frame, path_file); frame_list.push_back(frame); } } ~Atlas() { for (int i = 0; i \u0026lt; frame_list.size(); i++) { delete frame_list[i]; } } public: vector\u0026lt;IMAGE*\u0026gt; frame_list; }; Instance-specific animation logic is encapsulated in the Animation class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Animation { public: Animation(Atlas* atlas, int interval) { anim_atlas = atlas; interval_ms = interval; } ~Animation() = default; // The atlas is shared, so we don\u0026#39;t delete it here // It should be released at a higher level (e.g., in main) // Also, we didn\u0026#39;t allocate it with \u0026#39;new\u0026#39; here // Play animation void Play(int x, int y, int delta_time) { timer += delta_time; if (timer \u0026gt;= interval_ms) { idx_frame = (idx_frame + 1) % anim_atlas-\u0026gt;frame_list.size(); timer = 0; } putimage_alpha(x, y, anim_atlas-\u0026gt;frame_list[idx_frame]); } private: int interval_ms = 0;// Frame interval int timer = 0;\t// Animation timer int idx_frame = 0; // Current frame index private: Atlas* anim_atlas; // Pointer to shared atlas }; Button Class Design A button can have three states: Idle, Hovered, and Pushed. Understanding the transitions between these states is key to implementing input logic:\nAccordingly, we need to handle three types of input events: mouse movement, left mouse button press, and left mouse button release.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void ProcessEvent(const ExMessage\u0026amp; msg) { switch (msg.message) { case WM_MOUSEMOVE: if (status == Status::Idle \u0026amp;\u0026amp; CheckCursorHit(msg.x, msg.y)) status = Status::Hovered; else if (status == Status::Idle \u0026amp;\u0026amp; !CheckCursorHit(msg.x, msg.y)) status = Status::Idle; else if (status == Status::Hovered \u0026amp;\u0026amp; !CheckCursorHit(msg.x, msg.y)) status = Status::Idle; break; case WM_LBUTTONDOWN: if (CheckCursorHit(msg.x, msg.y)) status = Status::Pushed; break; case WM_LBUTTONUP: if (status == Status::Pushed) OnClick(); break; default: break; } } Extras: Animation Effects \u0026amp; Pixel Buffers Color Basics An image is made up of pixels, and each pixel’s color is determined by the three primary colors: Red, Green, and Blue—commonly referred to as RGB. These components are mixed at varying intensities to produce different colors. A simple Color structure can be defined as:\n1 2 3 4 5 6 struct Color { int r; int g; int b; }; Essentially, an image is a 2D array of pixels. For example, a ``100*100 image can be represented asColor image[100][100]`. Rendering an image to the window involves copying this smaller array into the larger pixel buffer of the window. The drawing coordinates determine the pixel index.\nIn EasyX, the IMAGE class contains a pointer DWORD* m_pBuffer that points to the image’s pixel buffer. Internally, the pixel data is stored in memory from left to right, top to bottom. To access the color of a pixel at (x, y), you would use:\nIn array form: Color pix_color = image[y][x] In EasyX: DWORD pix_color = buffer[y * width + x] (where width is the image width) You can retrieve the pixel buffer using EasyX’s API: DWORD* buffer = GetImageBuffer(\u0026amp;image). Each DWORD element occupies 4 bytes and stores RGBA data (Red, Green, Blue, Alpha).\nImplementing Image Flip Effects Start by loading the original animation frames for the player facing left. Then define a new array for the flipped (right-facing) frames. Each left-facing image is horizontally flipped to create its right-facing counterpart.\nBefore flipping, we use Resize to allocate memory and set the size of the right-facing IMAGE objects. If an IMAGE object is not created via copy constructor or loadimage, its pixel buffer is uninitialized—so Resize also handles memory allocation.\nNext, we retrieve the pixel buffers of both the left and right images and copy each pixel row by row. The horizontal flip is achieved by reversing the x-axis index: width - 1 - x.\nLoading left-facing animation frames:\n1 2 3 4 5 6 7 8 9 IMAGE img_player_left[6]; // Load player left-facing animation for (int i = 0; i \u0026lt; 6; i++) { static TCHAR img_path[256]; _stprintf_s(img_path, _T(\u0026#34;img/paimon_left_\u0026amp;d.png\u0026#34;), i); loadimage(\u0026amp;img_player_left[i], img_path); } Creating right-facing flipped frames:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 IMAGE img_player_right[6]; for (int i = 0; i \u0026lt; 6; i++) { int width = img_player_left[i].getwidth(); int height = img_player_left[i].getheight(); Resize(\u0026amp;img_player_right[i], width, height);\t// Resize and allocate memory for right-facing image // Flip each row horizontally DWORD* color_buffer_left_img = GetImageBuffer(\u0026amp;img_player_left[i]); DWORD* color_buffer_right_img = GetImageBuffer(\u0026amp;img_player_right[i]); for (int y = 0; y \u0026lt; height; y++) { for (int x = 0; x \u0026lt; width; x++) { int idx_left_img = y * width + x;\t// Source pixel index int idx_right_img = y * width + (width - 1 - x);\t// Target pixel index color_buffer_right_img[idx_right_img] = color_buffer_left_img[idx_left_img]; } } } Extracting RGB Components from Each Pixel EasyX provides three macros—GetGValue, GetRValue, and GetBValue—to extract the individual RGB components from a pixel. However, note that the commonly used COLORREF type (a 32-bit integer representing color) is stored in memory as 0xbbggrr, meaning the red and blue channels are swapped. So when using EasyX macros, you need to reverse the R and B components:\n1 2 3 4 DWORD pix_color = buffer[y * width + x]; BYTE r = GetBValue(pix_color); BYTE g = GetGValue(pix_color); BYTE b = GetRValue(pix_color); Implementing Image Flicker Effect The flicker effect is essentially a switch between the normal animation frames and a set of pure white silhouette frames. These silhouette frames can be dynamically generated by manipulating the pixel buffer.\nTo set a pixel to pure white, you can use the RGB macro to create a COLORREF value, then swap the red and blue channels using BGR, and finally add an alpha channel:\n1 2 3 4 // RGB(255, 255, 255) gives 0x00FFFFFF // Adding full opacity: (BYTE)(255) \u0026lt;\u0026lt; 24 = 0xFF000000 // Combined: 0xFFFFFFFF = fully opaque white DWORD white_pix = BGR(RGB(255, 255, 255)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); To implement the image flicker effect, the basic idea is to first define an array of silhouette animation frames. Then, for each original image frame, use Resize to match its size and allocate memory for the silhouette frame. After that, retrieve the color buffers of both the original and silhouette images. In a nested loop, check the color of each pixel—if the pixel is not already white, set it to pure white：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 IMAGE img_player_left_sketch[6]; // Generate silhouette frames for left-facing animation for (int i = 0; i \u0026lt; 6; i++) { int width = img_player_left[i].getwidth(); int height = img_player_left[i].getheight(); Resize(\u0026amp;img_player_left_sketch[i], width, height);\t// Allocate memory and set size DWORD* color_buffer_raw_img = GetImageBuffer(\u0026amp;img_player_left[i]); DWORD* color_buffer_sketch_img = GetImageBuffer(\u0026amp;img_player_left_sketch[i]); for (int y = 0; y \u0026lt; height; y++) { for (int x = 0; x \u0026lt; width; x++) { int idx = y * width + x; if ((color_buffer_raw_img[idx] \u0026amp; 0xFF000000) \u0026gt;\u0026gt; 24)\t// If pixel is not fully transparent color_buffer_sketch_img[idx] = BGR(RGB(255, 255, 255)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); } } } Implementing Freeze Effect Principle of Alpha Blending EasyX doesn’t automatically handle transparency. When alpha blending is applied, the final pixel color is calculated as: Final Color = Source Color * Alpha + Destination Color * （1 - Alpha）. Here, Alpha is a float between 0 and 1. For example, overlaying a green image on a red background would blend the colors based on this formula:\nImage Overlay Without Alpha Blending Image Overlay With Alpha Blending and the Formula To simulate a freeze effect, overlay a semi-transparent icy image on top of the current animation frame. Implementation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // Copy current frame for processing IMAGE img_current_frame(img_player_left[counter]); int width = img_curent_frame.getwidth(); int height = img_curent_frame.getheight(); DWORD* color_buffer_ice_img = GetImageBuffer(\u0026amp;img_ice); DWORD* color_buffer_frame_img = GetImageBuffer(\u0026amp;img_current_frame); // Traverse the color buffer of the current frame and blend the non-transparent regions for (int y = 0; y \u0026lt; height; y++) { for (int x = 0; x \u0026lt; width; x++) { int idx = y * width + x; static const float RATIO = 0.25f;\t// Blend ratio DWORD color_ice_img = color_buffer_ice_img[idx]; DWORD color_frame_img = color_buffer_frame_img[idx]; if ((color_frame_img \u0026amp; 0xFF000000) \u0026gt;\u0026gt; 24)\t// 0xFF000000: Alpha channel { // Note: The color buffer stores pixel data in BGR order, so you need to swap the red and blue channels when retrieving color values. BYTE r = (BYTE)(GetBValue(color_frame_img) * RATIO + GetBValue(color_ice_img) * (1 - RATIO)); BYTE g = (BYTE)(GetGValue(color_frame_img) * RATIO + GetGValue(color_ice_img) * (1 - RATIO)); BYTE b = (BYTE)(GetRValue(color_frame_img) * RATIO + GetRValue(color_ice_img) * (1 - RATIO)); // Blend with the Alpha channel color_buffer_frame_img[idx] = (BGR(RGB(r, g, b)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); } } } Enhancement: Adding Highlight to Frozen State To make the freeze effect more vivid, add a white scanning line from top to bottom. Only pixels with brightness above a threshold will be highlighted.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 void RenderFrozenPlayer() { static const POINT position = { 1075, 345}; static int counter = 0;\t// Animation frame index static int anim_timer = 0;\t// Animation timer static int frozen_timer = 0;\t// Freeze state timer static const int THICKNESS = 5;\t// Scanline thickness static int hightlight_pos_y = 0;// Vertical position of the scanline static bool is_frozen = false;\t// Whether the player is currently frozen // If not frozen, update animation timer if ((!is_frozen) \u0026amp;\u0026amp; (++anim_timer % 3 == 0)) counter = (counter + 1) % 6; // Update freeze timer and reset scanline position if (++frozen_timer % 100 == 0) { is_frozen = !is_frozen; highlight_pos_y = -THICKNESS; } // Draw shadow beneath the player putimage_alpha(position.x + (80 - 32) / 2, position.y + 80, \u0026amp;img_shadow); // Render different animation frames depending on freeze state if (is_frozen) { // Copy current frame for further processing IMAGE img_current_frame(img_player_left[counter]); int width = img_curent_frame.getwidth(); int height = img_curent_frame.getheight(); // Update vertical position of the highlight scanline highlight_pos_y = (highlight_pos_y + 2) % height; // Get color buffers of the current frame and the ice overlay DWORD* color_buffer_ice_img = GetImageBuffer(\u0026amp;img_ice); DWORD* color_buffer_frame_img = GetImageBuffer(\u0026amp;img_current_frame); for (int y = 0; y \u0026lt; height; y++) { for (int x = 0; x \u0026lt; width; x++) { int idx = y * width + x; static const float RATIO = 0.25f;\t// Blending ratio static const float THRESHOLD = 0.84f;\t// Highlight brightness threshold DWORD color_ice_img = color_buffer_ice_img[idx]; DWORD color_frame_img = color_buffer_frame_img[idx]; if ((color_frame_img \u0026amp; 0xFF000000) \u0026gt;\u0026gt; 24)\t// Check alpha channel (non-transparent) { // Note: Color buffer stores pixels in BGR order, so swap red and blue when extracting BYTE r = (BYTE)(GetBValue(color_frame_img) * RATIO + GetBValue(color_ice_img) * (1 - RATIO)); BYTE g = (BYTE)(GetGValue(color_frame_img) * RATIO + GetGValue(color_ice_img) * (1 - RATIO)); BYTE b = (BYTE)(GetRValue(color_frame_img) * RATIO + GetRValue(color_ice_img) * (1 - RATIO)); // If pixel brightness at scanline exceeds threshold, set it to pure white if ((y \u0026gt;= hightlight_pos_y \u0026amp;\u0026amp; y \u0026lt; = highlight_pos_y + THICKNESS) \u0026amp;\u0026amp; ((r / 255.0f) * 0.2126f + (g / 255.0f) * 0.7152f + (b / 255.0f) * 0.0722f \u0026gt;= TRESHOLD)) { color_buffer_frame_img[idx] = (BGR(RGB(255, 255, 255)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); continue; } color_buffer_frame_img[idx] = (BGR(RGB(r, g, b)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); } } } putimage_alpha(position.x, position.y, \u0026amp;img_current_frame);\t} else putimage_alpha(position.x, position.y, \u0026amp;img_player_left[counter]); } The brightness coefficients (0.2126, 0.7152, 0.0722) are based on a standard formula for perceived luminance.\nFull Source Codeinclude \u0026lt;graphics.h\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; /* =============== Key Concepts =============== * 1. Avoid blocking operations or heavy, time-consuming tasks inside the main game loop. * 2. Difference between using a frame counter and a timer to control animation updates: * - Counter-based: Frame updates speed up on faster machines with higher refresh rates. * - Timer-based: Frame updates stay consistent across all machines, tied to real elapsed time. * 3. Use the Flyweight pattern to optimize resource loading. */ const int WINDOW_WIDTH = 1280; const int WINDOW_HEIGHT = 720; const int FPS = 60; const double PI = 3.14159; const int BULLET_BASE_RADIUS = 100; const int BULLET_RADIUS_CHANGE_RANGE = 25; const int PLAYER_ANIM_NUM = 6; const int ENEMY_ANIM_NUM = 6; const int BUTTON_WIDTH = 192; const int BUTTON_HEIGHT = 75; bool is_game_started = false; bool is_running = true; #pragma comment(lib, \u0026#34;MSIMG32.LIB\u0026#34;) // Links the Windows GDI+ library for advanced image operations #pragma comment(lib, \u0026#34;Winmm.lib\u0026#34;) // Links the Windows multimedia library // Custom Transparent Image Rendering void putimage_alpha(int x, int y, IMAGE* img); // Optimize resources loading class Atlas { public: Atlas(LPCTSTR path, int num) { // Load image frames TCHAR path_file[256]; for (int i = 0; i \u0026lt; num; i++) { _stprintf_s(path_file, path, i); IMAGE* frame = new IMAGE(); loadimage(frame, path_file); frame_list.push_back(frame); } } ~Atlas() { for (int i = 0; i \u0026lt; frame_list.size(); i++) { delete frame_list[i]; } } public: vector\u0026lt;IMAGE*\u0026gt; frame_list; }; Atlas* atlas_player_left; // Initialize in main() Atlas* atlas_player_right; Atlas* atlas_enemy_left; Atlas* atlas_enemy_right; class Animation { public: Animation(Atlas* atlas, int interval) { anim_atlas = atlas; interval_ms = interval; } ~Animation() = default;\t// The atlas is shared, so we don\u0026#39;t delete it here // It should be released at a higher level (e.g., in main) // Play animation void Play(int x, int y, int delta_time) { timer += delta_time; if (timer \u0026gt;= interval_ms) { idx_frame = (idx_frame + 1) % anim_atlas-\u0026gt;frame_list.size(); timer = 0; } putimage_alpha(x, y, anim_atlas-\u0026gt;frame_list[idx_frame]); } private: int interval_ms = 0; // Frame interval int timer = 0; // Animation timer int idx_frame = 0; // Current frame index private: Atlas* anim_atlas;\t// Pointer to shared atlas }; class Player { public: Player() { loadimage(\u0026amp;img_shadow, _T(\u0026#34;img/shadow_player.png\u0026#34;)); anim_left = new Animation(atlas_player_left, 45); anim_right = new Animation(atlas_player_right, 45); } ~Player() { delete anim_left; delete anim_right; } void ProcessEvent(const ExMessage\u0026amp; msg) { if (msg.message == WM_KEYDOWN) { switch (msg.vkcode) { case VK_UP: is_moving_up = true; break; case VK_DOWN: is_moving_down = true; break; case VK_LEFT: is_moving_left = true; break; case VK_RIGHT: is_moving_right = true; break; } } if (msg.message == WM_KEYUP) { switch (msg.vkcode) { case VK_UP: is_moving_up = false; break; case VK_DOWN: is_moving_down = false; break; case VK_LEFT: is_moving_left = false; break; case VK_RIGHT: is_moving_right = false; break; } }\t} void Move() { if (is_moving_up) position.y -= SPEED; if (is_moving_down) position.y += SPEED; if (is_moving_left) position.x -= SPEED; if (is_moving_right) position.x += SPEED; // Fix diagonal movement being faster than horizontal/vertical int dir_x = is_moving_right - is_moving_left; // Right is positive X direction int dir_y = is_moving_down - is_moving_up; // Down is positive Y direction double len_dir = sqrt(dir_x * dir_x + dir_y * dir_y); if (len_dir != 0) { double normalized_x = dir_x / len_dir; double normalized_y = dir_y / len_dir; position.x += (int)(SPEED * normalized_x); position.y += (int)(SPEED * normalized_y); } // Clamp player movement within window boundaries if (position.x \u0026lt; 0) position.x = 0; if (position.y \u0026lt; 0) position.y = 0; if (position.x + FRAME_WIDTH \u0026gt; WINDOW_WIDTH) position.x = WINDOW_WIDTH - FRAME_WIDTH; if (position.y + FRAME_HEIGHT \u0026gt; WINDOW_HEIGHT) position.y = WINDOW_HEIGHT - FRAME_HEIGHT; } void Draw(int delta_time) { // Draw shadow before rendering the player int shadow_pos_x = position.x + (FRAME_WIDTH / 2 - SHADOW_WIDTH / 2); int shadow_pos_y = position.y + FRAME_HEIGHT - 8; putimage_alpha(shadow_pos_x, shadow_pos_y, \u0026amp;img_shadow); static bool facing_left = false; int dir_x = is_moving_right - is_moving_left; if (dir_x \u0026lt; 0) facing_left = true; else if (dir_x \u0026gt; 0) facing_left = false; if (facing_left) anim_left-\u0026gt;Play(position.x, position.y, delta_time); else anim_right-\u0026gt;Play(position.x, position.y, delta_time); } const POINT\u0026amp; GetPosition() const { return position; } public: const int FRAME_WIDTH = 80; const int FRAME_HEIGHT = 80; private: const int SPEED = 3; // Player movement speed const int SHADOW_WIDTH = 32;\tprivate:\tIMAGE img_shadow; // Shadow beneath the player Animation* anim_left; Animation* anim_right; POINT position = { 500, 500 }; // Player position // Fix stuttering caused by asynchronous message handling and key input bool is_moving_up = false; bool is_moving_down = false; bool is_moving_left = false; bool is_moving_right = false; }; class Bullet { public: Bullet() = default; ~Bullet() = default; void Draw() const // Add \u0026#39;const\u0026#39; after the member function: this method does not modify any member variables { setlinecolor(RGB(255, 155, 50)); setfillcolor(RGB(200, 75, 10)); fillcircle(position.x, position.y, RADIUS); } public: POINT position = { 0, 0 }; private: const int RADIUS = 10; }; class Enemy { public: Enemy() { loadimage(\u0026amp;img_shadow, _T(\u0026#34;img/shadow_enemy.png\u0026#34;)); anim_left = new Animation(atlas_enemy_left, 45); anim_right = new Animation(atlas_enemy_right, 45); // Spawn boundaries for the enemy enum class SpawnEdge { Up = 0, Down, Left, Right }; // Randomly spawn the enemy on one of the four edges SpawnEdge edge = (SpawnEdge)(rand() % 4); // Generate specific random coordinates switch (edge) { case SpawnEdge::Up: position.x = rand() % WINDOW_WIDTH; position.y = -FRAME_HEIGHT; break; case SpawnEdge::Down: position.x = rand() % WINDOW_WIDTH; position.y = WINDOW_HEIGHT; break; case SpawnEdge::Left: position.x = -FRAME_WIDTH; position.y = rand() % WINDOW_HEIGHT; break; case SpawnEdge::Right: position.x = WINDOW_WIDTH; position.y = rand () % WINDOW_HEIGHT; break; default: break; } } ~Enemy() { delete anim_left; delete anim_right; } bool CheckBulletCollision(const Bullet\u0026amp; bullet) // Add \u0026#39;const\u0026#39; before the parameter: this argument will not be modified inside the function { // Treat the bullet as a point and check if it lies within the enemy\u0026#39;s rectangle bool is_overlap_x = bullet.position.x \u0026gt;= position.x \u0026amp;\u0026amp; bullet.position.x \u0026lt;= position.x + FRAME_WIDTH; bool is_overlap_y = bullet.position.y \u0026gt;= position.y \u0026amp;\u0026amp; bullet.position.y \u0026lt;= position.y + FRAME_HEIGHT; return is_overlap_x \u0026amp;\u0026amp; is_overlap_y; } bool CheckPlayerCollision(const Player\u0026amp; player) { // Use the center point of the enemy as the collision point POINT check_position = { position.x + FRAME_WIDTH / 2, position.y + FRAME_HEIGHT / 2 }; bool is_overlap_x = check_position.x \u0026gt;= player.GetPosition().x \u0026amp;\u0026amp; check_position.x \u0026lt;= player.GetPosition().x + player.FRAME_WIDTH; bool is_overlap_y = check_position.y \u0026gt;= player.GetPosition().y \u0026amp;\u0026amp; check_position.y \u0026lt;= player.GetPosition().y + player.FRAME_HEIGHT; return is_overlap_x \u0026amp;\u0026amp; is_overlap_y; } void Move(const Player\u0026amp; player) { const POINT\u0026amp; player_position = player.GetPosition(); int dir_x = player_position.x - position.x; int dir_y = player_position.y - position.y; double dir_len = sqrt(dir_x * dir_x + dir_y * dir_y); if (dir_len != 0) { double normalized_x = dir_x / dir_len; double normalized_y = dir_y / dir_len; position.x += (int)(normalized_x * SPEED); position.y += (int)(normalized_y * SPEED); } if (dir_x \u0026gt; 0) facing_left = false; else if (dir_x \u0026lt; 0) facing_left = true; } void Draw(int delta_time) { int shadow_pos_x = position.x + (FRAME_WIDTH / 2 - SHADOW_WIDTH / 2); int shadow_pos_y = position.y + FRAME_HEIGHT - 35; putimage_alpha(shadow_pos_x, shadow_pos_y, \u0026amp;img_shadow); if (facing_left) anim_left-\u0026gt;Play(position.x, position.y, delta_time); else anim_right-\u0026gt;Play(position.x, position.y, delta_time); } void Hurt() { alive = false; } bool CheckAlive() { return alive; } private: const int SPEED = 2; const int FRAME_WIDTH = 80; const int FRAME_HEIGHT = 80; const int SHADOW_WIDTH = 48;\tprivate: IMAGE img_shadow; Animation* anim_left; Animation* anim_right; POINT position = { 0, 0 }; bool facing_left = false; bool alive = true; }; // Button base class class Button { public: Button(RECT rect, LPCTSTR path_imag_idle, LPCTSTR path_imag_hovered, LPCTSTR path_imag_pushed) // load images { region = rect; loadimage(\u0026amp;img_idle, path_imag_idle); loadimage(\u0026amp;img_hovered, path_imag_hovered); loadimage(\u0026amp;img_pushed, path_imag_pushed); } ~Button() = default; void Draw() { switch (status) { case Status::Idle: putimage(region.left, region.top, \u0026amp;img_idle); break; case Status::Hovered: putimage(region.left, region.top, \u0026amp;img_hovered); break; case Status::Pushed: putimage(region.left, region.top, \u0026amp;img_pushed); break; } } void ProcessEvent(const ExMessage\u0026amp; msg) { switch (msg.message) { case WM_MOUSEMOVE: if (status == Status::Idle \u0026amp;\u0026amp; CheckCursorHit(msg.x, msg.y)) status = Status::Hovered; else if (status == Status::Idle \u0026amp;\u0026amp; !CheckCursorHit(msg.x, msg.y)) status = Status::Idle; else if (status == Status::Hovered \u0026amp;\u0026amp; !CheckCursorHit(msg.x, msg.y)) status = Status::Idle; break; case WM_LBUTTONDOWN: if (CheckCursorHit(msg.x, msg.y)) status = Status::Pushed; break; case WM_LBUTTONUP: if (status == Status::Pushed) OnClick(); break; default: break; } } protected: virtual void OnClick() = 0; private: bool CheckCursorHit(int x, int y) { return x \u0026gt;= region.left \u0026amp;\u0026amp; x \u0026lt;= region.right \u0026amp;\u0026amp; y \u0026gt;= region.top \u0026amp;\u0026amp; y \u0026lt;= region.bottom; } private: enum class Status { Idle = 0, Hovered, Pushed }; private: RECT region; IMAGE img_idle; IMAGE img_hovered; IMAGE img_pushed; Status status = Status::Idle; }; class StartGameButton : public Button { public: StartGameButton(RECT rect, LPCTSTR path_imag_idle, LPCTSTR path_imag_hovered, LPCTSTR path_imag_pushed) : Button(rect, path_imag_idle, path_imag_hovered, path_imag_pushed) {} ~StartGameButton() = default; protected: void OnClick() { is_game_started = true; mciSendString(_T(\u0026#34;play bgm repeat from 0\u0026#34;), NULL, 0, NULL); // Play bgm repeatly } }; class QuitGameButton : public Button { public: QuitGameButton(RECT rect, LPCTSTR path_imag_idle, LPCTSTR path_imag_hovered, LPCTSTR path_imag_pushed) : Button(rect, path_imag_idle, path_imag_hovered, path_imag_pushed) {} ~QuitGameButton() = default; protected: void OnClick() { is_running = false; } }; void TryGenerateEnemy(vector\u0026lt;Enemy*\u0026gt;\u0026amp; enemy_list); void UpdateBullets(vector\u0026lt;Bullet\u0026gt;\u0026amp; bullet_list, const Player\u0026amp; player); void DrawPlayerScore(int score); int main() { initgraph(WINDOW_WIDTH, WINDOW_HEIGHT); mciSendString(_T(\u0026#34;open mus/bgm.mp3 alias bgm\u0026#34;), NULL, 0, NULL); // load audio mciSendString(_T(\u0026#34;open mus/hit.wav alias hit\u0026#34;), NULL, 0, NULL); // Both the player and enemy constructors require atlas resources, // so atlas objects must be initialized before creating player and enemy instances. atlas_player_left = new Atlas(_T(\u0026#34;img/player_left_%d.png\u0026#34;), PLAYER_ANIM_NUM); atlas_player_right = new Atlas(_T(\u0026#34;img/player_right_%d.png\u0026#34;), PLAYER_ANIM_NUM); atlas_enemy_left = new Atlas(_T(\u0026#34;img/enemy_left_%d.png\u0026#34;), ENEMY_ANIM_NUM); atlas_enemy_right = new Atlas(_T(\u0026#34;img/enemy_right_%d.png\u0026#34;), ENEMY_ANIM_NUM); Player player; vector\u0026lt;Enemy*\u0026gt; enemy_list; vector\u0026lt;Bullet\u0026gt; bullet_list(3); // Only three bullets are needed, so raw pointers are avoided to prevent memory leaks\tExMessage msg; IMAGE img_menu;\tIMAGE img_background;\tint score = 0; RECT region_btn_start_game, region_btn_quit_game; // ================ UI ================ region_btn_start_game.left = (WINDOW_WIDTH - BUTTON_WIDTH) / 2; region_btn_start_game.right = region_btn_start_game.left + BUTTON_WIDTH; region_btn_start_game.top = 430; region_btn_start_game.bottom = region_btn_start_game.top + BUTTON_HEIGHT; region_btn_quit_game.left = (WINDOW_WIDTH - BUTTON_WIDTH) / 2; region_btn_quit_game.right = region_btn_quit_game.left + BUTTON_WIDTH; region_btn_quit_game.top = 550; region_btn_quit_game.bottom = region_btn_quit_game.top + BUTTON_HEIGHT; StartGameButton btn_start_game = StartGameButton(region_btn_start_game, _T(\u0026#34;img/ui_start_idle.png\u0026#34;), _T(\u0026#34;img/ui_start_hovered.png\u0026#34;), _T(\u0026#34;img/ui_start_pushed.png\u0026#34;)); QuitGameButton btn_quit_game = QuitGameButton(region_btn_quit_game, _T(\u0026#34;img/ui_quit_idle.png\u0026#34;), _T(\u0026#34;img/ui_quit_hovered.png\u0026#34;), _T(\u0026#34;img/ui_quit_pushed.png\u0026#34;)); loadimage(\u0026amp;img_menu, _T(\u0026#34;img/menu.png\u0026#34;)); loadimage(\u0026amp;img_background, _T(\u0026#34;img/background.png\u0026#34;)); BeginBatchDraw(); while (is_running) { DWORD start_time = GetTickCount(); while (peekmessage(\u0026amp;msg)) { if (is_game_started) { player.ProcessEvent(msg); } else { btn_start_game.ProcessEvent(msg); btn_quit_game.ProcessEvent(msg); } }\tif (is_game_started) { player.Move(); UpdateBullets(bullet_list, player); TryGenerateEnemy(enemy_list); for (Enemy* enemy : enemy_list) enemy-\u0026gt;Move(player); // Collision detection: enemies vs. player for (Enemy* enemy : enemy_list) { if (enemy-\u0026gt;CheckPlayerCollision(player)) { static TCHAR text[128]; _stprintf_s(text, _T(\u0026#34;最终得分：%d！\u0026#34;), score); MessageBox(GetHWnd(), text, _T(\u0026#34;游戏结束\u0026#34;), MB_OK); is_running = false; break; } } // Collision detection: enemies vs. bullets for (Enemy* enemy : enemy_list) { for (const Bullet\u0026amp; bullet : bullet_list) { if (enemy-\u0026gt;CheckBulletCollision(bullet)) { mciSendString(_T(\u0026#34;play hit from 0\u0026#34;), NULL, 0, NULL); enemy-\u0026gt;Hurt(); score++; } } } // Iterate through the enemy list and remove defeated enemies for (size_t i = 0; i \u0026lt; enemy_list.size(); i++) // Avoid using iterators since the container is modified during iteration { Enemy* enemy = enemy_list[i]; if (!enemy-\u0026gt;CheckAlive()) { // Swap with the last element and remove it // * This is an efficient deletion method when element order doesn\u0026#39;t matter swap(enemy_list[i], enemy_list.back()); enemy_list.pop_back(); delete enemy; } } } cleardevice(); // ======= Draw ======= if (is_game_started) { putimage(0, 0, \u0026amp;img_background); player.Draw(1000 / FPS); for (Enemy* enemy : enemy_list) enemy-\u0026gt;Draw(1000 / FPS); for (Bullet\u0026amp; bullet : bullet_list) bullet.Draw(); DrawPlayerScore(score); } else { putimage(0, 0, \u0026amp;img_menu); btn_start_game.Draw(); btn_quit_game.Draw(); } FlushBatchDraw(); DWORD end_time = GetTickCount(); DWORD delta_time = end_time - start_time; if (delta_time \u0026lt; 1000 / FPS) { Sleep(1000 / FPS - delta_time); } } // Release atlas pointers after the main loop delete atlas_player_left; delete atlas_player_right; delete atlas_enemy_left; delete atlas_enemy_right; EndBatchDraw(); return 0; } void putimage_alpha(int x, int y, IMAGE* img) { int w = img-\u0026gt;getwidth(); int h = img-\u0026gt;getheight(); AlphaBlend(GetImageHDC(NULL), x, y, w, h, GetImageHDC(img), 0, 0, w, h, { AC_SRC_OVER,0,255,AC_SRC_ALPHA }); } void TryGenerateEnemy(vector\u0026lt;Enemy*\u0026gt;\u0026amp; enemy_list) { const int INTERVAL = 100; static int counter = 0; if (++counter % INTERVAL == 0) { enemy_list.push_back(new Enemy()); } } // Update bullet postions void UpdateBullets(vector\u0026lt;Bullet\u0026gt;\u0026amp; bullet_list, const Player\u0026amp; player) { // Create a pulsating effect for visual flair const double RADIAL_SPEED = 0.0045; // Speed of radial oscillation const double TANGENT_SPEED = 0.0055; // Speed of tangential rotation double radian_interval = 2 * PI / bullet_list.size(); // Angular spacing between bullets // Update each bullet\u0026#39;s position based on the player\u0026#39;s location POINT player_position = player.GetPosition(); double radius = BULLET_BASE_RADIUS + BULLET_RADIUS_CHANGE_RANGE * sin(GetTickCount() * RADIAL_SPEED); for (size_t i = 0; i \u0026lt; bullet_list.size(); i++) { double radian = GetTickCount() * TANGENT_SPEED + radian_interval * i; bullet_list[i].position.x = player_position.x + player.FRAME_WIDTH / 2 + (int)(radius * sin(radian)); bullet_list[i].position.y = player_position.y + player.FRAME_HEIGHT / 2 + (int)(radius * cos(radian)); } } void DrawPlayerScore(int score) { static TCHAR text[64]; _stprintf_s(text, _T(\u0026#34;当前玩家得分：%d\u0026#34;), score); setbkmode(TRANSPARENT); settextcolor(RGB(255, 85, 185)); outtextxy(10, 10, text); } Reflection and Summary Although this project was developed largely based on beginner-level intuition without much architectural planning, I still learned a great deal. The instructor started with the overall game framework and gradually refined each module, clearly demonstrating the problems encountered in each part and the thought process behind solving them. This was highly valuable for my own development practice.\nI also gained a deeper understanding of how animations work at the pixel level, supplemented my knowledge of color and image buffers, and reviewed key concepts like vector motion and 2D collision detection. Through a simple yet hands-on example, I finally grasped the purpose of the Flyweight pattern and design patterns in general. It often felt like a moment of sudden clarity—like fog lifting to reveal the sky.\nLooking ahead, there are two areas I need to explore further. First is 3D collision detection and related topics. Although I studied them in school through traditional textbook exercises, I didn’t encounter any real development examples, so my memory is vague and I feel like I’ve forgotten most of it. Second is design patterns in game development. Back then, I read the books and answered questions in a very mechanical way, often feeling lost and confused. I plan to continue learning from this instructor’s design pattern courses to gain a more practical and intuitive understanding through real-world application.\n","date":"2025-10-08T10:47:30+02:00","image":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchteyvat-survivors/cover_hu_5cfa909519d6e81c.webp","permalink":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchteyvat-survivors/","title":"【C++ Game Dev from Scratch】Teyvat Survivors"},{"content":"Table of Contents\nTerms Industry Expressions for Game \u0026amp; IT Developers Idiomatic Expressions For Interviews and Project Communication Terms Expression Meaning Usage Scenario polymorphism The ability of different objects to respond to the same function call in different ways. Core concept in object-oriented programming, especially with virtual functions. inheritance A mechanism where one class derives properties and behaviors from another. Used to create class hierarchies and reuse code. encapsulation Hiding internal details and exposing only necessary parts through interfaces. Helps protect data and maintain clean architecture. constructor / destructor Special functions that initialize and clean up objects. Used in C++ to manage object lifecycle. reference / pointer Ways to access or refer to memory locations. Essential in C++ for memory management and function arguments. overload / override Overload: same function name with different parameters; Override: redefine base class behavior. Used to extend or customize functionality. compile-time / runtime Compile-time: when code is translated to machine code; Runtime: when the program is executed. Important for debugging and performance analysis. stack / heap Two types of memory allocation: stack is fast and temporary, heap is dynamic and persistent. Used in variable storage and object creation. thread-safe Code that can safely run in multi-threaded environments without causing errors. Crucial in concurrent programming. undefined behavior Code that may produce unpredictable results due to language rules violations. Should be avoided to ensure stability and portability. template / generic Code structures that work with any data type. Used in C++ (templates) and TypeScript (generics) for reusable components. STL (Standard Template Library) A collection of pre-built classes and functions for common data structures and algorithms. Widely used in C++ for vectors, maps, sets, etc. lambda expression A concise way to define anonymous functions. Used in functional-style programming and callbacks. scope / lifetime Scope: where a variable is accessible; Lifetime: how long it exists in memory. Important for managing resources and avoiding bugs. Industry Expressions for Game \u0026amp; IT Developers Expression Meaning Usage Scenario MVP (Minimum Viable Product) The simplest version of a product that still delivers value. Used during early product development to test core features quickly. pivot A major change in strategy or direction. When a product or business shifts focus due to feedback or market changes. iteration One cycle of development and improvement. Common in agile workflows to gradually refine a product. sprint A short, focused period of development. Used in agile teams to deliver specific tasks within 1–2 weeks. backlog A prioritized list of tasks or features. Managed by product owners to track upcoming work. playtest Testing a game by letting users play it. Used to gather feedback on gameplay, balance, and user experience. asset pipeline The workflow for preparing and integrating visual/audio assets. Collaboration between artists and developers to get assets into the game. hitbox / collision detection The invisible area used to detect contact between objects. Essential for gameplay mechanics like combat or movement. frame rate / FPS The number of frames rendered per second. A key performance metric for smooth gameplay. latency / lag Delay between user action and system response. Critical in online games and real-time applications. live ops Ongoing updates and events after a game’s release. Used to retain players and keep content fresh. monetization Strategies to generate revenue from a product. Includes ads, in-app purchases, subscriptions, etc. sandbox environment A safe, isolated testing space. Used for experimentation without affecting production systems. scalability The ability of a system to handle growth. Important for systems expected to serve many users or large data loads. CI/CD (Continuous Integration / Deployment) Automated processes for building, testing, and releasing code. Core to modern DevOps workflows for fast and reliable delivery. Idiomatic Expressions Expression Meaning Usage “Let’s refactor this module.” Suggest improving the code structure to make it cleaner or more efficient. During a code review or when planning technical debt cleanup. “This function is too tightly coupled.” The function depends too much on other parts of the code, making it hard to reuse or test. When discussing code design problems. “Can we abstract this logic?” Suggest extracting common logic into a reusable function or class. While reviewing repetitive code or planning modularization. “This breaks the single responsibility principle.” The code does too many things and should be split into smaller parts. When evaluating class or function design. “Let’s keep it DRY.” Avoid repeating the same code in multiple places. During refactoring or team discussions. “This is a bit verbose.” The code or explanation is too long or detailed. When suggesting simplification. “It’s more idiomatic to use…” This way of writing is more natural or standard in this programming language. When giving style or best practice advice. “Let’s decouple the UI from the logic.” Separate the user interface from the underlying code logic. When designing front-end architecture. “This is a good candidate for a helper function.” This piece of code can be moved into a reusable function. During code cleanup or review. “We should avoid side effects here.” The function should not change external states unexpectedly. When writing pure or predictable functions. For Interviews and Project Communication Expression Meaning Usage Scenario I led the implementation of\u0026hellip; I was responsible for building or developing a specific feature or system. Used when describing your role in a project. We optimized the performance by\u0026hellip; We made the system faster or more efficient using a specific method. Used to highlight technical improvements. I collaborated with cross-functional teams. I worked with people from different departments (e.g., design, QA, product). Shows teamwork and communication skills. One challenge we faced was\u0026hellip; We encountered a problem during the project. Used to introduce problem-solving stories. I proposed a solution that\u0026hellip; I suggested a way to fix or improve something. Shows initiative and problem-solving ability. The project was deployed to production in\u0026hellip; The project went live and was used by real users. Used to show project completion and impact. I ensured code quality through\u0026hellip; I used specific practices to keep the code clean and reliable. Highlights engineering discipline and standards. I’m comfortable working in agile environments. I’m used to working in fast-paced, iterative teams. Shows adaptability and team experience. I’m currently exploring C++ for backend performance. I’m learning how to use C++ to make backend systems faster. Shows ongoing learning and technical curiosity. I’d love to contribute to scalable systems. I’m interested in building systems that can grow and handle more users. Expresses career goals and technical ambition. ","date":"2025-09-28T10:28:14+02:00","image":"https://nullshowjl.github.io/en/p/english-for-developersexpressions-for-dev-life/cover_hu_9708449b0c624132.webp","permalink":"https://nullshowjl.github.io/en/p/english-for-developersexpressions-for-dev-life/","title":"【English for Developers】Expressions for Dev Life"},{"content":"Table of Contents\nOverview Timeline - Phase One Phase One Summary Overview Project Goal: Build a personal blog website from scratch to document and share my learning notes, development journey, and reflections. It also serves as part of my portfolio. Tech Stack: GitHub Pages + Hugo, with lightweight customizations based on the Stack theme. Start Date: 2025-09-14 Current Status: In progress Learning Resources: Hugo official docs, Stack theme docs, tutorials from Bilibili and other creators online. Repository: GitHub Timeline - Phase One 2025-09-14 Goals： Set up the site and enable auto-deployment Add a basic version of the animated character widget Issues： Page not found when switching between Chinese and English Website tab icon not showing Solutions: Used GitHub Copilot in VS Code to help write a JS file for language switching Tested with icons that worked on other websites to rule out image issues; the icon eventually appeared after I worked on other modules Thoughts: I need to learn web programming systematically while developing, so I can understand not just how things work, but why GitHub Pages deploys quickly, but changes may take time to show. If the repo is updated but the site hasn’t refreshed, just wait a bit 2025-09-16 Goals: Add an Update Log to the sidebar Upload the first blog post (Chinese version) Change fonts Use a custom cursor Issue: Custom cursor not showing Solution: Found in the tutorial’s comment section that the issue might be with the image. Tested with the blogger’s image and it worked Thoughts: Comments under articles or videos can be very helpful—others may have already solved the same problem 2025-09-18 Goal: Finish a round of basic visual improvements Issues: Unsure how to apply specific fonts to different languages and code blocks Syntax error during auto-deployment Solutions: Used Copilot’s suggestions to fix the font issue Syntax error was due to indentation. VS Code auto-formatted incorrectly, so I switched to Notepad to fix it Thoughts: Front-end code is sensitive to indentation. Better to use Notepad or other editors instead of VS Code for certain tasks 2025-09-19 Goals:\nContinue visual improvements Adjust icons and text for Color Scheme Add dynamic background Add blog view counter Issue:\nAfter fixing overlapping icons, text formatting still didn’t align with other sidebar items Notes：\nTried for quite a while without success \u0026ndash; I\u0026rsquo;ll leave it for now and revisit it after I’ve studied more front-end\n2025-09-20 Goals:\nContinue visual improvements Add homepage loading animation Add footer animation Add blog post heatmap Issues:\nUnrelated text appeared at the bottom of the site Tried adding animation to the icon below the avatar but it didn’t work Solution:\nAI helped identify the issue: I used C++ style comments in custom.html, which browsers treated as text Notes：\nWill revisit the small icon animation after learning more front-end (fixed on 9-23) Thoughts:\nComment syntax varies a lot between languages - important to follow the correct format strictly 2025-09-22 Goal：\nContinue visual improvements Issue：\nLink page card images couldn’t be resized uniformly Notes：\nStill couldn’t solve the issue, so I’ve manually adjusted each image for now. Will come back to unify the layout after I’ve learned more front-end 2025-09-23 Goals:\nAdd RSS feeds for language-specific subscriptions Upgrade character widget2D to moc3 version Add footer animation Add blog post heatmap Issue:\nCharacter model failed to load Solution:\nUsed browser dev tools to debug. AI helped identify a missing \\ in the model folder path Thoughts:\nAlways double-check file paths Dev tools are super useful for debugging 2025-09-24 Goals:\nAdd a new character model and customize all parameters Issues:\nNew model failed to load jsDelivr didn’t load newly pushed files Solutions:\nDev tools showed the model was too large, so I decided to abandon it Learned from AI that jsDelivr caches tags and doesn’t auto-update. Used precise loading to avoid cluttering the repo Thoughts:\nFirst time realizing how important file size is for web delivery. Just like managing game assets in later stages of Brotato, each programming domain has its own key concerns that you only grasp through hands-on experience 2025-09-29 Goals:\nAdd runtime statistics and article count to the bottom of the webpage Issues:\nChinese characters appeared as garbled text Solutions:\nFollowed AI’s suggestion to inspect the file using VS Code. Found that the encoding was incorrect under UTF-8. After adjusting the encoding, the characters displayed correctly Thoughts:\nOpening the file in VS 2022 did not reveal any encoding issues, but VS Code clearly exposed the problem However, after editing in VS Code, clicking Save would automatically change the file format, causing Hugo to fail during compilation Phase One Summary Progress:\nFinished initial setup of the tech blog, including auto-deployment and basic visual customization Takeaways:\nLearned the basics of static site generators (config → template → render) Got familiar with GitHub Pages deployment Didn’t study front-end formally during this phase—relied on tutorials and AI. Learned how to ask AI better questions to solve problems Next Steps:\nStudy front-end systematically and revisit unresolved issues Read and understand the customized parts of the code Keep updating the site based on my TODO list ","date":"2025-09-24T09:11:30+02:00","image":"https://nullshowjl.github.io/en/p/dev-logmy-tech-blog-website/cover_hu_5ee5269ebd73980f.webp","permalink":"https://nullshowjl.github.io/en/p/dev-logmy-tech-blog-website/","title":"【Dev Log】My Tech Blog Website"},{"content":"Table of Contents\nOverview Environment Setup Demo1 - Circle Follows Mouse Demo2 - Tic-Tac-Toe Game Reflection and Summary Overview Tech Stack：C++ + EasyX\nProject Goal: Set up the EasyX environment and complete two small demos (a circle that follows the mouse, and a tic-tac-toe game). Understand the basic structure of a game loop.\nCourse Source：Bilibili-Voidmatrix\nEnvironment Setup EasyX: Just search for “EasyX” and download it directly from the official site.\nTo use EasyX functions, include \u0026lt;graphics.h\u0026gt; in your header file.\nDemo1 - Circle Follows Mouse Design Approach Create a window and set up the main game loop Draw a circle that follows the mouse Optimize rendering using double buffering Development Steps Initialize Window and Main Loop Use initgraph() to initialize the window, and a while (true) loop to prevent it from closing instantly:\n1 2 3 4 5 6 7 8 9 int main() { initgraph(1280, 720); while (true) { } return 0; } This infinite loop is the basic framework for all games. Input handling and screen updates happen inside it:\n1 2 3 4 5 while (true) { // Handle player input // Update screen } Draw the Circle Use solidcircle() to draw the circle.\nHandle Input Use peekmessage() to process input.\nIn EasyX, mouse movement, clicks, and keyboard input are all considered “messages.” These messages are stored in a queue. Each time peekmessage() is called, EasyX tries to pull one message from the queue. If successful, it returns true; otherwise, false. So we use another loop to keep pulling messages until the queue is empty.\nAccording to the docs, peekmessage() requires a parameter msg, which is a pointer to an ExMessage struct. One of its members, message, indicates the type of input (mouse, keyboard, etc.). So the input handling looks like this:\n1 2 3 4 5 6 7 8 9 10 11 while (true) { ExMessage msg; while (peekmessage(\u0026amp;msg)) { if (msg == WM_MOUSEMOVE) { // Handle mouse movement } } } Clear Screen If you don’t clear the screen, the ball will leave a trail as it follows the mouse. Use cleardevice() before each draw.\nOptimize Drawing with Double Buffering Use BeginBatchDraw(), FlushBatchDraw(), and EndBatchDraw():\n1 2 3 4 5 6 7 8 9 10 11 12 13 BeginBatchDraw(); while (true) // Main game loop { // Handle input // Update game state cleardevice(); // Clear screen // Draw FlushBatchDraw(); } EndBatchDraw(); Key Functions initgraph() – initialize graphics window peekmessage() – get mouse movement messages cleardevice() – clear screen solidcircle(x, y, r) – draw circle BeginBatchDraw(), FlushBatchDraw(), EndBatchDraw() – double buffering Concepts EasyX Coordinate System Origin is at the top-left of the screen. X increases to the right, Y increases downward.\nRender Buffer Think of the render buffer as a giant canvas. Drawing functions paint on it. Earlier drawings can be covered by later ones. cleardevice() fills the canvas with the current background color (default is black).\nBeginBatchDraw() creates a new invisible canvas. All drawing happens on this canvas until FlushBatchDraw() and EndBatchDraw() swap it with the visible one. This prevents flickering caused by frequent redraws.\nGame Loop A typical game loop repeatedly performs:\n1 2 3 4 5 6 while (true) { // Read input // Process data // Render screen } Initialize game data before the loop (before BeginBatchDraw()), and release resources after the loop ends.\nDemo2 - Tic-Tac-Toe Game Game Description Players take turns placing X or O on a 3 * 3 grid. If one player gets three in a row (horizontal, vertical, or diagonal), they win. If all nine cells are filled with no winner, it’s a draw. This demo supports local two-player mode only.\nDesign Approach Three Core Elements in the Game Loop Input: Handle mouse left-clicks. If a blank cell is clicked, place a piece.\nData Processing: Check for game-over conditions: three matching pieces in a line or full board. If the game ends, show a popup and exit the loop.\nRendering: Use line() to draw the grid and X pieces (diagonal lines), and circle() for O pieces. Display the current piece type in the top-left corner.\nData Structures Board and Pieces: Use a 2D array char board_data[3][3] for the board. Use 'X' and 'O' for pieces, and '-' for empty cells.\nGame Over Conditions Win: Check all 8 possible winning combinations for both X and O.\nDraw: If no '-' remains and no winner, it’s a draw.\nDevelopment Steps Top-Down Approach Start with the framework, then fill in details.\nGame Loop Skeleton Use bool running to control the loop. Use CheckWin() and CheckDraw() to determine game status.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 bool running = true; ExMessage msg; BeginBatchDraw(); while (running) // Main game loop { while (peekmessage(\u0026amp;msg)) { // Input } // Data processing if (CheckWin(\u0026#39;X\u0026#39;)) { // Pop up message and end the game MessageBox(GetHWnd(), _T(\u0026#34;X Player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckWin(\u0026#39;O\u0026#39;)) { // Similar logic to the above } else if (CheckDraw()) { // Similar logic to the above } cleardevice(); // Draw all the objects DrawBoard(); DrawPiece(); DrawPrompt(); FlushBatchDraw(); } EndBatchDraw(); Input Logic Mouse coordinates are in pixels. Convert them to grid indices:\n1 2 3 4 5 6 int x = msg.x; // Pixel indices of mouse int y = msg.y; int index_x = x / 200; // Grid indices of mouse int index_y = y / 200; Then place the piece and switch to the other type.\nData Processing Logic CheckWin() uses brute-force to check 8 patterns.\nCheckDraw() loops through all cells to check for '-'.\n1 2 3 4 5 6 7 8 9 10 for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { if (board[row][col] == \u0026#39;-\u0026#39;) { } } } Rendering Logic Board: Use line() with pixel coordinates.\nX Pieces: Use diagonal line() calls.\nO Pieces: Use circle() with center offset by +100 pixels.\nDrawing the prompt message: To make it work in more general coding environments, used some less common types and functions \u0026ndash; but they work similarly to C’s printf().\n1 2 static TCHAR str[64]; _stprintf_s(str, _T(\u0026#34;Current piece type：%c\u0026#34;), current_piece); Some font styling functions：\n1 2 settextcolor(RGB(225, 175, 45)); // Set the text color to orange for better visual //\temphasis; outtextxy(0, 0, str); // Display the string at a specified position Optimization Last Piece Not Drawn: If win-check happens before drawing, the popup blocks rendering. So draw first, then check.\nHigh CPU Usage: When a computer runs a while loop, it executes extremely fast—our main game loop can complete thousands of iterations in an instant, consuming a large amount of CPU time. For most displays with a physical refresh rate of only 60Hz, this leads to unnecessary performance waste. A quick and crude solution is to use sleep(15) to force the program to pause for 15 milliseconds after each loop. However, this isn’t recommended. As the game grows in complexity, the amount of computation per loop can vary, depending on how the operating system allocates CPU resources. This means the actual time spent per loop may differ. So instead, we should calculate how long each frame takes to process and dynamically adjust the sleep time afterward. The recommended approach is to set a fixed frame rate manually. To do this, we use the GetTickCount() function, which returns the number of milliseconds since the program started running.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while (running) { DWORD start_time = GetTickCount(); // Get the start time of the current loop // Read input // Process data // Render screen DWORD end_time = GetTickCount(); // Get the end time of the current loop DWORD delta_time = end_time - start_time; // Calculate the time interval // Dynamically assign sleep time based on the interval // Refresh the screen at 60 frames per second if (delta_time \u0026lt; 1000 / 60) // If the interval is less than the time for one frame, // sleep; Otherwise, no need to sleep { Sleep(1000 / 60 - delta_time); } } // Release resources } Full source codeinclude \u0026lt;graphics.h\u0026gt; char board_data[3][3] = { {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;}, {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;}, {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;} }; char current_piece = \u0026#39;O\u0026#39;; bool CheckWin(char c); bool CheckDraw(); void DrawBoard(); void DrawPiece(); void DrawPrompt(); int main() { //======= Initialization ======= initgraph(600, 600); ExMessage msg; bool running = true; // Double buffering to prevent screen flickering BeginBatchDraw(); //======= Main game loop ======= while (running) { DWORD start_time = GetTickCount(); while (peekmessage(\u0026amp;msg)) { //======= Handle input ======= // Detect mouse left-click messages if (msg.message == WM_LBUTTONDOWN) { // Calculate click position int x = msg.x; int y = msg.y; int index_x = y / 200; int index_y = x / 200; //========= Handle data processing ========= // Place piece if (board_data[index_y][index_x] == \u0026#39;-\u0026#39;) { board_data[index_y][index_x] = current_piece;\t// Switch piece type if (current_piece == \u0026#39;O\u0026#39;) { current_piece = \u0026#39;X\u0026#39;; } else if (current_piece == \u0026#39;X\u0026#39;) { current_piece = \u0026#39;O\u0026#39;; } } } }\tcleardevice(); //===== Handle rendering ===== DrawBoard();\tDrawPiece(); DrawPrompt(); FlushBatchDraw(); // Check for win condition -- placed after rendering to ensure the last piece // is drawn if (CheckWin(\u0026#39;X\u0026#39;)) { MessageBox(GetHWnd(), _T(\u0026#34;X player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckWin(\u0026#39;O\u0026#39;)) { MessageBox(GetHWnd(), _T(\u0026#34;O player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckDraw()) { MessageBox(GetHWnd(), _T(\u0026#34;Draw\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } //======= Set frame rate（Optimization）======= DWORD end_time = GetTickCount(); DWORD delta_time = end_time - start_time; if (delta_time \u0026lt; 1000 / 60) { Sleep(1000 / 60 - delta_time); // Optimize performance by capping frame // rate at 60 FPS -- avoid running too fast } } EndBatchDraw(); return 0; } bool CheckWin(char c) { if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[0][1] == c \u0026amp;\u0026amp; board_data[0][2] == c) return true; if (board_data[1][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[1][2] == c) return true; if (board_data[2][0] == c \u0026amp;\u0026amp; board_data[2][1] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[1][0] == c \u0026amp;\u0026amp; board_data[2][0] == c) return true; if (board_data[0][1] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[2][1] == c) return true; if (board_data[0][2] == c \u0026amp;\u0026amp; board_data[1][2] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; if (board_data[2][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[0][2] == c) return true; if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; return false; } bool CheckDraw() { for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { if (board_data[row][col] == \u0026#39;-\u0026#39;) { return false; } } } return true; } void DrawBoard() { line(0, 200, 600, 200); line(0, 400, 600, 400); line(200, 0, 200, 600); line(400, 0, 400, 600); } void DrawPiece() { for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { switch (board_data[row][col]) { case \u0026#39;-\u0026#39;: break; case \u0026#39;O\u0026#39;: circle(200 * row + 100, 200 * col + 100, 100); break; case \u0026#39;X\u0026#39;: line(200 * row, 200 * col, 200 * (row + 1), 200 * (col + 1)); line(200 * (row + 1), 200 * col, 200 * row, 200 * (col + 1)); } } }\t} void DrawPrompt() { static TCHAR str[64]; _stprintf_s(str, _T(\u0026#34;Current piece type：%c\u0026#34;), current_piece); settextcolor(RGB(225, 175, 45)); outtextxy(0, 0, str); } Reflection and Summary This was my first time truly understanding the game loop, double buffering, coordinate systems, and frame rate control. I’ve used C++ and raylib before, but mostly by copying code without fully grasping it. This time, I followed the tutorial step by step, focusing on fast and simple implementation rather than object-oriented design. I used a top-down approach: build the framework first, then solve each problem one by one.\nI plan to finish all of VoidMatrix’s tutorials to improve my coding skills and deepen my understanding of game development. I also want to align my coding style with industry standards.\n","date":"2025-09-18T09:11:30+02:00","image":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchfundamental/cover_hu_c9d732c287ad5881.webp","permalink":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchfundamental/","title":"【C++ Game Dev from Scratch】Fundamental"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://nullshowjl.github.io/en/p/rich-content/","title":"Rich Content"}]