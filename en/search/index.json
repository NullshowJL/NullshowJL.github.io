[{"content":"Terms Expression Meaning Usage Scenario polymorphism The ability of different objects to respond to the same function call in different ways. Core concept in object-oriented programming, especially with virtual functions. inheritance A mechanism where one class derives properties and behaviors from another. Used to create class hierarchies and reuse code. encapsulation Hiding internal details and exposing only necessary parts through interfaces. Helps protect data and maintain clean architecture. constructor / destructor Special functions that initialize and clean up objects. Used in C++ to manage object lifecycle. reference / pointer Ways to access or refer to memory locations. Essential in C++ for memory management and function arguments. overload / override Overload: same function name with different parameters; Override: redefine base class behavior. Used to extend or customize functionality. compile-time / runtime Compile-time: when code is translated to machine code; Runtime: when the program is executed. Important for debugging and performance analysis. stack / heap Two types of memory allocation: stack is fast and temporary, heap is dynamic and persistent. Used in variable storage and object creation. thread-safe Code that can safely run in multi-threaded environments without causing errors. Crucial in concurrent programming. undefined behavior Code that may produce unpredictable results due to language rules violations. Should be avoided to ensure stability and portability. template / generic Code structures that work with any data type. Used in C++ (templates) and TypeScript (generics) for reusable components. STL (Standard Template Library) A collection of pre-built classes and functions for common data structures and algorithms. Widely used in C++ for vectors, maps, sets, etc. lambda expression A concise way to define anonymous functions. Used in functional-style programming and callbacks. scope / lifetime Scope: where a variable is accessible; Lifetime: how long it exists in memory. Important for managing resources and avoiding bugs. Industry Expressions for Game \u0026amp; IT Developers Expression Meaning Usage Scenario MVP (Minimum Viable Product) The simplest version of a product that still delivers value. Used during early product development to test core features quickly. pivot A major change in strategy or direction. When a product or business shifts focus due to feedback or market changes. iteration One cycle of development and improvement. Common in agile workflows to gradually refine a product. sprint A short, focused period of development. Used in agile teams to deliver specific tasks within 1–2 weeks. backlog A prioritized list of tasks or features. Managed by product owners to track upcoming work. playtest Testing a game by letting users play it. Used to gather feedback on gameplay, balance, and user experience. asset pipeline The workflow for preparing and integrating visual/audio assets. Collaboration between artists and developers to get assets into the game. hitbox / collision detection The invisible area used to detect contact between objects. Essential for gameplay mechanics like combat or movement. frame rate / FPS The number of frames rendered per second. A key performance metric for smooth gameplay. latency / lag Delay between user action and system response. Critical in online games and real-time applications. live ops Ongoing updates and events after a game’s release. Used to retain players and keep content fresh. monetization Strategies to generate revenue from a product. Includes ads, in-app purchases, subscriptions, etc. sandbox environment A safe, isolated testing space. Used for experimentation without affecting production systems. scalability The ability of a system to handle growth. Important for systems expected to serve many users or large data loads. CI/CD (Continuous Integration / Deployment) Automated processes for building, testing, and releasing code. Core to modern DevOps workflows for fast and reliable delivery. Idiomatic Expressions Expression Meaning Usage “Let’s refactor this module.” Suggest improving the code structure to make it cleaner or more efficient. During a code review or when planning technical debt cleanup. “This function is too tightly coupled.” The function depends too much on other parts of the code, making it hard to reuse or test. When discussing code design problems. “Can we abstract this logic?” Suggest extracting common logic into a reusable function or class. While reviewing repetitive code or planning modularization. “This breaks the single responsibility principle.” The code does too many things and should be split into smaller parts. When evaluating class or function design. “Let’s keep it DRY.” Avoid repeating the same code in multiple places. During refactoring or team discussions. “This is a bit verbose.” The code or explanation is too long or detailed. When suggesting simplification. “It’s more idiomatic to use…” This way of writing is more natural or standard in this programming language. When giving style or best practice advice. “Let’s decouple the UI from the logic.” Separate the user interface from the underlying code logic. When designing front-end architecture. “This is a good candidate for a helper function.” This piece of code can be moved into a reusable function. During code cleanup or review. “We should avoid side effects here.” The function should not change external states unexpectedly. When writing pure or predictable functions. For Interviews and Project Communication Expression Meaning Usage Scenario I led the implementation of\u0026hellip; I was responsible for building or developing a specific feature or system. Used when describing your role in a project. We optimized the performance by\u0026hellip; We made the system faster or more efficient using a specific method. Used to highlight technical improvements. I collaborated with cross-functional teams. I worked with people from different departments (e.g., design, QA, product). Shows teamwork and communication skills. One challenge we faced was\u0026hellip; We encountered a problem during the project. Used to introduce problem-solving stories. I proposed a solution that\u0026hellip; I suggested a way to fix or improve something. Shows initiative and problem-solving ability. The project was deployed to production in\u0026hellip; The project went live and was used by real users. Used to show project completion and impact. I ensured code quality through\u0026hellip; I used specific practices to keep the code clean and reliable. Highlights engineering discipline and standards. I’m comfortable working in agile environments. I’m used to working in fast-paced, iterative teams. Shows adaptability and team experience. I’m currently exploring C++ for backend performance. I’m learning how to use C++ to make backend systems faster. Shows ongoing learning and technical curiosity. I’d love to contribute to scalable systems. I’m interested in building systems that can grow and handle more users. Expresses career goals and technical ambition. ","date":"2025-09-28T10:28:14+02:00","image":"https://nullshowjl.github.io/en/p/english-for-developersexpressions-for-dev-life/professional-english-en_hu_9708449b0c624132.webp","permalink":"https://nullshowjl.github.io/en/p/english-for-developersexpressions-for-dev-life/","title":"【English for Developers】Expressions for Dev Life"},{"content":"Overview Project Goal: Build a personal blog website from scratch to document and share my learning notes, development journey, and reflections. It also serves as part of my portfolio. Tech Stack: GitHub Pages + Hugo, with lightweight customizations based on the Stack theme. Start Date: 2025-09-14 Current Status: In progress Learning Resources: Hugo official docs, Stack theme docs, tutorials from Bilibili and other creators online. Repository: GitHub Timeline \u0026ndash; Phase One 2025-09-14 Goals： Set up the site and enable auto-deployment Add a basic version of the animated character widget Issues： Page not found when switching between Chinese and English Website tab icon not showing Solutions: Used GitHub Copilot in VS Code to help write a JS file for language switching Tested with icons that worked on other websites to rule out image issues; the icon eventually appeared after I worked on other modules Thoughts: I need to learn web programming systematically while developing, so I can understand not just how things work, but why GitHub Pages deploys quickly, but changes may take time to show. If the repo is updated but the site hasn’t refreshed, just wait a bit 2025-09-16 Goals: Add an Update Log to the sidebar Upload the first blog post (Chinese version) Change fonts Use a custom cursor Issue: Custom cursor not showing Solution: Found in the tutorial’s comment section that the issue might be with the image. Tested with the blogger’s image and it worked Thoughts: Comments under articles or videos can be very helpful—others may have already solved the same problem 2025-09-18 Goal: Finish a round of basic visual improvements Issues: Unsure how to apply specific fonts to different languages and code blocks Syntax error during auto-deployment Solutions: Used Copilot’s suggestions to fix the font issue Syntax error was due to indentation. VS Code auto-formatted incorrectly, so I switched to Notepad to fix it Thoughts: Front-end code is sensitive to indentation. Better to use Notepad or other editors instead of VS Code for certain tasks 2025-09-19 Goals:\nContinue visual improvements Adjust icons and text for Color Scheme Add dynamic background Add blog view counter Issue:\nAfter fixing overlapping icons, text formatting still didn’t align with other sidebar items Notes：\nTried for quite a while without success \u0026ndash; I\u0026rsquo;ll leave it for now and revisit it after I’ve studied more front-end\n2025-09-20 Goals:\nContinue visual improvements Add homepage loading animation Add footer animation Add blog post heatmap Issues:\nUnrelated text appeared at the bottom of the site Tried adding animation to the icon below the avatar but it didn’t work Solution:\nAI helped identify the issue: I used C++ style comments in custom.html, which browsers treated as text Notes：\nWill revisit the small icon animation after learning more front-end (fixed on 9-23) Thoughts:\nComment syntax varies a lot between languages - important to follow the correct format strictly 2025-09-22 Goal：\nContinue visual improvements Issue：\nLink page card images couldn’t be resized uniformly Notes：\nStill couldn’t solve the issue, so I’ve manually adjusted each image for now. Will come back to unify the layout after I’ve learned more front-end 2025-09-23 Goals:\nAdd RSS feeds for language-specific subscriptions Upgrade character widget2D to moc3 version Add footer animation Add blog post heatmap Issue:\nCharacter model failed to load Solution:\nUsed browser dev tools to debug. AI helped identify a missing \\ in the model folder path Thoughts:\nAlways double-check file paths Dev tools are super useful for debugging 2025-09-24 Goals:\nAdd a new character model and customize all parameters Issues:\nNew model failed to load jsDelivr didn’t load newly pushed files Solutions:\nDev tools showed the model was too large, so I decided to abandon it Learned from AI that jsDelivr caches tags and doesn’t auto-update. Used precise loading to avoid cluttering the repo Thoughts:\nFirst time realizing how important file size is for web delivery. Just like managing game assets in later stages of Brotato, each programming domain has its own key concerns that you only grasp through hands-on experience Phase One Summary Progress:\nFinished initial setup of the tech blog, including auto-deployment and basic visual customization Takeaways:\nLearned the basics of static site generators (config → template → render) Got familiar with GitHub Pages deployment Didn’t study front-end formally during this phase—relied on tutorials and AI. Learned how to ask AI better questions to solve problems Next Steps:\nStudy front-end systematically and revisit unresolved issues Read and understand the customized parts of the code Keep updating the site based on my TODO list ","date":"2025-09-24T09:11:30+02:00","image":"https://nullshowjl.github.io/en/p/dev-logmy-tech-blog-website/blog-en_hu_5ee5269ebd73980f.webp","permalink":"https://nullshowjl.github.io/en/p/dev-logmy-tech-blog-website/","title":"【Dev Log】My Tech Blog Website"},{"content":"Overview Tech Stack：C++ + EasyX\nProject Goal: Set up the EasyX environment and complete two small demos (a circle that follows the mouse, and a tic-tac-toe game). Understand the basic structure of a game loop.\nCourse Source：Bilibli-VoidMatrix\nEnvironment Setup EasyX: Just search for “EasyX” and download it directly from the official site.\nTo use EasyX functions, include \u0026lt;graphics.h\u0026gt; in your header file.\nDemo1 - Circle Follows Mouse Design Concept Create a window and set up the main game loop Draw a circle that follows the mouse Optimize rendering using double buffering Development Steps Initialize Window and Main Loop Use initgraph() to initialize the window, and a while (true) loop to prevent it from closing instantly:\n1 2 3 4 5 6 7 8 9 int main() { initgraph(1280, 720); while (true) { } return 0; } This infinite loop is the basic framework for all games. Input handling and screen updates happen inside it:\n1 2 3 4 5 while (true) { // Handle player input // Update screen } Draw the Circle Use solidcircle() to draw the circle.\nHandle Input Use peekmessage() to process input.\nIn EasyX, mouse movement, clicks, and keyboard input are all considered “messages.” These messages are stored in a queue. Each time peekmessage() is called, EasyX tries to pull one message from the queue. If successful, it returns true; otherwise, false. So we use another loop to keep pulling messages until the queue is empty.\nAccording to the docs, peekmessage() requires a parameter msg, which is a pointer to an ExMessage struct. One of its members, message, indicates the type of input (mouse, keyboard, etc.). So the input handling looks like this:\n1 2 3 4 5 6 7 8 9 10 11 while (true) { ExMessage msg; while (peekmessage(\u0026amp;msg)) { if (msg == WM_MOUSEMOVE) { // Handle mouse movement } } } Clear Screen If you don’t clear the screen, the ball will leave a trail as it follows the mouse. Use cleardevice() before each draw.\nOptimize Drawing with Double Buffering Use BeginBatchDraw(), FlushBatchDraw(), and EndBatchDraw():\n1 2 3 4 5 6 7 8 9 10 11 12 13 BeginBatchDraw(); while (true) // Main game loop { // Handle input // Update game state cleardevice(); // Clear screen // Draw FlushBatchDraw(); } EndBatchDraw(); Key Functions initgraph() – initialize graphics window peekmessage() – get mouse movement messages cleardevice() – clear screen solidcircle(x, y, r) – draw circle BeginBatchDraw(), FlushBatchDraw(), EndBatchDraw() – double buffering Concepts EasyX Coordinate System Origin is at the top-left of the screen. X increases to the right, Y increases downward.\nRender Buffer Think of the render buffer as a giant canvas. Drawing functions paint on it. Earlier drawings can be covered by later ones. cleardevice() fills the canvas with the current background color (default is black).\nBeginBatchDraw() creates a new invisible canvas. All drawing happens on this canvas until FlushBatchDraw() and EndBatchDraw() swap it with the visible one. This prevents flickering caused by frequent redraws.\nGame Loop A typical game loop repeatedly performs:\n1 2 3 4 5 6 while (true) { // Read input // Process data // Render screen } Initialize game data before the loop (before BeginBatchDraw()), and release resources after the loop ends.\nDemo2 - Tic-Tac-Toe Game Game Description Players take turns placing X or O on a 3 * 3 grid. If one player gets three in a row (horizontal, vertical, or diagonal), they win. If all nine cells are filled with no winner, it’s a draw. This demo supports local two-player mode only.\nDesign Concept Three Core Elements in the Game Loop Input: Handle mouse left-clicks. If a blank cell is clicked, place a piece.\nData Processing: Check for game-over conditions: three matching pieces in a line or full board. If the game ends, show a popup and exit the loop.\nRendering: Use line() to draw the grid and X pieces (diagonal lines), and circle() for O pieces. Display the current piece type in the top-left corner.\nData Structures Board and Pieces: Use a 2D array char board_data[3][3] for the board. Use 'X' and 'O' for pieces, and '-' for empty cells.\nGame Over Conditions Win: Check all 8 possible winning combinations for both X and O.\nDraw: If no '-' remains and no winner, it’s a draw.\nDevelopment Steps Top-Down Approach Start with the framework, then fill in details.\nGame Loop Skeleton Use bool running to control the loop. Use CheckWin() and CheckDraw() to determine game status.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 bool running = true; ExMessage msg; BeginBatchDraw(); while (running) // Main game loop { while (peekmessage(\u0026amp;msg)) { // Input } // Data processing if (CheckWin(\u0026#39;X\u0026#39;)) { // Pop up message and end the game MessageBox(GetHWnd(), _T(\u0026#34;X Player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckWin(\u0026#39;O\u0026#39;)) { // Similar logic to the above } else if (CheckDraw()) { // Similar logic to the above } cleardevice(); // Draw all the objects DrawBoard(); DrawPiece(); DrawPrompt(); FlushBatchDraw(); } EndBatchDraw(); Input Logic Mouse coordinates are in pixels. Convert them to grid indices:\n1 2 3 4 5 6 int x = msg.x; // Pixel indices of mouse int y = msg.y; int index_x = x / 200; // Grid indices of mouse int index_y = y / 200; Then place the piece and switch to the other type.\nData Processing Logic CheckWin() uses brute-force to check 8 patterns.\nCheckDraw() loops through all cells to check for '-'.\n1 2 3 4 5 6 7 8 9 10 for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { if (board[row][col] == \u0026#39;-\u0026#39;) { } } } Rendering Logic Board: Use line() with pixel coordinates.\nX Pieces: Use diagonal line() calls.\nO Pieces: Use circle() with center offset by +100 pixels.\nDrawing the prompt message: To make it work in more general coding environments, used some less common types and functions \u0026ndash; but they work similarly to C’s printf().\n1 2 static TCHAR str[64]; _stprintf_s(str, _T(\u0026#34;Current piece type：%c\u0026#34;), current_piece); Some font styling functions：\n1 2 settextcolor(RGB(225, 175, 45)); // Set the text color to orange for better visual //\temphasis; outtextxy(0, 0, str); // Display the string at a specified position Optimization Last Piece Not Drawn: If win-check happens before drawing, the popup blocks rendering. So draw first, then check.\nHigh CPU Usage: When a computer runs a while loop, it executes extremely fast—our main game loop can complete thousands of iterations in an instant, consuming a large amount of CPU time. For most displays with a physical refresh rate of only 60Hz, this leads to unnecessary performance waste. A quick and crude solution is to use sleep(15) to force the program to pause for 15 milliseconds after each loop. However, this isn’t recommended. As the game grows in complexity, the amount of computation per loop can vary, depending on how the operating system allocates CPU resources. This means the actual time spent per loop may differ. So instead, we should calculate how long each frame takes to process and dynamically adjust the sleep time afterward. The recommended approach is to set a fixed frame rate manually. To do this, we use the GetTickCount() function, which returns the number of milliseconds since the program started running.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while (running) { DWORD start_time = GetTickCount(); // Get the start time of the current loop // Read input // Process data // Render screen DWORD end_time = GetTickCount(); // Get the end time of the current loop DWORD delta_time = end_time - start_time; // Calculate the time interval // Dynamically assign sleep time based on the interval // Refresh the screen at 60 frames per second if (delta_time \u0026lt; 1000 / 60) // If the interval is less than the time for one frame, // sleep; Otherwise, no need to sleep { Sleep(1000 / 60 - delta_time); } } // Release resources } Full source codeinclude \u0026lt;graphics.h\u0026gt; char board_data[3][3] = { {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;}, {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;}, {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;} }; char current_piece = \u0026#39;O\u0026#39;; bool CheckWin(char c); bool CheckDraw(); void DrawBoard(); void DrawPiece(); void DrawPrompt(); int main() { //======= Initialization ======= initgraph(600, 600); ExMessage msg; bool running = true; // Double buffering to prevent screen flickering BeginBatchDraw(); //======= Main game loop ======= while (running) { DWORD start_time = GetTickCount(); while (peekmessage(\u0026amp;msg)) { //======= Handle input ======= // Detect mouse left-click messages if (msg.message == WM_LBUTTONDOWN) { // Calculate click position int x = msg.x; int y = msg.y; int index_x = y / 200; int index_y = x / 200; //========= Handle data processing ========= // Place piece if (board_data[index_y][index_x] == \u0026#39;-\u0026#39;) { board_data[index_y][index_x] = current_piece;\t// Switch piece type if (current_piece == \u0026#39;O\u0026#39;) { current_piece = \u0026#39;X\u0026#39;; } else if (current_piece == \u0026#39;X\u0026#39;) { current_piece = \u0026#39;O\u0026#39;; } } } }\tcleardevice(); //===== Handle rendering ===== DrawBoard();\tDrawPiece(); DrawPrompt(); FlushBatchDraw(); // Check for win condition -- placed after rendering to ensure the last piece // is drawn if (CheckWin(\u0026#39;X\u0026#39;)) { MessageBox(GetHWnd(), _T(\u0026#34;X player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckWin(\u0026#39;O\u0026#39;)) { MessageBox(GetHWnd(), _T(\u0026#34;O player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckDraw()) { MessageBox(GetHWnd(), _T(\u0026#34;Draw\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } //======= Set frame rate（Optimization）======= DWORD end_time = GetTickCount(); DWORD delta_time = end_time - start_time; if (delta_time \u0026lt; 1000 / 60) { Sleep(1000 / 60 - delta_time); // Optimize performance by capping frame // rate at 60 FPS -- avoid running too fast } } EndBatchDraw(); return 0; } bool CheckWin(char c) { if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[0][1] == c \u0026amp;\u0026amp; board_data[0][2] == c) return true; if (board_data[1][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[1][2] == c) return true; if (board_data[2][0] == c \u0026amp;\u0026amp; board_data[2][1] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[1][0] == c \u0026amp;\u0026amp; board_data[2][0] == c) return true; if (board_data[0][1] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[2][1] == c) return true; if (board_data[0][2] == c \u0026amp;\u0026amp; board_data[1][2] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; if (board_data[2][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[0][2] == c) return true; if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; return false; } bool CheckDraw() { for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { if (board_data[row][col] == \u0026#39;-\u0026#39;) { return false; } } } return true; } void DrawBoard() { line(0, 200, 600, 200); line(0, 400, 600, 400); line(200, 0, 200, 600); line(400, 0, 400, 600); } void DrawPiece() { for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { switch (board_data[row][col]) { case \u0026#39;-\u0026#39;: break; case \u0026#39;O\u0026#39;: circle(200 * row + 100, 200 * col + 100, 100); break; case \u0026#39;X\u0026#39;: line(200 * row, 200 * col, 200 * (row + 1), 200 * (col + 1)); line(200 * (row + 1), 200 * col, 200 * row, 200 * (col + 1)); } } }\t} void DrawPrompt() { static TCHAR str[64]; _stprintf_s(str, _T(\u0026#34;Current piece type：%c\u0026#34;), current_piece); settextcolor(RGB(225, 175, 45)); outtextxy(0, 0, str); } Reflection and Summary This was my first time truly understanding the game loop, double buffering, coordinate systems, and frame rate control. I’ve used C++ and raylib before, but mostly by copying code without fully grasping it. This time, I followed the tutorial step by step, focusing on fast and simple implementation rather than object-oriented design. I used a top-down approach: build the framework first, then solve each problem one by one.\nI plan to finish all of VoidMatrix’s tutorials to improve my coding skills and deepen my understanding of game development. I also want to align my coding style with industry standards.\n","date":"2025-09-18T09:11:30+02:00","image":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchfundamental/tictactoe-en_hu_c9d732c287ad5881.webp","permalink":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchfundamental/","title":"【C++ Game Dev from Scratch】Fundamental"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://nullshowjl.github.io/en/p/rich-content/","title":"Rich Content"}]