[{"content":"Table of Contents\nOverview Core Gameplay Main Development Process Extras: Animation Effects \u0026amp; Pixel Buffers Full Source Code Reflection and Summary Overview Tech Stack：C++ + EasyX\nProject Goal：Design an animation framework for the game, integrate keyboard input, and create more interactive gameplay. On the data and logic level, implement basic 2D collision detection, random enemy spawning, and enemy tracking behavior. Add music and sound effects to enhance the overall polish. Include a main menu interface. Use the Flyweight pattern to optimize program performance.\nCourse Source：Bilibili-Voidmatrix\nCore Gameplay The player clicks the Start button to enter the game and uses the Arrow Keys (Up, Down, Left, Right) to control character movement. A ring of bullets surrounds the player, while wild boar enemies continuously rush in from off-screen. When a bullet hits an enemy, the enemy is defeated and the player\u0026rsquo;s score increases. If an enemy touches the player, the game ends.\nMain Development Process Design Approach Designing the Core Game Framework Setting up the game window, creating the main loop, and stabilizing the frame rate follow a standard structure commonly used in game development. Since these steps are explained in detail in Episode 0: Fundamentals of the tutorial series, they won’t be repeated here.Setting up the game window, creating the main loop, and stabilizing the frame rate follow a standard structure commonly used in game development. Since these steps are explained in detail in Episode 0: Fundamentals of the tutorial series, they won’t be repeated here.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 int main() { //========= Initialize data ========== initgraph(1280, 720); bool is_running = true; const int FPS = 60; ExMessage msg; BeginBatchDraw(); while (is_running)\t// Main game loop { DWORD start_time = GetTickCount(); //========= Handle input ========= while (peekmessage(\u0026amp;msg)) { }\t//======== Handle update ========= cleardevice(); //======== Handle rendering ========= FlushBatchDraw(); //========= Stabilize frame rate ========= DWORD end_time = GetTickCount(); DWORD delta_time = end_time - start_time; if (delta_time \u0026lt; 1000 / FPS) { Sleep(1000 / FPS - delta_time); } } EndBatchDraw(); return 0; } Object and Class Design This project does not use polymorphism to abstract higher-level objects. Instead, each game element is implemented as a separate class, following a one-object-per-class approach. To make the structure intuitive for beginners, all code is written in main.cpp, using many global variables.\nPlayer class Bullet class (bullets orbiting the player Enemy class Animation and Atlas classes (for animation effects and optimization) Button base class StartGameButton ExitGameButton Development Workflow Game Framework Setup Image Loading and Rendering Solution: Use EasyX functions loadimage and putimage Issue: PNG images show black edges Solution: Override putimage with a version that supports transparency Note: Include the library #pragma comment(lib, \u0026quot;MSIMG32.LIB\u0026quot;) Animation Implementation Issue 1: How to animate images? Solution: Use a counter → optimize with a timer Issue 2: Repetitive animation code Solution: Encapsulate logic in an Animation class Player Movement Issue 1: Movement feels choppy Solution: Use boolean flags to track key press/release and control movement indirectly Issue 2: Diagonal movement is faster than horizontal/vertical Solution: Normalize movement vectors to ensure consistent speed Animation Data Mixing Issue Problem: Enemy and player data get mixed in the Animation class Solution: Use object-oriented design to separate logic and data into distinct classes Implementing Player, Bullet, and Enemy Classes Enemy Behavior Issue 1: Enemy spawn logic Solution: Randomly spawn enemies along one edge of the screen Note: When passing other class objects into functions, use references. If the object won’t be modified, add const. Issue 2: Enemy auto-tracking logic Solution: Calculate the unit vector from enemy to player and move in that direction 2D Collision Detection Issue 1: Bullet vs. Enemy Solution: Treat enemies as rectangles and bullets as points Issue 2: Player vs. Enemy Solution: Use the enemy’s center point for collision detection against the player’s rectangle Bullet Updates and Visual Effects Issue: Make bullet movement more dynamic Solution: Add tangential and radial velocity components Removing Defeated Enemies Solution: Use swap to move the enemy to the end of the vector, then pop_back and delete to free memory. This is efficient when element order doesn’t matter. Displaying Player Score Adding Sound Effects Solution: Use Windows API function mciSendString Note: Include the library #pragma comment(lib, \u0026quot;Winmm.lib\u0026quot;) Performance Optimization Solution: Use the Flyweight Pattern to optimize resource loading Note: Do not release the shared Atlas inside the Animation class—control it from a higher level Main Menu UI and Button Class Design Key Steps and Implementation Ideas Image Loading and Rendering Loading Images According to the documentation, EasyX provides a function called loadimage to load images. It has several overloads, but here we’ll use the simplest version: loading an image directly from a file.\n1 2 3 4 5 6 7 8 // Load image from file (supports bmp/gif/jpg/png/tif/emf/wmf/ico) int loadimage( IMAGE* pDstImg,\t// Pointer to the IMAGE object that stores the image LPCTSTR pImgFile,\t// File path of the image int nWidth = 0,\t// Optional: stretch width度 int nHeight = 0,\t// Optional: stretch height bool bResize = false\t// Optional: resize IMAGE to fit image size ); A few things to note:\nThe first parameter must be a non-null pointer to an IMAGE object. We load the image into memory first, not directly onto the screen. The second parameter is the file path as a string. The last three parameters are optional and control image scaling. We won’t use them in this project. To load an image named test.jpg from the project directory:\n1 2 IMAGE img; loadimage(\u0026amp;img, _T(\u0026#34;test.jpg\u0026#34;)); Rendering Images To draw the image on screen, EasyX provides the putimage function:\n1 2 3 4 5 6 7 // 绘制图像 void putimage( int dstX,\t// X coordinate on screen int dstY,\t// Y coordinate on screen IMAGE *pSrcImg,\t// Pointer to the IMAGE object to draw DWORD dwRop = SRCCOPY\t// Raster operation code (usually ignored) ); The first two parameters specify the position on screen.\nThe last parameter is a raster operation code, which we’ll ignore for this project.\nTo render the image we just loaded:\n1 2 3 4 5 6 // Load image IMAGE img; loadimage(\u0026amp;img, _T(\u0026#34;test.jpg\u0026#34;)); // Draw image putimage(100, 200, \u0026amp;img); If the image is 300 * 300 pixels, it will appear at position (100, 200) on the game screen like this:\nHandling PNG Transparency PNG images may show black edges when rendered. To fix this, we need to create a custom putimage_alpha function that supports transparency using AlphaBlend.\n1 2 3 4 5 6 7 8 9 #pragma comment(lib, \u0026#34;MSIMG32.LIB\u0026#34;) void putimage_alpha(int x, int y, IMAGE* img) { int w = img-\u0026gt;getwidth(); int h = img-\u0026gt;getheight(); AlphaBlend(GetImageHDC(NULL), x, y, w, h, GetImageHDC(img), 0, 0, w, h, { AC_SRC_OVER,0,255,AC_SRC_ALPHA }); } Make sure to include the required library at the top of your file: #pragma comment(lib, \u0026quot;MSIMG32.LIB\u0026quot;) .\nImplementing Animation and Rendering How to Make the Scene Move? In game development, character animation is typically implemented in two main ways: frame-by-frame animation and keyframe animation.\nFrame-by-frame animation uses a sequence of images. By displaying these images one after another over time, we create the illusion of motion through visual persistence. Keyframe animation, such as skeletal animation, involves more advanced graphics techniques and won’t be covered here. It’s important to note that we should not use the Sleep() function to control animation timing. Calling Sleep() causes the program to pause, which is a blocking operation. In our game framework, rendering and updates should happen continuously within the game loop, with each loop cycle completing within 1/60 of a second (i.e., 60 FPS). Animation frame switching should be spread across multiple frames—not completed in a single loop. This reflects a core principle in game programming: Avoid blocking operations or heavy tasks inside the main loop.\nTo switch animation frames at fixed intervals, we use a timer-based counter:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int idx_current_anim = 0;\t// 1. Index of the current animation frame const int PLAYER_ANIM_NUM = 6;\t// Total number of animation frames int main() { ..... while (is_running) { while (peekmessage(\u0026amp;msg)) { } static int counter = 0;\t// 2. Counts how many game frames have passed // \u0026#39;static\u0026#39; ensures it\u0026#39;s initialized only once // Switch animation frame every 5 game frames if (++counter % 5 == 0) idx_current_anim++; if（idx_current_anim % PLAYER_ANIM_NUM == 0) idx_current_anim = 0; } ...... } Rendering Animation Frames To render animation, we simply draw images from an array in sequence. First, load the frames:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const int PLAYER_ANIM_NUM = 6;\t// Total number of animation frames IMAGE img_player_left[PLAYER_ANIM_NUM]; IMAGE img_player_right[PLAYER_ANIM_NUM]; void load_animation() { for (size_t i = 0; i \u0026lt; PLAYER_ANIM_NUM; i++) { std::wstring path = L\u0026#34;img/player_left_\u0026#34; + std::to_wstring(i) + L\u0026#34;.png\u0026#34;; loadimage(\u0026amp;img_player_left[i], path.c_str()); } for (size_t i = 0; i \u0026lt; PLAYER_ANIM_NUM; i++) { std::wstring path = L\u0026#34;img/player_right_\u0026#34; + std::to_wstring(i) + L\u0026#34;.png\u0026#34;; loadimage(\u0026amp;img_player_right[i], path.c_str()); } } Then, inside the main loop, draw the current frame:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int main() { ...... while (is_running)\t// Main game loop { DWORD start_time = GetTickCount(); //========= Handle Input ========= while (peekmessage(\u0026amp;msg)) { }\t//======== Update ========= cleardevice(); //======== Render ========= putimage_alpha(500, 500, \u0026amp;img_player_left[idx_current_anim]); FlushBatchDraw(); ...... } } This setup ensures smooth animation playback by cycling through frames at a consistent rate.\nEncapsulating Animation into a Class From a data structure perspective, we use a vector\u0026lt;IMAGE*\u0026gt; to store pointers to the images needed for the animation. In the constructor, we load the image resources and allocate memory for each frame. Correspondingly, the destructor is responsible for releasing that memory to avoid leaks.\nWhen playing the animation, we pass not only the position where the animation should be rendered, but also an int delta parameter that represents the time elapsed since the last call to Play(). This replaces the earlier “frame counter” approach with a timer-based system.\nWhy this change? Because animation speed—defined by the frame interval—should depend on actual time, not the game’s frame rate. We want the animation to play at a consistent speed regardless of how fast the game loop runs. Using a time-based timer ensures smoother and more predictable playback than simply incrementing a counter every frame.\nHere’s the implementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Animation { public: Animation(LPCTSTR path, int num, int interval)\t// Load animation frames { interval_ms = interval; TCHAR path_file[256]; for (size_t i = 0; i \u0026lt; num; i++) { _sprintf_s(path_file, path, i); IMAGE* frame = new IMAGE(); loadimage(frame, path_file); frame_list.push_bacl(frame); } } void Play(int x, int y, int delta)\t// Play animation { timer += delta; if (timer \u0026gt;= interval_ms) { idx_frame = (idx_frame + 1) % frame_list.size(); timer =0; } // Render current frame pitimage_alpha(x, y, frame_list[idx_frame]); } ~Animation()\t// Release resources { for (size_t i = 0; i \u0026lt; frame_list.size(); i++) { delete frame_list[i]; } } private: vector\u0026lt;IMAGE*\u0026gt; frame_list;\t// List of animation frames int interval_ms = 0;\t// Time between frames (in milliseconds) int timer = 0; // Time accumulator int idx_frame = 0; // Current frame index } Implementing Player Movement If we control player movement by directly adding displacement to the position when a key is pressed, it can result in a choppy or inconsistent feel. This happens because WM_KEYDOWN messages are generated asynchronously from the main game loop, and their frequency depends on the operating system and hardware. As a result, some frames may process multiple WM_KEYDOWN messages, while others may receive few or none—causing the player to move unevenly across frames and creating a stuttering effect.\nAdditionally, when a directional key is pressed, the first WM_KEYDOWN message enters the event queue immediately. However, continuous WM_KEYDOWN messages only begin after a short delay if the key remains held down. This behavior contributes further to inconsistent movement.\nTo ensure smooth and consistent movement across all frames, we treat movement as a state:\nWhen a key is pressed (WM_KEYDOWN), the player starts moving. When the key is released (WM_KEYUP), the player stops moving. We use four boolean flags to represent movement directions. These flags are updated based on key press and release events, and the player\u0026rsquo;s position is updated accordingly in each frame:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 void ProcessEvent(const ExMessage\u0026amp; msg) { if (msg.message == WM_KEYDOWN) { switch (msg.vkcode) { case VK_UP: is_moving_up = true; break; case VK_DOWN: is_moving_down = true; break; case VK_LEFT: is_moving_left = true; break; case VK_RIGHT: is_moving_right = true; break; } } if (msg.message == WM_KEYUP) { switch (msg.vkcode) { case VK_UP: is_moving_up = false; break; case VK_DOWN: is_moving_down = false; break; case VK_LEFT: is_moving_left = false; break; case VK_RIGHT: is_moving_right = false; break; } }\t} void Move() { if (is_moving_up) position.y -= SPEED; if (is_moving_down) position.y += SPEED; if (is_moving_left) position.x -= SPEED; if (is_moving_right) position.x += SPEED; } To prevent the player from moving faster diagonally than horizontally or vertically, we normalize the movement vector. This ensures consistent speed in all directions:\n1 2 3 4 5 6 7 8 9 10 int dir_x = is_move_right - is_move_left; int dir_y = is_move_down - is_move_up; double len_dir = sqrt(dir_x * dir_x + dir_y + dir_y); if(len_dir != 0) { double normalized_x = dir_x / len_dir; double normalized_y = dir_y / len_dir; player_pos.x += (int)(PLAYER_SPEED * normalized_x); player_pos.y += (int)(PLAYER_SPEED * normalized_y); } Class Encapsulation To prevent data and logic from being scattered across the project, each object’s behavior and data are encapsulated into dedicated classes. For example, the Player class is structured roughly as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Player { public: Player() { // Initialize resources: animation frames, image assets, etc. } ~Player() { // Release resources } void ProcessEvent(const ExMessage\u0026amp; msg) { // Handle player input } void Move() { // Handle player movement } void Draw(int delta) { // Render the player } private: // Internal data members ...... } Enemy Class Implementation Details Random Enemy Spawning 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Define spawn edges enum class SpawnEdge { Up = 0, Down, Left, Right }; // Randomly select one edge SpawnEdge edge = (SpawnEdge)(rand() % 4); // Assign spawn coordinates based on selected edge switch (edge) { case SpawnEdge::Up: position.x = rand() % WINDOW_WIDTH; position.y = -FRAME_HEIGHT; break; case SpawnEdge::Down: position.x = rand() % WINDOW_WIDTH; position.y = WINDOW_HEIGHT; break; case SpawnEdge::Left: position.x = -FRAME_WIDTH; position.y = rand() % WINDOW_HEIGHT; break; case SpawnEdge::Right: position.x = WINDOW_WIDTH; position.y = rand () % WINDOW_HEIGHT; break; default: break; } Enemy Pathfinding Logic Each enemy automatically moves toward the player by calculating the direction vector between their positions and normalizing it. This ensures consistent movement speed regardless of distance:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void Move(const Player\u0026amp; player) { const POINT\u0026amp; player_position = player.GetPosition(); int dir_x = player_position.x - position.x; int dir_y = player_position.y - position.y; double dir_len = sqrt(dir_x * dir_x + dir_y * dir_y); if (dir_len != 0) { double normalized_x = dir_x / dir_len; double normalized_y = dir_y / dir_len; position.x += (int)(normalized_x * SPEED); position.y += (int)(normalized_y * SPEED); } // Update facing direction based on horizontal movement if (dir_x \u0026gt; 0) facing_left = false; else if (dir_x \u0026lt; 0) facing_left = true; } Implementing 2D Collision Detection All collision logic is implemented within the Enemy class. To avoid unnecessary copying, the Player and Bullet objects are passed by reference.\nEnemy vs. Bullet 1 2 3 4 5 6 7 8 bool CheckBulletCollision(const Bullet\u0026amp; bullet) // \u0026#39;const\u0026#39; ensures the bullet won\u0026#39;t be modified { // Treat the bullet as a point and check if it\u0026#39;s inside the enemy\u0026#39;s rectangle bool is_overlap_x = bullet.position.x \u0026gt;= position.x \u0026amp;\u0026amp; bullet.position.x \u0026lt;= position.x + FRAME_WIDTH; bool is_overlap_y = bullet.position.y \u0026gt;= position.y \u0026amp;\u0026amp; bullet.position.y \u0026lt;= position.y + FRAME_HEIGHT; return is_overlap_x \u0026amp;\u0026amp; is_overlap_y; } Enemy vs. Player In most games, collision detection isn\u0026rsquo;t overly strict. If both the enemy and player are treated as rectangles, it’s possible for only a corner to overlap visually without feeling like a real collision—leading to confusion. To improve the experience, hitboxes are often smaller than the actual image size.\nHere, we treat the enemy’s center point as the collision point and check if it overlaps with the player’s rectangle:\n1 2 3 4 5 6 7 8 9 bool CheckPlayerCollision(const Player\u0026amp; player) { // Use the enemy\u0026#39;s center point as the collision point POINT check_position = { position.x + FRAME_WIDTH / 2, position.y + FRAME_HEIGHT / 2 }; bool is_overlap_x = check_position.x \u0026gt;= player.GetPosition().x \u0026amp;\u0026amp; check_position.x \u0026lt;= player.GetPosition().x + player.FRAME_WIDTH; bool is_overlap_y = check_position.y \u0026gt;= player.GetPosition().y \u0026amp;\u0026amp; check_position.y \u0026lt;= player.GetPosition().y + player.FRAME_HEIGHT; return is_overlap_x \u0026amp;\u0026amp; is_overlap_y; } Bullet Updates and Visual Effects The bullets orbiting the player are handled as a group of three and updated using a global function.\nTo create a dynamic visual effect, we animate the bullets by adjusting their angle (α) over time. All angles are calculated in radians for simplicity:\nHere’s the corresponding code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Update bullet positions void UpdateBullets(vector\u0026lt;Bullet\u0026gt;\u0026amp; bullet_list, const Player\u0026amp; player) { // Create a pulsating effect for visual flair const double RADIAL_SPEED = 0.0045; // Speed of radial oscillation const double TANGENT_SPEED = 0.0055; // Speed of tangential rotation double radian_interval = 2 * PI / bullet_list.size(); // Angular spacing between bullets // Update each bullet\u0026#39;s position based on the player\u0026#39;s location POINT player_position = player.GetPosition(); double radius = BULLET_BASE_RADIUS + BULLET_RADIUS_CHANGE_RANGE * sin(GetTickCount() * RADIAL_SPEED); for (size_t i = 0; i \u0026lt; bullet_list.size(); i++) { double radian = GetTickCount() * TANGENT_SPEED + radian_interval * i; bullet_list[i].position.x = player_position.x + player.FRAME_WIDTH / 2 + (int)(radius * sin(radian)); bullet_list[i].position.y = player_position.y + player.FRAME_HEIGHT / 2 + (int)(radius * cos(radian)); } } Removing Defeated Enemies 1 2 3 4 5 6 7 8 9 10 11 12 13 // Iterate through the enemy list and remove defeated enemies for (size_t i = 0; i \u0026lt; enemy_list.size(); i++) // Avoid using iterators since the // container is modified during iteration { Enemy* enemy = enemy_list[i]; if (!enemy-\u0026gt;CheckAlive()) { // Swap with the last element and remove it // * This is an efficient deletion method when element order doesn\u0026#39;t matter swap(enemy_list[i], enemy_list.back()); enemy_list.pop_back(); delete enemy; } } Playing Sound Effects This project uses Windows API functions to play sound. Here’s how to do it:\n1 2 3 4 5 // Open the bgm.mp3 file located in the mus folder and assign it the alias \u0026#34;bgm\u0026#34; mciSendString(_T(\u0026#34;open mus/bgm.mp3 alias bgm\u0026#34;), NULL, 0, NULL);\t// Load sound // Play the sound with alias \u0026#34;bgm\u0026#34; in a loop starting from the beginning mciSendString(_T(\u0026#34;play bgm repeat from 0\u0026#34;), NULL, 0, NULL);\t// Remove \u0026#39;repeat\u0026#39; if looping is not needed\tPerformance Optimization: Using the Flyweight Pattern Game assets like models and textures often consume significant disk space and increase loading time. The Flyweight pattern is commonly used in game development to optimize resource usage.\nHere’s a comparison between a typical implementation and a Flyweight-based one:\n1 2 3 4 5 6 7 //========= Typical Implementation ========= struct Tree { Model model;\t// Tree model Texture texture;// Tree texture int x, y, z;\t// Tree position } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //======= Flyweight Implementation ======= // Shared asset structure // All trees use the same TreeAsset instance for model and texture struct TreeAsset { Model model;\t// Tree model Texture texture;// Tree texture } // Tree instance structure struct Tree { TreeAsset* asset;\t// Pointer to shared asset int x, y, z;\t// Tree position } In this project, we refactor the Animation class to separate shared and instance-specific data. The shared data—std::vector\u0026lt;IMAGE*\u0026gt; frame_list—is stored in an Atlas class, while each enemy instance maintains its own animation state.\nShared image data is managed by the Atlas class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Optimized resource loading class Atlas { public: Atlas(LPCTSTR path, int num) { // Load image frames TCHAR path_file[256]; for (int i = 0; i \u0026lt; num; i++) { _stprintf_s(path_file, path, i); IMAGE* frame = new IMAGE(); loadimage(frame, path_file); frame_list.push_back(frame); } } ~Atlas() { for (int i = 0; i \u0026lt; frame_list.size(); i++) { delete frame_list[i]; } } public: vector\u0026lt;IMAGE*\u0026gt; frame_list; }; Instance-specific animation logic is encapsulated in the Animation class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Animation { public: Animation(Atlas* atlas, int interval) { anim_atlas = atlas; interval_ms = interval; } ~Animation() = default; // The atlas is shared, so we don\u0026#39;t delete it here // It should be released at a higher level (e.g., in main) // Also, we didn\u0026#39;t allocate it with \u0026#39;new\u0026#39; here // Play animation void Play(int x, int y, int delta_time) { timer += delta_time; if (timer \u0026gt;= interval_ms) { idx_frame = (idx_frame + 1) % anim_atlas-\u0026gt;frame_list.size(); timer = 0; } putimage_alpha(x, y, anim_atlas-\u0026gt;frame_list[idx_frame]); } private: int interval_ms = 0;// Frame interval int timer = 0;\t// Animation timer int idx_frame = 0; // Current frame index private: Atlas* anim_atlas; // Pointer to shared atlas }; Button Class Design A button can have three states: Idle, Hovered, and Pushed. Understanding the transitions between these states is key to implementing input logic:\nAccordingly, we need to handle three types of input events: mouse movement, left mouse button press, and left mouse button release.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void ProcessEvent(const ExMessage\u0026amp; msg) { switch (msg.message) { case WM_MOUSEMOVE: if (status == Status::Idle \u0026amp;\u0026amp; CheckCursorHit(msg.x, msg.y)) status = Status::Hovered; else if (status == Status::Idle \u0026amp;\u0026amp; !CheckCursorHit(msg.x, msg.y)) status = Status::Idle; else if (status == Status::Hovered \u0026amp;\u0026amp; !CheckCursorHit(msg.x, msg.y)) status = Status::Idle; break; case WM_LBUTTONDOWN: if (CheckCursorHit(msg.x, msg.y)) status = Status::Pushed; break; case WM_LBUTTONUP: if (status == Status::Pushed) OnClick(); break; default: break; } } Extras: Animation Effects \u0026amp; Pixel Buffers Color Basics An image is made up of pixels, and each pixel’s color is determined by the three primary colors: Red, Green, and Blue—commonly referred to as RGB. These components are mixed at varying intensities to produce different colors. A simple Color structure can be defined as:\n1 2 3 4 5 6 struct Color { int r; int g; int b; }; Essentially, an image is a 2D array of pixels. For example, a ``100*100 image can be represented asColor image[100][100]`. Rendering an image to the window involves copying this smaller array into the larger pixel buffer of the window. The drawing coordinates determine the pixel index.\nIn EasyX, the IMAGE class contains a pointer DWORD* m_pBuffer that points to the image’s pixel buffer. Internally, the pixel data is stored in memory from left to right, top to bottom. To access the color of a pixel at (x, y), you would use:\nIn array form: Color pix_color = image[y][x] In EasyX: DWORD pix_color = buffer[y * width + x] (where width is the image width) You can retrieve the pixel buffer using EasyX’s API: DWORD* buffer = GetImageBuffer(\u0026amp;image). Each DWORD element occupies 4 bytes and stores RGBA data (Red, Green, Blue, Alpha).\nImplementing Image Flip Effects Start by loading the original animation frames for the player facing left. Then define a new array for the flipped (right-facing) frames. Each left-facing image is horizontally flipped to create its right-facing counterpart.\nBefore flipping, we use Resize to allocate memory and set the size of the right-facing IMAGE objects. If an IMAGE object is not created via copy constructor or loadimage, its pixel buffer is uninitialized—so Resize also handles memory allocation.\nNext, we retrieve the pixel buffers of both the left and right images and copy each pixel row by row. The horizontal flip is achieved by reversing the x-axis index: width - 1 - x.\nLoading left-facing animation frames:\n1 2 3 4 5 6 7 8 9 IMAGE img_player_left[6]; // Load player left-facing animation for (int i = 0; i \u0026lt; 6; i++) { static TCHAR img_path[256]; _stprintf_s(img_path, _T(\u0026#34;img/paimon_left_\u0026amp;d.png\u0026#34;), i); loadimage(\u0026amp;img_player_left[i], img_path); } Creating right-facing flipped frames:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 IMAGE img_player_right[6]; for (int i = 0; i \u0026lt; 6; i++) { int width = img_player_left[i].getwidth(); int height = img_player_left[i].getheight(); Resize(\u0026amp;img_player_right[i], width, height);\t// Resize and allocate memory for right-facing image // Flip each row horizontally DWORD* color_buffer_left_img = GetImageBuffer(\u0026amp;img_player_left[i]); DWORD* color_buffer_right_img = GetImageBuffer(\u0026amp;img_player_right[i]); for (int y = 0; y \u0026lt; height; y++) { for (int x = 0; x \u0026lt; width; x++) { int idx_left_img = y * width + x;\t// Source pixel index int idx_right_img = y * width + (width - 1 - x);\t// Target pixel index color_buffer_right_img[idx_right_img] = color_buffer_left_img[idx_left_img]; } } } Extracting RGB Components from Each Pixel EasyX provides three macros—GetGValue, GetRValue, and GetBValue—to extract the individual RGB components from a pixel. However, note that the commonly used COLORREF type (a 32-bit integer representing color) is stored in memory as 0xbbggrr, meaning the red and blue channels are swapped. So when using EasyX macros, you need to reverse the R and B components:\n1 2 3 4 DWORD pix_color = buffer[y * width + x]; BYTE r = GetBValue(pix_color); BYTE g = GetGValue(pix_color); BYTE b = GetRValue(pix_color); Implementing Image Flicker Effect The flicker effect is essentially a switch between the normal animation frames and a set of pure white silhouette frames. These silhouette frames can be dynamically generated by manipulating the pixel buffer.\nTo set a pixel to pure white, you can use the RGB macro to create a COLORREF value, then swap the red and blue channels using BGR, and finally add an alpha channel:\n1 2 3 4 // RGB(255, 255, 255) gives 0x00FFFFFF // Adding full opacity: (BYTE)(255) \u0026lt;\u0026lt; 24 = 0xFF000000 // Combined: 0xFFFFFFFF = fully opaque white DWORD white_pix = BGR(RGB(255, 255, 255)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); To implement the image flicker effect, the basic idea is to first define an array of silhouette animation frames. Then, for each original image frame, use Resize to match its size and allocate memory for the silhouette frame. After that, retrieve the color buffers of both the original and silhouette images. In a nested loop, check the color of each pixel—if the pixel is not already white, set it to pure white：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 IMAGE img_player_left_sketch[6]; // Generate silhouette frames for left-facing animation for (int i = 0; i \u0026lt; 6; i++) { int width = img_player_left[i].getwidth(); int height = img_player_left[i].getheight(); Resize(\u0026amp;img_player_left_sketch[i], width, height);\t// Allocate memory and set size DWORD* color_buffer_raw_img = GetImageBuffer(\u0026amp;img_player_left[i]); DWORD* color_buffer_sketch_img = GetImageBuffer(\u0026amp;img_player_left_sketch[i]); for (int y = 0; y \u0026lt; height; y++) { for (int x = 0; x \u0026lt; width; x++) { int idx = y * width + x; if ((color_buffer_raw_img[idx] \u0026amp; 0xFF000000) \u0026gt;\u0026gt; 24)\t// If pixel is not fully transparent color_buffer_sketch_img[idx] = BGR(RGB(255, 255, 255)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); } } } Implementing Freeze Effect Principle of Alpha Blending EasyX doesn’t automatically handle transparency. When alpha blending is applied, the final pixel color is calculated as: Final Color = Source Color * Alpha + Destination Color * （1 - Alpha）. Here, Alpha is a float between 0 and 1. For example, overlaying a green image on a red background would blend the colors based on this formula:\nImage Overlay Without Alpha Blending Image Overlay With Alpha Blending and the Formula To simulate a freeze effect, overlay a semi-transparent icy image on top of the current animation frame. Implementation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // Copy current frame for processing IMAGE img_current_frame(img_player_left[counter]); int width = img_curent_frame.getwidth(); int height = img_curent_frame.getheight(); DWORD* color_buffer_ice_img = GetImageBuffer(\u0026amp;img_ice); DWORD* color_buffer_frame_img = GetImageBuffer(\u0026amp;img_current_frame); // Traverse the color buffer of the current frame and blend the non-transparent regions for (int y = 0; y \u0026lt; height; y++) { for (int x = 0; x \u0026lt; width; x++) { int idx = y * width + x; static const float RATIO = 0.25f;\t// Blend ratio DWORD color_ice_img = color_buffer_ice_img[idx]; DWORD color_frame_img = color_buffer_frame_img[idx]; if ((color_frame_img \u0026amp; 0xFF000000) \u0026gt;\u0026gt; 24)\t// 0xFF000000: Alpha channel { // Note: The color buffer stores pixel data in BGR order, so you need to swap the red and blue channels when retrieving color values. BYTE r = (BYTE)(GetBValue(color_frame_img) * RATIO + GetBValue(color_ice_img) * (1 - RATIO)); BYTE g = (BYTE)(GetGValue(color_frame_img) * RATIO + GetGValue(color_ice_img) * (1 - RATIO)); BYTE b = (BYTE)(GetRValue(color_frame_img) * RATIO + GetRValue(color_ice_img) * (1 - RATIO)); // Blend with the Alpha channel color_buffer_frame_img[idx] = (BGR(RGB(r, g, b)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); } } } Enhancement: Adding Highlight to Frozen State To make the freeze effect more vivid, add a white scanning line from top to bottom. Only pixels with brightness above a threshold will be highlighted.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 void RenderFrozenPlayer() { static const POINT position = { 1075, 345}; static int counter = 0;\t// Animation frame index static int anim_timer = 0;\t// Animation timer static int frozen_timer = 0;\t// Freeze state timer static const int THICKNESS = 5;\t// Scanline thickness static int hightlight_pos_y = 0;// Vertical position of the scanline static bool is_frozen = false;\t// Whether the player is currently frozen // If not frozen, update animation timer if ((!is_frozen) \u0026amp;\u0026amp; (++anim_timer % 3 == 0)) counter = (counter + 1) % 6; // Update freeze timer and reset scanline position if (++frozen_timer % 100 == 0) { is_frozen = !is_frozen; highlight_pos_y = -THICKNESS; } // Draw shadow beneath the player putimage_alpha(position.x + (80 - 32) / 2, position.y + 80, \u0026amp;img_shadow); // Render different animation frames depending on freeze state if (is_frozen) { // Copy current frame for further processing IMAGE img_current_frame(img_player_left[counter]); int width = img_curent_frame.getwidth(); int height = img_curent_frame.getheight(); // Update vertical position of the highlight scanline highlight_pos_y = (highlight_pos_y + 2) % height; // Get color buffers of the current frame and the ice overlay DWORD* color_buffer_ice_img = GetImageBuffer(\u0026amp;img_ice); DWORD* color_buffer_frame_img = GetImageBuffer(\u0026amp;img_current_frame); for (int y = 0; y \u0026lt; height; y++) { for (int x = 0; x \u0026lt; width; x++) { int idx = y * width + x; static const float RATIO = 0.25f;\t// Blending ratio static const float THRESHOLD = 0.84f;\t// Highlight brightness threshold DWORD color_ice_img = color_buffer_ice_img[idx]; DWORD color_frame_img = color_buffer_frame_img[idx]; if ((color_frame_img \u0026amp; 0xFF000000) \u0026gt;\u0026gt; 24)\t// Check alpha channel (non-transparent) { // Note: Color buffer stores pixels in BGR order, so swap red and blue when extracting BYTE r = (BYTE)(GetBValue(color_frame_img) * RATIO + GetBValue(color_ice_img) * (1 - RATIO)); BYTE g = (BYTE)(GetGValue(color_frame_img) * RATIO + GetGValue(color_ice_img) * (1 - RATIO)); BYTE b = (BYTE)(GetRValue(color_frame_img) * RATIO + GetRValue(color_ice_img) * (1 - RATIO)); // If pixel brightness at scanline exceeds threshold, set it to pure white if ((y \u0026gt;= hightlight_pos_y \u0026amp;\u0026amp; y \u0026lt; = highlight_pos_y + THICKNESS) \u0026amp;\u0026amp; ((r / 255.0f) * 0.2126f + (g / 255.0f) * 0.7152f + (b / 255.0f) * 0.0722f \u0026gt;= TRESHOLD)) { color_buffer_frame_img[idx] = (BGR(RGB(255, 255, 255)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); continue; } color_buffer_frame_img[idx] = (BGR(RGB(r, g, b)) | (((DWORD)(BYTE)(255)) \u0026lt;\u0026lt; 24); } } } putimage_alpha(position.x, position.y, \u0026amp;img_current_frame);\t} else putimage_alpha(position.x, position.y, \u0026amp;img_player_left[counter]); } The brightness coefficients (0.2126, 0.7152, 0.0722) are based on a standard formula for perceived luminance.\nFull Source Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 #include \u0026lt;graphics.h\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; /* =============== Key Concepts =============== * 1. Avoid blocking operations or heavy, time-consuming tasks inside the main game loop. * 2. Difference between using a frame counter and a timer to control animation updates: * - Counter-based: Frame updates speed up on faster machines with higher refresh rates. * - Timer-based: Frame updates stay consistent across all machines, tied to real elapsed time. * 3. Use the Flyweight pattern to optimize resource loading. */ const int WINDOW_WIDTH = 1280; const int WINDOW_HEIGHT = 720; const int FPS = 60; const double PI = 3.14159; const int BULLET_BASE_RADIUS = 100; const int BULLET_RADIUS_CHANGE_RANGE = 25; const int PLAYER_ANIM_NUM = 6; const int ENEMY_ANIM_NUM = 6; const int BUTTON_WIDTH = 192; const int BUTTON_HEIGHT = 75; bool is_game_started = false; bool is_running = true; #pragma comment(lib, \u0026#34;MSIMG32.LIB\u0026#34;) // Links the Windows GDI+ library for advanced image operations #pragma comment(lib, \u0026#34;Winmm.lib\u0026#34;) // Links the Windows multimedia library // Custom Transparent Image Rendering void putimage_alpha(int x, int y, IMAGE* img); // Optimize resources loading class Atlas { public: Atlas(LPCTSTR path, int num) { // Load image frames TCHAR path_file[256]; for (int i = 0; i \u0026lt; num; i++) { _stprintf_s(path_file, path, i); IMAGE* frame = new IMAGE(); loadimage(frame, path_file); frame_list.push_back(frame); } } ~Atlas() { for (int i = 0; i \u0026lt; frame_list.size(); i++) { delete frame_list[i]; } } public: vector\u0026lt;IMAGE*\u0026gt; frame_list; }; Atlas* atlas_player_left; // Initialize in main() Atlas* atlas_player_right; Atlas* atlas_enemy_left; Atlas* atlas_enemy_right; class Animation { public: Animation(Atlas* atlas, int interval) { anim_atlas = atlas; interval_ms = interval; } ~Animation() = default;\t// The atlas is shared, so we don\u0026#39;t delete it here // It should be released at a higher level (e.g., in main) // Play animation void Play(int x, int y, int delta_time) { timer += delta_time; if (timer \u0026gt;= interval_ms) { idx_frame = (idx_frame + 1) % anim_atlas-\u0026gt;frame_list.size(); timer = 0; } putimage_alpha(x, y, anim_atlas-\u0026gt;frame_list[idx_frame]); } private: int interval_ms = 0; // Frame interval int timer = 0; // Animation timer int idx_frame = 0; // Current frame index private: Atlas* anim_atlas;\t// Pointer to shared atlas }; class Player { public: Player() { loadimage(\u0026amp;img_shadow, _T(\u0026#34;img/shadow_player.png\u0026#34;)); anim_left = new Animation(atlas_player_left, 45); anim_right = new Animation(atlas_player_right, 45); } ~Player() { delete anim_left; delete anim_right; } void ProcessEvent(const ExMessage\u0026amp; msg) { if (msg.message == WM_KEYDOWN) { switch (msg.vkcode) { case VK_UP: is_moving_up = true; break; case VK_DOWN: is_moving_down = true; break; case VK_LEFT: is_moving_left = true; break; case VK_RIGHT: is_moving_right = true; break; } } if (msg.message == WM_KEYUP) { switch (msg.vkcode) { case VK_UP: is_moving_up = false; break; case VK_DOWN: is_moving_down = false; break; case VK_LEFT: is_moving_left = false; break; case VK_RIGHT: is_moving_right = false; break; } }\t} void Move() { if (is_moving_up) position.y -= SPEED; if (is_moving_down) position.y += SPEED; if (is_moving_left) position.x -= SPEED; if (is_moving_right) position.x += SPEED; // Fix diagonal movement being faster than horizontal/vertical int dir_x = is_moving_right - is_moving_left; // Right is positive X direction int dir_y = is_moving_down - is_moving_up; // Down is positive Y direction double len_dir = sqrt(dir_x * dir_x + dir_y * dir_y); if (len_dir != 0) { double normalized_x = dir_x / len_dir; double normalized_y = dir_y / len_dir; position.x += (int)(SPEED * normalized_x); position.y += (int)(SPEED * normalized_y); } // Clamp player movement within window boundaries if (position.x \u0026lt; 0) position.x = 0; if (position.y \u0026lt; 0) position.y = 0; if (position.x + FRAME_WIDTH \u0026gt; WINDOW_WIDTH) position.x = WINDOW_WIDTH - FRAME_WIDTH; if (position.y + FRAME_HEIGHT \u0026gt; WINDOW_HEIGHT) position.y = WINDOW_HEIGHT - FRAME_HEIGHT; } void Draw(int delta_time) { // Draw shadow before rendering the player int shadow_pos_x = position.x + (FRAME_WIDTH / 2 - SHADOW_WIDTH / 2); int shadow_pos_y = position.y + FRAME_HEIGHT - 8; putimage_alpha(shadow_pos_x, shadow_pos_y, \u0026amp;img_shadow); static bool facing_left = false; int dir_x = is_moving_right - is_moving_left; if (dir_x \u0026lt; 0) facing_left = true; else if (dir_x \u0026gt; 0) facing_left = false; if (facing_left) anim_left-\u0026gt;Play(position.x, position.y, delta_time); else anim_right-\u0026gt;Play(position.x, position.y, delta_time); } const POINT\u0026amp; GetPosition() const { return position; } public: const int FRAME_WIDTH = 80; const int FRAME_HEIGHT = 80; private: const int SPEED = 3; // Player movement speed const int SHADOW_WIDTH = 32;\tprivate:\tIMAGE img_shadow; // Shadow beneath the player Animation* anim_left; Animation* anim_right; POINT position = { 500, 500 }; // Player position // Fix stuttering caused by asynchronous message handling and key input bool is_moving_up = false; bool is_moving_down = false; bool is_moving_left = false; bool is_moving_right = false; }; class Bullet { public: Bullet() = default; ~Bullet() = default; void Draw() const // Add \u0026#39;const\u0026#39; after the member function: this method does not modify any member variables { setlinecolor(RGB(255, 155, 50)); setfillcolor(RGB(200, 75, 10)); fillcircle(position.x, position.y, RADIUS); } public: POINT position = { 0, 0 }; private: const int RADIUS = 10; }; class Enemy { public: Enemy() { loadimage(\u0026amp;img_shadow, _T(\u0026#34;img/shadow_enemy.png\u0026#34;)); anim_left = new Animation(atlas_enemy_left, 45); anim_right = new Animation(atlas_enemy_right, 45); // Spawn boundaries for the enemy enum class SpawnEdge { Up = 0, Down, Left, Right }; // Randomly spawn the enemy on one of the four edges SpawnEdge edge = (SpawnEdge)(rand() % 4); // Generate specific random coordinates switch (edge) { case SpawnEdge::Up: position.x = rand() % WINDOW_WIDTH; position.y = -FRAME_HEIGHT; break; case SpawnEdge::Down: position.x = rand() % WINDOW_WIDTH; position.y = WINDOW_HEIGHT; break; case SpawnEdge::Left: position.x = -FRAME_WIDTH; position.y = rand() % WINDOW_HEIGHT; break; case SpawnEdge::Right: position.x = WINDOW_WIDTH; position.y = rand () % WINDOW_HEIGHT; break; default: break; } } ~Enemy() { delete anim_left; delete anim_right; } bool CheckBulletCollision(const Bullet\u0026amp; bullet) // Add \u0026#39;const\u0026#39; before the parameter: this argument will not be modified inside the function { // Treat the bullet as a point and check if it lies within the enemy\u0026#39;s rectangle bool is_overlap_x = bullet.position.x \u0026gt;= position.x \u0026amp;\u0026amp; bullet.position.x \u0026lt;= position.x + FRAME_WIDTH; bool is_overlap_y = bullet.position.y \u0026gt;= position.y \u0026amp;\u0026amp; bullet.position.y \u0026lt;= position.y + FRAME_HEIGHT; return is_overlap_x \u0026amp;\u0026amp; is_overlap_y; } bool CheckPlayerCollision(const Player\u0026amp; player) { // Use the center point of the enemy as the collision point POINT check_position = { position.x + FRAME_WIDTH / 2, position.y + FRAME_HEIGHT / 2 }; bool is_overlap_x = check_position.x \u0026gt;= player.GetPosition().x \u0026amp;\u0026amp; check_position.x \u0026lt;= player.GetPosition().x + player.FRAME_WIDTH; bool is_overlap_y = check_position.y \u0026gt;= player.GetPosition().y \u0026amp;\u0026amp; check_position.y \u0026lt;= player.GetPosition().y + player.FRAME_HEIGHT; return is_overlap_x \u0026amp;\u0026amp; is_overlap_y; } void Move(const Player\u0026amp; player) { const POINT\u0026amp; player_position = player.GetPosition(); int dir_x = player_position.x - position.x; int dir_y = player_position.y - position.y; double dir_len = sqrt(dir_x * dir_x + dir_y * dir_y); if (dir_len != 0) { double normalized_x = dir_x / dir_len; double normalized_y = dir_y / dir_len; position.x += (int)(normalized_x * SPEED); position.y += (int)(normalized_y * SPEED); } if (dir_x \u0026gt; 0) facing_left = false; else if (dir_x \u0026lt; 0) facing_left = true; } void Draw(int delta_time) { int shadow_pos_x = position.x + (FRAME_WIDTH / 2 - SHADOW_WIDTH / 2); int shadow_pos_y = position.y + FRAME_HEIGHT - 35; putimage_alpha(shadow_pos_x, shadow_pos_y, \u0026amp;img_shadow); if (facing_left) anim_left-\u0026gt;Play(position.x, position.y, delta_time); else anim_right-\u0026gt;Play(position.x, position.y, delta_time); } void Hurt() { alive = false; } bool CheckAlive() { return alive; } private: const int SPEED = 2; const int FRAME_WIDTH = 80; const int FRAME_HEIGHT = 80; const int SHADOW_WIDTH = 48;\tprivate: IMAGE img_shadow; Animation* anim_left; Animation* anim_right; POINT position = { 0, 0 }; bool facing_left = false; bool alive = true; }; // Button base class class Button { public: Button(RECT rect, LPCTSTR path_imag_idle, LPCTSTR path_imag_hovered, LPCTSTR path_imag_pushed) // load images { region = rect; loadimage(\u0026amp;img_idle, path_imag_idle); loadimage(\u0026amp;img_hovered, path_imag_hovered); loadimage(\u0026amp;img_pushed, path_imag_pushed); } ~Button() = default; void Draw() { switch (status) { case Status::Idle: putimage(region.left, region.top, \u0026amp;img_idle); break; case Status::Hovered: putimage(region.left, region.top, \u0026amp;img_hovered); break; case Status::Pushed: putimage(region.left, region.top, \u0026amp;img_pushed); break; } } void ProcessEvent(const ExMessage\u0026amp; msg) { switch (msg.message) { case WM_MOUSEMOVE: if (status == Status::Idle \u0026amp;\u0026amp; CheckCursorHit(msg.x, msg.y)) status = Status::Hovered; else if (status == Status::Idle \u0026amp;\u0026amp; !CheckCursorHit(msg.x, msg.y)) status = Status::Idle; else if (status == Status::Hovered \u0026amp;\u0026amp; !CheckCursorHit(msg.x, msg.y)) status = Status::Idle; break; case WM_LBUTTONDOWN: if (CheckCursorHit(msg.x, msg.y)) status = Status::Pushed; break; case WM_LBUTTONUP: if (status == Status::Pushed) OnClick(); break; default: break; } } protected: virtual void OnClick() = 0; private: bool CheckCursorHit(int x, int y) { return x \u0026gt;= region.left \u0026amp;\u0026amp; x \u0026lt;= region.right \u0026amp;\u0026amp; y \u0026gt;= region.top \u0026amp;\u0026amp; y \u0026lt;= region.bottom; } private: enum class Status { Idle = 0, Hovered, Pushed }; private: RECT region; IMAGE img_idle; IMAGE img_hovered; IMAGE img_pushed; Status status = Status::Idle; }; class StartGameButton : public Button { public: StartGameButton(RECT rect, LPCTSTR path_imag_idle, LPCTSTR path_imag_hovered, LPCTSTR path_imag_pushed) : Button(rect, path_imag_idle, path_imag_hovered, path_imag_pushed) {} ~StartGameButton() = default; protected: void OnClick() { is_game_started = true; mciSendString(_T(\u0026#34;play bgm repeat from 0\u0026#34;), NULL, 0, NULL); // Play bgm repeatly } }; class QuitGameButton : public Button { public: QuitGameButton(RECT rect, LPCTSTR path_imag_idle, LPCTSTR path_imag_hovered, LPCTSTR path_imag_pushed) : Button(rect, path_imag_idle, path_imag_hovered, path_imag_pushed) {} ~QuitGameButton() = default; protected: void OnClick() { is_running = false; } }; void TryGenerateEnemy(vector\u0026lt;Enemy*\u0026gt;\u0026amp; enemy_list); void UpdateBullets(vector\u0026lt;Bullet\u0026gt;\u0026amp; bullet_list, const Player\u0026amp; player); void DrawPlayerScore(int score); int main() { initgraph(WINDOW_WIDTH, WINDOW_HEIGHT); mciSendString(_T(\u0026#34;open mus/bgm.mp3 alias bgm\u0026#34;), NULL, 0, NULL); // load audio mciSendString(_T(\u0026#34;open mus/hit.wav alias hit\u0026#34;), NULL, 0, NULL); // Both the player and enemy constructors require atlas resources, // so atlas objects must be initialized before creating player and enemy instances. atlas_player_left = new Atlas(_T(\u0026#34;img/player_left_%d.png\u0026#34;), PLAYER_ANIM_NUM); atlas_player_right = new Atlas(_T(\u0026#34;img/player_right_%d.png\u0026#34;), PLAYER_ANIM_NUM); atlas_enemy_left = new Atlas(_T(\u0026#34;img/enemy_left_%d.png\u0026#34;), ENEMY_ANIM_NUM); atlas_enemy_right = new Atlas(_T(\u0026#34;img/enemy_right_%d.png\u0026#34;), ENEMY_ANIM_NUM); Player player; vector\u0026lt;Enemy*\u0026gt; enemy_list; vector\u0026lt;Bullet\u0026gt; bullet_list(3); // Only three bullets are needed, so raw pointers are avoided to prevent memory leaks\tExMessage msg; IMAGE img_menu;\tIMAGE img_background;\tint score = 0; RECT region_btn_start_game, region_btn_quit_game; // ================ UI ================ region_btn_start_game.left = (WINDOW_WIDTH - BUTTON_WIDTH) / 2; region_btn_start_game.right = region_btn_start_game.left + BUTTON_WIDTH; region_btn_start_game.top = 430; region_btn_start_game.bottom = region_btn_start_game.top + BUTTON_HEIGHT; region_btn_quit_game.left = (WINDOW_WIDTH - BUTTON_WIDTH) / 2; region_btn_quit_game.right = region_btn_quit_game.left + BUTTON_WIDTH; region_btn_quit_game.top = 550; region_btn_quit_game.bottom = region_btn_quit_game.top + BUTTON_HEIGHT; StartGameButton btn_start_game = StartGameButton(region_btn_start_game, _T(\u0026#34;img/ui_start_idle.png\u0026#34;), _T(\u0026#34;img/ui_start_hovered.png\u0026#34;), _T(\u0026#34;img/ui_start_pushed.png\u0026#34;)); QuitGameButton btn_quit_game = QuitGameButton(region_btn_quit_game, _T(\u0026#34;img/ui_quit_idle.png\u0026#34;), _T(\u0026#34;img/ui_quit_hovered.png\u0026#34;), _T(\u0026#34;img/ui_quit_pushed.png\u0026#34;)); loadimage(\u0026amp;img_menu, _T(\u0026#34;img/menu.png\u0026#34;)); loadimage(\u0026amp;img_background, _T(\u0026#34;img/background.png\u0026#34;)); BeginBatchDraw(); while (is_running) { DWORD start_time = GetTickCount(); while (peekmessage(\u0026amp;msg)) { if (is_game_started) { player.ProcessEvent(msg); } else { btn_start_game.ProcessEvent(msg); btn_quit_game.ProcessEvent(msg); } }\tif (is_game_started) { player.Move(); UpdateBullets(bullet_list, player); TryGenerateEnemy(enemy_list); for (Enemy* enemy : enemy_list) enemy-\u0026gt;Move(player); // Collision detection: enemies vs. player for (Enemy* enemy : enemy_list) { if (enemy-\u0026gt;CheckPlayerCollision(player)) { static TCHAR text[128]; _stprintf_s(text, _T(\u0026#34;最终得分：%d！\u0026#34;), score); MessageBox(GetHWnd(), text, _T(\u0026#34;游戏结束\u0026#34;), MB_OK); is_running = false; break; } } // Collision detection: enemies vs. bullets for (Enemy* enemy : enemy_list) { for (const Bullet\u0026amp; bullet : bullet_list) { if (enemy-\u0026gt;CheckBulletCollision(bullet)) { mciSendString(_T(\u0026#34;play hit from 0\u0026#34;), NULL, 0, NULL); enemy-\u0026gt;Hurt(); score++; } } } // Iterate through the enemy list and remove defeated enemies for (size_t i = 0; i \u0026lt; enemy_list.size(); i++) // Avoid using iterators since the container is modified during iteration { Enemy* enemy = enemy_list[i]; if (!enemy-\u0026gt;CheckAlive()) { // Swap with the last element and remove it // * This is an efficient deletion method when element order doesn\u0026#39;t matter swap(enemy_list[i], enemy_list.back()); enemy_list.pop_back(); delete enemy; } } } cleardevice(); // ======= Draw ======= if (is_game_started) { putimage(0, 0, \u0026amp;img_background); player.Draw(1000 / FPS); for (Enemy* enemy : enemy_list) enemy-\u0026gt;Draw(1000 / FPS); for (Bullet\u0026amp; bullet : bullet_list) bullet.Draw(); DrawPlayerScore(score); } else { putimage(0, 0, \u0026amp;img_menu); btn_start_game.Draw(); btn_quit_game.Draw(); } FlushBatchDraw(); DWORD end_time = GetTickCount(); DWORD delta_time = end_time - start_time; if (delta_time \u0026lt; 1000 / FPS) { Sleep(1000 / FPS - delta_time); } } // Release atlas pointers after the main loop delete atlas_player_left; delete atlas_player_right; delete atlas_enemy_left; delete atlas_enemy_right; EndBatchDraw(); return 0; } void putimage_alpha(int x, int y, IMAGE* img) { int w = img-\u0026gt;getwidth(); int h = img-\u0026gt;getheight(); AlphaBlend(GetImageHDC(NULL), x, y, w, h, GetImageHDC(img), 0, 0, w, h, { AC_SRC_OVER,0,255,AC_SRC_ALPHA }); } void TryGenerateEnemy(vector\u0026lt;Enemy*\u0026gt;\u0026amp; enemy_list) { const int INTERVAL = 100; static int counter = 0; if (++counter % INTERVAL == 0) { enemy_list.push_back(new Enemy()); } } // Update bullet postions void UpdateBullets(vector\u0026lt;Bullet\u0026gt;\u0026amp; bullet_list, const Player\u0026amp; player) { // Create a pulsating effect for visual flair const double RADIAL_SPEED = 0.0045; // Speed of radial oscillation const double TANGENT_SPEED = 0.0055; // Speed of tangential rotation double radian_interval = 2 * PI / bullet_list.size(); // Angular spacing between bullets // Update each bullet\u0026#39;s position based on the player\u0026#39;s location POINT player_position = player.GetPosition(); double radius = BULLET_BASE_RADIUS + BULLET_RADIUS_CHANGE_RANGE * sin(GetTickCount() * RADIAL_SPEED); for (size_t i = 0; i \u0026lt; bullet_list.size(); i++) { double radian = GetTickCount() * TANGENT_SPEED + radian_interval * i; bullet_list[i].position.x = player_position.x + player.FRAME_WIDTH / 2 + (int)(radius * sin(radian)); bullet_list[i].position.y = player_position.y + player.FRAME_HEIGHT / 2 + (int)(radius * cos(radian)); } } void DrawPlayerScore(int score) { static TCHAR text[64]; _stprintf_s(text, _T(\u0026#34;当前玩家得分：%d\u0026#34;), score); setbkmode(TRANSPARENT); settextcolor(RGB(255, 85, 185)); outtextxy(10, 10, text); } Reflection and Summary Although this project was developed largely based on beginner-level intuition without much architectural planning, I still learned a great deal. The instructor started with the overall game framework and gradually refined each module, clearly demonstrating the problems encountered in each part and the thought process behind solving them. This was highly valuable for my own development practice.\nI also gained a deeper understanding of how animations work at the pixel level, supplemented my knowledge of color and image buffers, and reviewed key concepts like vector motion and 2D collision detection. Through a simple yet hands-on example, I finally grasped the purpose of the Flyweight pattern and design patterns in general. It often felt like a moment of sudden clarity—like fog lifting to reveal the sky.\nLooking ahead, there are two areas I need to explore further. First is 3D collision detection and related topics. Although I studied them in school through traditional textbook exercises, I didn’t encounter any real development examples, so my memory is vague and I feel like I’ve forgotten most of it. Second is design patterns in game development. Back then, I read the books and answered questions in a very mechanical way, often feeling lost and confused. I plan to continue learning from this instructor’s design pattern courses to gain a more practical and intuitive understanding through real-world application.\n","date":"2025-10-08T10:47:30+02:00","image":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchteyvat-survivors/teyvat0_hu_5cfa909519d6e81c.webp","permalink":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchteyvat-survivors/","title":"【C++ Game Dev from Scratch】Teyvat Survivors"},{"content":"Table of Contents\nTerms Industry Expressions for Game \u0026amp; IT Developers Idiomatic Expressions For Interviews and Project Communication Terms Expression Meaning Usage Scenario polymorphism The ability of different objects to respond to the same function call in different ways. Core concept in object-oriented programming, especially with virtual functions. inheritance A mechanism where one class derives properties and behaviors from another. Used to create class hierarchies and reuse code. encapsulation Hiding internal details and exposing only necessary parts through interfaces. Helps protect data and maintain clean architecture. constructor / destructor Special functions that initialize and clean up objects. Used in C++ to manage object lifecycle. reference / pointer Ways to access or refer to memory locations. Essential in C++ for memory management and function arguments. overload / override Overload: same function name with different parameters; Override: redefine base class behavior. Used to extend or customize functionality. compile-time / runtime Compile-time: when code is translated to machine code; Runtime: when the program is executed. Important for debugging and performance analysis. stack / heap Two types of memory allocation: stack is fast and temporary, heap is dynamic and persistent. Used in variable storage and object creation. thread-safe Code that can safely run in multi-threaded environments without causing errors. Crucial in concurrent programming. undefined behavior Code that may produce unpredictable results due to language rules violations. Should be avoided to ensure stability and portability. template / generic Code structures that work with any data type. Used in C++ (templates) and TypeScript (generics) for reusable components. STL (Standard Template Library) A collection of pre-built classes and functions for common data structures and algorithms. Widely used in C++ for vectors, maps, sets, etc. lambda expression A concise way to define anonymous functions. Used in functional-style programming and callbacks. scope / lifetime Scope: where a variable is accessible; Lifetime: how long it exists in memory. Important for managing resources and avoiding bugs. Industry Expressions for Game \u0026amp; IT Developers Expression Meaning Usage Scenario MVP (Minimum Viable Product) The simplest version of a product that still delivers value. Used during early product development to test core features quickly. pivot A major change in strategy or direction. When a product or business shifts focus due to feedback or market changes. iteration One cycle of development and improvement. Common in agile workflows to gradually refine a product. sprint A short, focused period of development. Used in agile teams to deliver specific tasks within 1–2 weeks. backlog A prioritized list of tasks or features. Managed by product owners to track upcoming work. playtest Testing a game by letting users play it. Used to gather feedback on gameplay, balance, and user experience. asset pipeline The workflow for preparing and integrating visual/audio assets. Collaboration between artists and developers to get assets into the game. hitbox / collision detection The invisible area used to detect contact between objects. Essential for gameplay mechanics like combat or movement. frame rate / FPS The number of frames rendered per second. A key performance metric for smooth gameplay. latency / lag Delay between user action and system response. Critical in online games and real-time applications. live ops Ongoing updates and events after a game’s release. Used to retain players and keep content fresh. monetization Strategies to generate revenue from a product. Includes ads, in-app purchases, subscriptions, etc. sandbox environment A safe, isolated testing space. Used for experimentation without affecting production systems. scalability The ability of a system to handle growth. Important for systems expected to serve many users or large data loads. CI/CD (Continuous Integration / Deployment) Automated processes for building, testing, and releasing code. Core to modern DevOps workflows for fast and reliable delivery. Idiomatic Expressions Expression Meaning Usage “Let’s refactor this module.” Suggest improving the code structure to make it cleaner or more efficient. During a code review or when planning technical debt cleanup. “This function is too tightly coupled.” The function depends too much on other parts of the code, making it hard to reuse or test. When discussing code design problems. “Can we abstract this logic?” Suggest extracting common logic into a reusable function or class. While reviewing repetitive code or planning modularization. “This breaks the single responsibility principle.” The code does too many things and should be split into smaller parts. When evaluating class or function design. “Let’s keep it DRY.” Avoid repeating the same code in multiple places. During refactoring or team discussions. “This is a bit verbose.” The code or explanation is too long or detailed. When suggesting simplification. “It’s more idiomatic to use…” This way of writing is more natural or standard in this programming language. When giving style or best practice advice. “Let’s decouple the UI from the logic.” Separate the user interface from the underlying code logic. When designing front-end architecture. “This is a good candidate for a helper function.” This piece of code can be moved into a reusable function. During code cleanup or review. “We should avoid side effects here.” The function should not change external states unexpectedly. When writing pure or predictable functions. For Interviews and Project Communication Expression Meaning Usage Scenario I led the implementation of\u0026hellip; I was responsible for building or developing a specific feature or system. Used when describing your role in a project. We optimized the performance by\u0026hellip; We made the system faster or more efficient using a specific method. Used to highlight technical improvements. I collaborated with cross-functional teams. I worked with people from different departments (e.g., design, QA, product). Shows teamwork and communication skills. One challenge we faced was\u0026hellip; We encountered a problem during the project. Used to introduce problem-solving stories. I proposed a solution that\u0026hellip; I suggested a way to fix or improve something. Shows initiative and problem-solving ability. The project was deployed to production in\u0026hellip; The project went live and was used by real users. Used to show project completion and impact. I ensured code quality through\u0026hellip; I used specific practices to keep the code clean and reliable. Highlights engineering discipline and standards. I’m comfortable working in agile environments. I’m used to working in fast-paced, iterative teams. Shows adaptability and team experience. I’m currently exploring C++ for backend performance. I’m learning how to use C++ to make backend systems faster. Shows ongoing learning and technical curiosity. I’d love to contribute to scalable systems. I’m interested in building systems that can grow and handle more users. Expresses career goals and technical ambition. ","date":"2025-09-28T10:28:14+02:00","image":"https://nullshowjl.github.io/en/p/english-for-developersexpressions-for-dev-life/professional-english-en_hu_9708449b0c624132.webp","permalink":"https://nullshowjl.github.io/en/p/english-for-developersexpressions-for-dev-life/","title":"【English for Developers】Expressions for Dev Life"},{"content":"Table of Contents\nOverview Timeline - Phase One Phase One Summary Overview Project Goal: Build a personal blog website from scratch to document and share my learning notes, development journey, and reflections. It also serves as part of my portfolio. Tech Stack: GitHub Pages + Hugo, with lightweight customizations based on the Stack theme. Start Date: 2025-09-14 Current Status: In progress Learning Resources: Hugo official docs, Stack theme docs, tutorials from Bilibili and other creators online. Repository: GitHub Timeline - Phase One 2025-09-14 Goals： Set up the site and enable auto-deployment Add a basic version of the animated character widget Issues： Page not found when switching between Chinese and English Website tab icon not showing Solutions: Used GitHub Copilot in VS Code to help write a JS file for language switching Tested with icons that worked on other websites to rule out image issues; the icon eventually appeared after I worked on other modules Thoughts: I need to learn web programming systematically while developing, so I can understand not just how things work, but why GitHub Pages deploys quickly, but changes may take time to show. If the repo is updated but the site hasn’t refreshed, just wait a bit 2025-09-16 Goals: Add an Update Log to the sidebar Upload the first blog post (Chinese version) Change fonts Use a custom cursor Issue: Custom cursor not showing Solution: Found in the tutorial’s comment section that the issue might be with the image. Tested with the blogger’s image and it worked Thoughts: Comments under articles or videos can be very helpful—others may have already solved the same problem 2025-09-18 Goal: Finish a round of basic visual improvements Issues: Unsure how to apply specific fonts to different languages and code blocks Syntax error during auto-deployment Solutions: Used Copilot’s suggestions to fix the font issue Syntax error was due to indentation. VS Code auto-formatted incorrectly, so I switched to Notepad to fix it Thoughts: Front-end code is sensitive to indentation. Better to use Notepad or other editors instead of VS Code for certain tasks 2025-09-19 Goals:\nContinue visual improvements Adjust icons and text for Color Scheme Add dynamic background Add blog view counter Issue:\nAfter fixing overlapping icons, text formatting still didn’t align with other sidebar items Notes：\nTried for quite a while without success \u0026ndash; I\u0026rsquo;ll leave it for now and revisit it after I’ve studied more front-end\n2025-09-20 Goals:\nContinue visual improvements Add homepage loading animation Add footer animation Add blog post heatmap Issues:\nUnrelated text appeared at the bottom of the site Tried adding animation to the icon below the avatar but it didn’t work Solution:\nAI helped identify the issue: I used C++ style comments in custom.html, which browsers treated as text Notes：\nWill revisit the small icon animation after learning more front-end (fixed on 9-23) Thoughts:\nComment syntax varies a lot between languages - important to follow the correct format strictly 2025-09-22 Goal：\nContinue visual improvements Issue：\nLink page card images couldn’t be resized uniformly Notes：\nStill couldn’t solve the issue, so I’ve manually adjusted each image for now. Will come back to unify the layout after I’ve learned more front-end 2025-09-23 Goals:\nAdd RSS feeds for language-specific subscriptions Upgrade character widget2D to moc3 version Add footer animation Add blog post heatmap Issue:\nCharacter model failed to load Solution:\nUsed browser dev tools to debug. AI helped identify a missing \\ in the model folder path Thoughts:\nAlways double-check file paths Dev tools are super useful for debugging 2025-09-24 Goals:\nAdd a new character model and customize all parameters Issues:\nNew model failed to load jsDelivr didn’t load newly pushed files Solutions:\nDev tools showed the model was too large, so I decided to abandon it Learned from AI that jsDelivr caches tags and doesn’t auto-update. Used precise loading to avoid cluttering the repo Thoughts:\nFirst time realizing how important file size is for web delivery. Just like managing game assets in later stages of Brotato, each programming domain has its own key concerns that you only grasp through hands-on experience 2025-09-29 Goals:\nAdd runtime statistics and article count to the bottom of the webpage Issues:\nChinese characters appeared as garbled text Solutions:\nFollowed AI’s suggestion to inspect the file using VS Code. Found that the encoding was incorrect under UTF-8. After adjusting the encoding, the characters displayed correctly Thoughts:\nOpening the file in VS 2022 did not reveal any encoding issues, but VS Code clearly exposed the problem However, after editing in VS Code, clicking Save would automatically change the file format, causing Hugo to fail during compilation Phase One Summary Progress:\nFinished initial setup of the tech blog, including auto-deployment and basic visual customization Takeaways:\nLearned the basics of static site generators (config → template → render) Got familiar with GitHub Pages deployment Didn’t study front-end formally during this phase—relied on tutorials and AI. Learned how to ask AI better questions to solve problems Next Steps:\nStudy front-end systematically and revisit unresolved issues Read and understand the customized parts of the code Keep updating the site based on my TODO list ","date":"2025-09-24T09:11:30+02:00","image":"https://nullshowjl.github.io/en/p/dev-logmy-tech-blog-website/blog-en_hu_5ee5269ebd73980f.webp","permalink":"https://nullshowjl.github.io/en/p/dev-logmy-tech-blog-website/","title":"【Dev Log】My Tech Blog Website"},{"content":"Table of Contents\nOverview Environment Setup Demo1 - Circle Follows Mouse Demo2 - Tic-Tac-Toe Game Reflection and Summary Overview Tech Stack：C++ + EasyX\nProject Goal: Set up the EasyX environment and complete two small demos (a circle that follows the mouse, and a tic-tac-toe game). Understand the basic structure of a game loop.\nCourse Source：Bilibili-Voidmatrix\nEnvironment Setup EasyX: Just search for “EasyX” and download it directly from the official site.\nTo use EasyX functions, include \u0026lt;graphics.h\u0026gt; in your header file.\nDemo1 - Circle Follows Mouse Design Approach Create a window and set up the main game loop Draw a circle that follows the mouse Optimize rendering using double buffering Development Steps Initialize Window and Main Loop Use initgraph() to initialize the window, and a while (true) loop to prevent it from closing instantly:\n1 2 3 4 5 6 7 8 9 int main() { initgraph(1280, 720); while (true) { } return 0; } This infinite loop is the basic framework for all games. Input handling and screen updates happen inside it:\n1 2 3 4 5 while (true) { // Handle player input // Update screen } Draw the Circle Use solidcircle() to draw the circle.\nHandle Input Use peekmessage() to process input.\nIn EasyX, mouse movement, clicks, and keyboard input are all considered “messages.” These messages are stored in a queue. Each time peekmessage() is called, EasyX tries to pull one message from the queue. If successful, it returns true; otherwise, false. So we use another loop to keep pulling messages until the queue is empty.\nAccording to the docs, peekmessage() requires a parameter msg, which is a pointer to an ExMessage struct. One of its members, message, indicates the type of input (mouse, keyboard, etc.). So the input handling looks like this:\n1 2 3 4 5 6 7 8 9 10 11 while (true) { ExMessage msg; while (peekmessage(\u0026amp;msg)) { if (msg == WM_MOUSEMOVE) { // Handle mouse movement } } } Clear Screen If you don’t clear the screen, the ball will leave a trail as it follows the mouse. Use cleardevice() before each draw.\nOptimize Drawing with Double Buffering Use BeginBatchDraw(), FlushBatchDraw(), and EndBatchDraw():\n1 2 3 4 5 6 7 8 9 10 11 12 13 BeginBatchDraw(); while (true) // Main game loop { // Handle input // Update game state cleardevice(); // Clear screen // Draw FlushBatchDraw(); } EndBatchDraw(); Key Functions initgraph() – initialize graphics window peekmessage() – get mouse movement messages cleardevice() – clear screen solidcircle(x, y, r) – draw circle BeginBatchDraw(), FlushBatchDraw(), EndBatchDraw() – double buffering Concepts EasyX Coordinate System Origin is at the top-left of the screen. X increases to the right, Y increases downward.\nRender Buffer Think of the render buffer as a giant canvas. Drawing functions paint on it. Earlier drawings can be covered by later ones. cleardevice() fills the canvas with the current background color (default is black).\nBeginBatchDraw() creates a new invisible canvas. All drawing happens on this canvas until FlushBatchDraw() and EndBatchDraw() swap it with the visible one. This prevents flickering caused by frequent redraws.\nGame Loop A typical game loop repeatedly performs:\n1 2 3 4 5 6 while (true) { // Read input // Process data // Render screen } Initialize game data before the loop (before BeginBatchDraw()), and release resources after the loop ends.\nDemo2 - Tic-Tac-Toe Game Game Description Players take turns placing X or O on a 3 * 3 grid. If one player gets three in a row (horizontal, vertical, or diagonal), they win. If all nine cells are filled with no winner, it’s a draw. This demo supports local two-player mode only.\nDesign Approach Three Core Elements in the Game Loop Input: Handle mouse left-clicks. If a blank cell is clicked, place a piece.\nData Processing: Check for game-over conditions: three matching pieces in a line or full board. If the game ends, show a popup and exit the loop.\nRendering: Use line() to draw the grid and X pieces (diagonal lines), and circle() for O pieces. Display the current piece type in the top-left corner.\nData Structures Board and Pieces: Use a 2D array char board_data[3][3] for the board. Use 'X' and 'O' for pieces, and '-' for empty cells.\nGame Over Conditions Win: Check all 8 possible winning combinations for both X and O.\nDraw: If no '-' remains and no winner, it’s a draw.\nDevelopment Steps Top-Down Approach Start with the framework, then fill in details.\nGame Loop Skeleton Use bool running to control the loop. Use CheckWin() and CheckDraw() to determine game status.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 bool running = true; ExMessage msg; BeginBatchDraw(); while (running) // Main game loop { while (peekmessage(\u0026amp;msg)) { // Input } // Data processing if (CheckWin(\u0026#39;X\u0026#39;)) { // Pop up message and end the game MessageBox(GetHWnd(), _T(\u0026#34;X Player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckWin(\u0026#39;O\u0026#39;)) { // Similar logic to the above } else if (CheckDraw()) { // Similar logic to the above } cleardevice(); // Draw all the objects DrawBoard(); DrawPiece(); DrawPrompt(); FlushBatchDraw(); } EndBatchDraw(); Input Logic Mouse coordinates are in pixels. Convert them to grid indices:\n1 2 3 4 5 6 int x = msg.x; // Pixel indices of mouse int y = msg.y; int index_x = x / 200; // Grid indices of mouse int index_y = y / 200; Then place the piece and switch to the other type.\nData Processing Logic CheckWin() uses brute-force to check 8 patterns.\nCheckDraw() loops through all cells to check for '-'.\n1 2 3 4 5 6 7 8 9 10 for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { if (board[row][col] == \u0026#39;-\u0026#39;) { } } } Rendering Logic Board: Use line() with pixel coordinates.\nX Pieces: Use diagonal line() calls.\nO Pieces: Use circle() with center offset by +100 pixels.\nDrawing the prompt message: To make it work in more general coding environments, used some less common types and functions \u0026ndash; but they work similarly to C’s printf().\n1 2 static TCHAR str[64]; _stprintf_s(str, _T(\u0026#34;Current piece type：%c\u0026#34;), current_piece); Some font styling functions：\n1 2 settextcolor(RGB(225, 175, 45)); // Set the text color to orange for better visual //\temphasis; outtextxy(0, 0, str); // Display the string at a specified position Optimization Last Piece Not Drawn: If win-check happens before drawing, the popup blocks rendering. So draw first, then check.\nHigh CPU Usage: When a computer runs a while loop, it executes extremely fast—our main game loop can complete thousands of iterations in an instant, consuming a large amount of CPU time. For most displays with a physical refresh rate of only 60Hz, this leads to unnecessary performance waste. A quick and crude solution is to use sleep(15) to force the program to pause for 15 milliseconds after each loop. However, this isn’t recommended. As the game grows in complexity, the amount of computation per loop can vary, depending on how the operating system allocates CPU resources. This means the actual time spent per loop may differ. So instead, we should calculate how long each frame takes to process and dynamically adjust the sleep time afterward. The recommended approach is to set a fixed frame rate manually. To do this, we use the GetTickCount() function, which returns the number of milliseconds since the program started running.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while (running) { DWORD start_time = GetTickCount(); // Get the start time of the current loop // Read input // Process data // Render screen DWORD end_time = GetTickCount(); // Get the end time of the current loop DWORD delta_time = end_time - start_time; // Calculate the time interval // Dynamically assign sleep time based on the interval // Refresh the screen at 60 frames per second if (delta_time \u0026lt; 1000 / 60) // If the interval is less than the time for one frame, // sleep; Otherwise, no need to sleep { Sleep(1000 / 60 - delta_time); } } // Release resources } Full source codeinclude \u0026lt;graphics.h\u0026gt; char board_data[3][3] = { {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;}, {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;}, {\u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;-\u0026#39;} }; char current_piece = \u0026#39;O\u0026#39;; bool CheckWin(char c); bool CheckDraw(); void DrawBoard(); void DrawPiece(); void DrawPrompt(); int main() { //======= Initialization ======= initgraph(600, 600); ExMessage msg; bool running = true; // Double buffering to prevent screen flickering BeginBatchDraw(); //======= Main game loop ======= while (running) { DWORD start_time = GetTickCount(); while (peekmessage(\u0026amp;msg)) { //======= Handle input ======= // Detect mouse left-click messages if (msg.message == WM_LBUTTONDOWN) { // Calculate click position int x = msg.x; int y = msg.y; int index_x = y / 200; int index_y = x / 200; //========= Handle data processing ========= // Place piece if (board_data[index_y][index_x] == \u0026#39;-\u0026#39;) { board_data[index_y][index_x] = current_piece;\t// Switch piece type if (current_piece == \u0026#39;O\u0026#39;) { current_piece = \u0026#39;X\u0026#39;; } else if (current_piece == \u0026#39;X\u0026#39;) { current_piece = \u0026#39;O\u0026#39;; } } } }\tcleardevice(); //===== Handle rendering ===== DrawBoard();\tDrawPiece(); DrawPrompt(); FlushBatchDraw(); // Check for win condition -- placed after rendering to ensure the last piece // is drawn if (CheckWin(\u0026#39;X\u0026#39;)) { MessageBox(GetHWnd(), _T(\u0026#34;X player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckWin(\u0026#39;O\u0026#39;)) { MessageBox(GetHWnd(), _T(\u0026#34;O player wins\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } else if (CheckDraw()) { MessageBox(GetHWnd(), _T(\u0026#34;Draw\u0026#34;), _T(\u0026#34;Game over\u0026#34;), MB_OK); running = false; } //======= Set frame rate（Optimization）======= DWORD end_time = GetTickCount(); DWORD delta_time = end_time - start_time; if (delta_time \u0026lt; 1000 / 60) { Sleep(1000 / 60 - delta_time); // Optimize performance by capping frame // rate at 60 FPS -- avoid running too fast } } EndBatchDraw(); return 0; } bool CheckWin(char c) { if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[0][1] == c \u0026amp;\u0026amp; board_data[0][2] == c) return true; if (board_data[1][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[1][2] == c) return true; if (board_data[2][0] == c \u0026amp;\u0026amp; board_data[2][1] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[1][0] == c \u0026amp;\u0026amp; board_data[2][0] == c) return true; if (board_data[0][1] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[2][1] == c) return true; if (board_data[0][2] == c \u0026amp;\u0026amp; board_data[1][2] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; if (board_data[2][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[0][2] == c) return true; if (board_data[0][0] == c \u0026amp;\u0026amp; board_data[1][1] == c \u0026amp;\u0026amp; board_data[2][2] == c) return true; return false; } bool CheckDraw() { for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { if (board_data[row][col] == \u0026#39;-\u0026#39;) { return false; } } } return true; } void DrawBoard() { line(0, 200, 600, 200); line(0, 400, 600, 400); line(200, 0, 200, 600); line(400, 0, 400, 600); } void DrawPiece() { for (int col = 0; col \u0026lt; 3; col++) { for (int row = 0; row \u0026lt; 3; row++) { switch (board_data[row][col]) { case \u0026#39;-\u0026#39;: break; case \u0026#39;O\u0026#39;: circle(200 * row + 100, 200 * col + 100, 100); break; case \u0026#39;X\u0026#39;: line(200 * row, 200 * col, 200 * (row + 1), 200 * (col + 1)); line(200 * (row + 1), 200 * col, 200 * row, 200 * (col + 1)); } } }\t} void DrawPrompt() { static TCHAR str[64]; _stprintf_s(str, _T(\u0026#34;Current piece type：%c\u0026#34;), current_piece); settextcolor(RGB(225, 175, 45)); outtextxy(0, 0, str); } Reflection and Summary This was my first time truly understanding the game loop, double buffering, coordinate systems, and frame rate control. I’ve used C++ and raylib before, but mostly by copying code without fully grasping it. This time, I followed the tutorial step by step, focusing on fast and simple implementation rather than object-oriented design. I used a top-down approach: build the framework first, then solve each problem one by one.\nI plan to finish all of VoidMatrix’s tutorials to improve my coding skills and deepen my understanding of game development. I also want to align my coding style with industry standards.\n","date":"2025-09-18T09:11:30+02:00","image":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchfundamental/tictactoe-en_hu_c9d732c287ad5881.webp","permalink":"https://nullshowjl.github.io/en/p/c-game-dev-from-scratchfundamental/","title":"【C++ Game Dev from Scratch】Fundamental"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://nullshowjl.github.io/en/p/rich-content/","title":"Rich Content"}]